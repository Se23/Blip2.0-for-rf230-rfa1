<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="44:TestAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40486d50"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40494820"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40494820"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40ae8408"/></to>
    </wire>
    <wire loc="47:TestAppC.nc">
      <from><interface-ref name="MultiLed" scoped="" ref="0x40481850"/></from>
      <to><interface-ref name="MultiLed" scoped="" ref="0x40aff368"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="MultiLed" scoped="" ref="0x40aff368"/></from>
      <to><interface-ref name="MultiLed" scoped="" ref="0x40afc160"/></to>
    </wire>
    <wire loc="50:TestAppC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40489198"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b2ea50"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40b2ea50"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b3aa18"/></to>
    </wire>
    <wire loc="51:TestAppC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40491bf8"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40b2d0e0"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40b2d0e0"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40c4e8f8"/></to>
    </wire>
    <wire loc="54:TestAppC.nc">
      <from><interface-ref name="HdlcUart" scoped="" ref="0x40b28ea0"/></from>
      <to><interface-ref name="HdlcUart" scoped="" ref="0x40e1b0b8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <from><interface-ref name="HdlcUart" scoped="" ref="0x40e1b0b8"/></from>
      <to><interface-ref name="HdlcUart" scoped="" ref="0x40e18288"/></to>
    </wire>
    <wire loc="55:TestAppC.nc">
      <from><interface-ref name="UartControl" scoped="" ref="0x40b2e598"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40e1ec08"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40e1ec08"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40e1bda8"/></to>
    </wire>
    <wire loc="67:TestAppC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40e34d80"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40b21760"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40b21760"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40b4f010"/></to>
    </wire>
    <wire loc="68:TestAppC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40b2b858"/>
      <arguments>
        <value cst="I:16463">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40e34848"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40e34848"/></from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40e33e10"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40e4ca28"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40df31f0"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41092e00"/></to>
    </wire>
    <wire loc="90:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41035340"/></to>
    </wire>
    <wire loc="112:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40fdf5e0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40bc75e8"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x40a7cd78"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x40a9b920"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a556d8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40960978"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x408eb400"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40f1ac98"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ee6708"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x40ae87a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x40357b58"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x40357b58"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x40421738"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x40ae8d68"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4049dc58"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4049dc58"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4049bea8"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40ae7240"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x404a4508"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404c5960"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x404a4c88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408916f0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x404a2698"/></from>
      <to><interface-ref name="LedsInit" scoped="" ref="0x404a4c88"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="McuInit" scoped="" ref="0x404a22d8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404a9328"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x404a9328"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404bbe00"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="Stm25pInit" scoped="" ref="0x404a2a68"/></from>
      <to><interface-ref name="Stm25pOff" scoped="" ref="0x404d60c0"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <from><interface-ref name="Stm25pOff" scoped="" ref="0x404d60c0"/></from>
      <to><interface-ref name="Stm25pOff" scoped="" ref="0x404d6900"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <from><interface-ref name="BatteryWarning" scoped="" ref="0x404a2e60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404a3cd0"/></to>
    </wire>
    <wire loc="6:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x404a3cd0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408876e0"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="AdcInit" scoped="" ref="0x404a9ae0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406df2d8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x411192c0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x407b6ec0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40622010"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40e980a8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="TimerInit" scoped="" ref="0x404b9628"/></from>
      <to><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="AdcInit" scoped="" ref="0x404b99d8"/></from>
      <to><interface-ref name="AdcInit" scoped="" ref="0x404a9ae0"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="RadioInit" scoped="" ref="0x404b9da0"/></from>
      <to><interface-ref name="RFA1RadioOff" scoped="" ref="0x404a6248"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x404b9260"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404c55b0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <from><interface-ref name="Toggle" scoped="" ref="0x404dce20"/></from>
      <to><interface-ref name="Power" scoped="" ref="0x404e5688"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="Power" scoped="" ref="0x404e5688"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x404f3a98"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x404e61d0"/></from>
      <to><interface-ref name="PortB0" scoped="" ref="0x404e9750"/></to>
    </wire>
    <wire loc="117:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x404e9750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <from><interface-ref name="Hold" scoped="" ref="0x404e6bd8"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x4054e438"/></to>
    </wire>
    <wire loc="145:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x404f3a98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x404ff210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x404f6750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x404fcce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x40503ea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG5" scoped="" ref="0x4050a750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="112:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x404ea2f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x40504a98"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x404efea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x404f4670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x404f9c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="107:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x404e1010"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="120:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x404e7670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x404edce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x404fe4b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x40501ce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x4050b2f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x404fd8e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="110:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x404ecea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="123:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x404f1590"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x404ffe08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="128:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x404f0a08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x404f5210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x404fa750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x405028e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="113:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x404eace8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="118:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x404e8210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x404ee8e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="144:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x404f30a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x40505670"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x404e1a08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x404f20a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x404f8750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x40500750"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x404f7c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x404fc2f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x405034b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x4050bce8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="111:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x404eb8e0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="124:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x404f0010"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x405040a0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x404ef4b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x404f5c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x40526af8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x404f9210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="166:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x405012f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052cc68"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x404e45f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x404e8c08"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x404ed2f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x4050c830"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405355c8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x404feea8"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4052f440"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x404f7210"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x404ec4b0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x405070a8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x404f2b18"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x4051f920"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="7:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="Voltage" scoped="" ref="0x4088b530"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40551448"/></to>
    </wire>
    <wire loc="6:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40551448"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406b5ba0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="8:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="Switch" scoped="" ref="0x406b6818"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x4055c8f0"/></to>
    </wire>
    <wire loc="6:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x4055c8f0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x4055a0b0"/></to>
    </wire>
    <wire loc="9:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x40888c78"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x408aa968"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x408aa968"/></from>
      <to><interface-ref name="PortB5" scoped="" ref="0x404f2b18"/></to>
    </wire>
    <wire loc="10:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40889118"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406b35c0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x406b35c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40894b98"/></to>
    </wire>
    <wire loc="11:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x40888270"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x40789e30"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x40789e30"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x407b25d8"/></to>
    </wire>
    <wire loc="7:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x4055ac88"/></from>
      <to><interface-ref name="PortD5" scoped="" ref="0x404f30a0"/></to>
    </wire>
    <wire loc="8:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4055f210"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4055b330"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4055b330"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40573c38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40573c38"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40682cc8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40687cc8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x4057af20"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x4057af20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ea1ce0"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x406aa0c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40668968"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x40e9ea00"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ea42d0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40ea42d0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40e984e0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40e9f7b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40635768"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40635768"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x406440c0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x40e97ee8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405a2c00"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x405a2c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405b3d50"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCompare" scoped="" ref="0x40e93010"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x405ac010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="SfdCapture" scoped="" ref="0x405b4420"/></from>
      <to><interface-ref name="SfdCapture" scoped="" ref="0x405c5ac0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x405ac010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x405bfe88"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x405ac010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x405bb248"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x405ac010"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x405c8680"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x405c3e80"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x404336b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x40a994b8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x404336b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x407dc478"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x404336b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x40717ed8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x404336b0"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x405c3a90"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40625d50"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40622448"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x406285f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405a2c00"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40643380"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40625d50"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x40685658"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x406bb2b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="6:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x406b5ba0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x408674d8"/></to>
    </wire>
    <wire loc="7:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40866170"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406b2de8"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x406b2de8"/></from>
      <to><interface-ref name="VoltageMilliVolts" scoped="" ref="0x4084a180"/></to>
    </wire>
    <wire loc="8:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40866d60"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4084ea18"/></to>
    </wire>
    <wire loc="105:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x4084ea18"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40f16170"/></to>
    </wire>
    <wire loc="9:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x408734d0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x4086ac88"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x4086ac88"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40f153f0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <from><interface-ref name="AdcRaw" scoped="" ref="0x4084ae70"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406c2c98"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x406c2c98"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406cc480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <from><interface-ref name="MeasureBridge" scoped="" ref="0x40849b10"/></from>
      <to><interface-ref name="PortF0" scoped="" ref="0x405040a0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x408475f8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4084bda8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4084bda8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40573c38"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406c1848"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40833a88"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406ca940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406c1848"/></to>
    </wire>
    <wire loc="38:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x406c91b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x406d51b8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x406d3618"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x406c1d20"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x406cc480"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x407b4868"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x406c7958"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40786390"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x408371c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x406c91b8"/></to>
    </wire>
    <wire loc="34:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4079c8b8"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406ca940"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40838590"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x407873d8"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4079c040"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406d1bd8"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406d1bd8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406dcb58"/></to>
    </wire>
    <wire loc="38:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x4079b088"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x40789e30"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x406e2db0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x406de110"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x406d51b8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x407703a0"/></to>
    </wire>
    <wire loc="105:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x407703a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40ee5bc0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40785a50"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x406d3618"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x406e6dd8"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x406d0588"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x406d0588"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x40704658"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x406db648"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404a4508"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x407839f0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x406dc6c8"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40782150"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40770ee8"/></to>
    </wire>
    <wire loc="107:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40770ee8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ee37b0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x407162a8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></to>
    </wire>
    <wire loc="106:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40770ae0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40ee33a8"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x407855a0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40ee3e48"/></to>
    </wire>
    <wire loc="109:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40ee2338"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40785a50"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40ee2760"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x40ee6a40"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40ee1c90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40eff7f8"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x407839f0"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x40effbf0"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x40783de8"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40efff08"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40782150"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40efe5b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x407827e8"/></to>
    </wire>
    <wire loc="104:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x407a9c70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x407b10c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407bd010"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x407bc268"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407bad88"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x407bad88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407cd320"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x407cc558"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407c8858"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x407c8858"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407d4878"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x407d7010"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x407df470"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407c3c28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x407d0978"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407c3c28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x407e5d28"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407c3c28"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x407e1100"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x407dc868"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <from><interface-ref name="calcTask" scoped="" ref="0x40844328"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x4086a1e8"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40f168b0"/></to>
    </wire>
    <wire loc="107:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4086a5f0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40f16cb8"/></to>
    </wire>
    <wire loc="109:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40f158b0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40869208"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40f15cd8"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x40f17010"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40f492f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408916f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40894850"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x408a9c60"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x40896ee0"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40896ee0"/></from>
      <to><interface-ref name="PortE4" scoped="" ref="0x404fa750"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x408a8660"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x408938f0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x408938f0"/></from>
      <to><interface-ref name="PortE5" scoped="" ref="0x404f9210"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x408a7060"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x408922e8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x408922e8"/></from>
      <to><interface-ref name="PortE6" scoped="" ref="0x404f9c08"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <from><interface-ref name="Led3" scoped="" ref="0x408a7a48"/></from>
      <to><interface-ref name="Led3" scoped="" ref="0x40892cd0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <from><interface-ref name="Led3" scoped="" ref="0x40892cd0"/></from>
      <to><interface-ref name="PortE7" scoped="" ref="0x40505670"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x408aa330"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x408adb98"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <from><interface-ref name="GpioInterrupt" scoped="" ref="0x408adb98"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x408ce590"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <from><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x408c2ab0"/></from>
      <to><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x408bc068"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="ControlInt" scoped="" ref="0x408ec280"/></from>
      <to><interface-ref name="GpioInterrupt" scoped="" ref="0x408aa330"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="ControlPin" scoped="" ref="0x408ec940"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x408aa968"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x408d4b18"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x408edee8"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x408edee8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40960d10"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <from><interface-ref name="turnOff" scoped="" ref="0x408e95e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <from><interface-ref name="turnOn" scoped="" ref="0x408ebef0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40960d10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x409810f8"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x4091bbe0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40921be8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40911068"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40962310"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40919100"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x409203a8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40916010"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x409629a8"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40927df8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x409206d0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40960978"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40983d48"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40975840"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40916548"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40962ed0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4095dc20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x409615a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4095d618"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40975338"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x40ae1af8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x4095dc20"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40a37710"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x4095d618"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40a37350"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x40a37ea0"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40975338"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4097f500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40975840"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40a36e50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40975840"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40a2f340"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40975840"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40a363c0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x4097b948"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x40a36898"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x4097d7f8"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x40977c18"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x40a33718"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40993548"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40a32608"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40a32608"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40a3a330"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40a299e8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40a32a88"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40a32a88"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40a3ac20"/></to>
    </wire>
    <wire loc="332:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x409a57a0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x409a4a18"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x409a6010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x409c2428"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x40a35db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x40a34270"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40a388f0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40a3a7a0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40a3a7a0"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40a55e28"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40a3ac20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40a53290"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40a3a330"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40a55a10"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40a576f0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40acd170"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40acd170"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40aca7f0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40a6f0a0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40a576f0"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x40a53b28"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x40a7d178"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x40a7d178"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x40a9bd70"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x40a71010"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x40a7d688"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x40a7d688"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x40a9a368"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x40a71448"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x40a7db80"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x40a7db80"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x40a9a880"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x40a7e508"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40a9ccd0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x40a7e010"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x40a9c7b8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x40a7fa80"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x40a9c288"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40a99888"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404a4508"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40a98010"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40a98010"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40ac9ae8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40ac6890"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40ac6890"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40ae6dd8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40ae3078"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407bad88"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40af7a38"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406b35c0"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40af7010"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4095dc20"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40af76f0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4095d618"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40975338"/>
      <arguments>
        <value cst="I:114">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40ad6a28"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <from><interface-ref name="sendAck" scoped="" ref="0x40af5218"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40420010"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x40420c70"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x4035a458"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40b03060"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="99:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Led3" scoped="" ref="0x40b02380"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Green" scoped="" ref="0x40b029b0"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="128:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Yellow" scoped="" ref="0x40b00648"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="46:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <from><interface-ref name="MultiLed" scoped="" ref="0x40afc160"/></from>
      <to><interface-ref name="MultiLed" scoped="" ref="0x40afb9a0"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x40b03688"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Red" scoped="" ref="0x40b00010"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x40b03cb0"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:/opt/tinyos-2.x/tos/system/LedC.nc">
      <from><interface-ref name="Orange" scoped="" ref="0x40b00c80"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40afcc00"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="47:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <from><interface-ref name="Led" scoped="" ref="0x40afcc00"/></from>
      <to><interface-ref name="Led" scoped="" ref="0x40b1c478"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40b1caa0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x406b35c0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b27ec8"/></from>
      <to><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b4dae0"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b4dae0"/></from>
      <to><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c53da8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40b4f010"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40b60158"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppOptions" scoped="" ref="0x40b27110"/></from>
      <to><interface-ref name="PppOptions" scoped="" ref="0x40b4bcf0"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="PppOptions" scoped="" ref="0x40b4bcf0"/></from>
      <to><interface-ref name="PppOptions" scoped="" ref="0x40b62610"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40c4e8f8"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40d5b558"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40b51538"/></from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40b2b858"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="HdlcUart" scoped="" ref="0x40b51e30"/></from>
      <to><interface-ref name="HdlcUart" scoped="" ref="0x40b28ea0"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="UartControl" scoped="" ref="0x40b50528"/></from>
      <to><interface-ref name="UartControl" scoped="" ref="0x40b2e598"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppControl" scoped="" ref="0x40b3fcf0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b509e0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40b509e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40b67df8"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40b51538"/>
      <arguments>
        <value cst="I:49185">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40c4e3a0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40c4e3a0"/></from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40c70420"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40b4f010"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c490e8"/></from>
      <to><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b4dae0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppOptions" scoped="" ref="0x40c49e00"/></from>
      <to><interface-ref name="PppOptions" scoped="" ref="0x40b4bcf0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="ProtocolReject" scoped="" ref="0x40b3a480"/></from>
      <to><interface-ref name="ProtocolReject" scoped="" ref="0x40c4b740"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="ProtocolReject" scoped="" ref="0x40c4b740"/></from>
      <to><interface-ref name="ProtocolReject" scoped="" ref="0x40c70a88"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40b3f010"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40c4e8f8"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppProtocolReject" scoped="" ref="0x40b51ac0"/></from>
      <to><interface-ref name="PppProtocolReject" scoped="" ref="0x40b371d0"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <from><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40c4aac8"/></from>
      <to><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40b4b7b8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40b4b7b8"/></from>
      <to><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40b608b0"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c53da8"/></from>
      <to><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40fde580"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="PppProtocol" scoped="" ref="0x40b47158"/></from>
      <to><interface-ref name="PppProtocol" scoped="" ref="0x40b51538"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="PppProtocolReject" scoped="" ref="0x40b47d48"/></from>
      <to><interface-ref name="PppProtocolReject" scoped="" ref="0x40b51ac0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="TransmitFramePool" scoped="" ref="0x40b63618"/></from>
      <to><interface-ref name="FragmentPool" scoped="" ref="0x40bb3010"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <from><interface-ref name="FragmentPool" scoped="" ref="0x40bb3010"/></from>
      <to><interface-ref name="FragmentPool" scoped="" ref="0x40bae698"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="HdlcFraming" scoped="" ref="0x40b687c0"/></from>
      <to><interface-ref name="HdlcFraming" scoped="" ref="0x40c53580"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="HdlcFraming" scoped="" ref="0x40c53580"/></from>
      <to><interface-ref name="HdlcFraming" scoped="" ref="0x40fdfcf0"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="HdlcControl" scoped="" ref="0x40b67170"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40c53188"/></to>
    </wire>
    <wire loc="98:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40c53188"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40fdf8f8"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="UartControl" scoped="" ref="0x40be6d50"/></from>
      <to><interface-ref name="UartControl" scoped="" ref="0x40b50528"/></to>
    </wire>
    <wire loc="76:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="HdlcUart" scoped="" ref="0x40be6778"/></from>
      <to><interface-ref name="HdlcUart" scoped="" ref="0x40b51e30"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <from><interface-ref name="MultiLed" scoped="" ref="0x40b675c0"/></from>
      <to><interface-ref name="MultiLed" scoped="" ref="0x40aff368"/></to>
    </wire>
    <wire loc="410:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <from><interface-ref name="processError_task" scoped="" ref="0x40b9f438"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="354:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <from><interface-ref name="processFrame_task" scoped="" ref="0x40b7e060"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="93:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <from><interface-ref name="controlEngine_task" scoped="" ref="0x40b59688"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <from><interface-ref name="transmitEngine_task" scoped="" ref="0x40b76e60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <from><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bca270"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40fd2a58"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <from><interface-ref name="FragmentPool" scoped="" ref="0x40bae698"/></from>
      <to><interface-ref name="FragmentPool" scoped="" ref="0x40bc7978"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <from><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bc61f8"/></from>
      <to><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bca270"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="HdlcUart" scoped="" ref="0x40fe03d8"/></from>
      <to><interface-ref name="HdlcUart" scoped="" ref="0x40be6778"/></to>
    </wire>
    <wire loc="97:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="UartControl" scoped="" ref="0x40fe09b0"/></from>
      <to><interface-ref name="UartControl" scoped="" ref="0x40be6d50"/></to>
    </wire>
    <wire loc="109:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <from><interface-ref name="InputFramePool" scoped="" ref="0x40fe0dc8"/></from>
      <to><interface-ref name="FragmentPool" scoped="" ref="0x40fda0a0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <from><interface-ref name="FragmentPool" scoped="" ref="0x40fda0a0"/></from>
      <to><interface-ref name="FragmentPool" scoped="" ref="0x40bae698"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="514:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <from><interface-ref name="uartStreamSendDone" scoped="" ref="0x40fdd0e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <from><interface-ref name="inputEngine_task" scoped="" ref="0x40fdd520"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <from><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bca270"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="FragmentPoolStorage" scoped="" ref="0x41048878"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="ConfigureRequest" scoped="" ref="0x40c4bdc0"/></from>
      <to><interface-ref name="ConfigureRequest" scoped="" ref="0x40d24678"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="ConfigureRequest" scoped="" ref="0x40d24678"/></from>
      <to><interface-ref name="ConfigureRequest" scoped="" ref="0x41035b50"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40d5b558"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x4108e150"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40c61cf0"/></from>
      <to><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40c4aac8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c62410"/></from>
      <to><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c490e8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppOptions" scoped="" ref="0x40c61138"/></from>
      <to><interface-ref name="PppOptions" scoped="" ref="0x40c49e00"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppProtocolOption" scoped="" ref="0x40d26940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AddressControlFieldCompressionOption" scoped="" ref="0x40c64e48"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppProtocolOption" scoped="" ref="0x40d26940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="MaximumReceiveUnitOption" scoped="" ref="0x40c6cb38"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppProtocolOption" scoped="" ref="0x40d26940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="AsyncControlCharacterMapOption" scoped="" ref="0x40c6a890"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x40c5fcb8"/></from>
      <to><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x40d4bd60"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <from><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x40d4bd60"/></from>
      <to><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x410a23e8"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfigureRequest" scoped="" ref="0x40d24678"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfigureAck" scoped="" ref="0x40d24b70"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="ConfigureAck" scoped="" ref="0x40d24b70"/></from>
      <to><interface-ref name="ConfigureAck" scoped="" ref="0x41034060"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfigureNak" scoped="" ref="0x40d23090"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="ConfigureNak" scoped="" ref="0x40d23090"/></from>
      <to><interface-ref name="ConfigureNak" scoped="" ref="0x41034558"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ConfigureReject" scoped="" ref="0x40d23588"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="ConfigureReject" scoped="" ref="0x40d23588"/></from>
      <to><interface-ref name="ConfigureReject" scoped="" ref="0x41034a50"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TerminateRequest" scoped="" ref="0x40d23a80"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="TerminateRequest" scoped="" ref="0x40d23a80"/></from>
      <to><interface-ref name="TerminateRequest" scoped="" ref="0x41033010"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TerminateAck" scoped="" ref="0x40d21010"/></to>
    </wire>
    <wire loc="87:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="TerminateAck" scoped="" ref="0x40d21010"/></from>
      <to><interface-ref name="TerminateAck" scoped="" ref="0x41033508"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ProtocolReject" scoped="" ref="0x40c70a88"/></to>
    </wire>
    <wire loc="90:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40c5d0e0"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40d5b558"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x40d254d0"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40d5b558"/></to>
    </wire>
    <wire loc="92:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="ConfigureRequest" scoped="" ref="0x40df78e8"/></from>
      <to><interface-ref name="ConfigureRequest" scoped="" ref="0x40d24678"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="TerminateAck" scoped="" ref="0x40df7de0"/></from>
      <to><interface-ref name="TerminateAck" scoped="" ref="0x40d21010"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="PppConfigure" scoped="" ref="0x40df73f0"/></from>
      <to><interface-ref name="PppConfigure" scoped="" ref="0x40d24180"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="PppConfigure" scoped="" ref="0x40d24180"/></from>
      <to><interface-ref name="PppConfigure" scoped="" ref="0x41035658"/></to>
    </wire>
    <wire loc="98:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40c63450"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40d4a260"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></to>
    </wire>
    <wire loc="100:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40d26210"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40df9d28"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x41038398"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40d26210"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="PppProtocolOption" scoped="" ref="0x41038ac8"/></from>
      <to><interface-ref name="PppProtocolOption" scoped="" ref="0x40d26940"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <from><interface-ref name="LcpAutomaton" scoped="" ref="0x41036690"/></from>
      <to><interface-ref name="LcpAutomaton" scoped="" ref="0x40d254d0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x410a2810"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40d4a260"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <from><interface-ref name="CodeHandler" scoped="" ref="0x410a1010"/></from>
      <to><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="LcpOptions" scoped="" ref="0x40df9200"/></from>
      <to><interface-ref name="LcpOptions" scoped="" ref="0x4108edd8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x4108d948"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40df9d28"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="PppConfigure" scoped="" ref="0x4108c010"/></from>
      <to><interface-ref name="PppConfigure" scoped="" ref="0x40df73f0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="ConfigureRequest" scoped="" ref="0x410c5010"/></from>
      <to><interface-ref name="ConfigureRequest" scoped="" ref="0x40df78e8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="TerminateAck" scoped="" ref="0x410c5508"/></from>
      <to><interface-ref name="TerminateAck" scoped="" ref="0x40df7de0"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <from><interface-ref name="RestartTimer" scoped="" ref="0x4108c628"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x410c3db0"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x410c3db0"/></from>
      <to><interface-ref name="ClientAlarm" scoped="" ref="0x40dc83f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="209:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <from><interface-ref name="resumeAutomaton_task" scoped="" ref="0x410c5e58"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="230:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <from><interface-ref name="restartTimerFired_task" scoped="" ref="0x410c5a20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
      <from><interface-ref name="ClientAlarm" scoped="" ref="0x40dc83f8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40df3700"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x40e00248"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40dfd010"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40dfd010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x411220a0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x4111fde0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x410e8708"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x410e8708"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x411196f8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x41121b90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40635768"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCounter" scoped="" ref="0x41117100"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405a2c00"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <from><interface-ref name="AtmegaCompare" scoped="" ref="0x411140c0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x405ac010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40e18990"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40a32608"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40e18df0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40a32a88"/></to>
    </wire>
    <wire loc="118:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <from><interface-ref name="streamFeeder_task" scoped="" ref="0x40e10530"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <from><interface-ref name="Ppp" scoped="" ref="0x40e2f1b0"/></from>
      <to><interface-ref name="Ppp" scoped="" ref="0x40e34d80"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x40e317b8"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x40e30da0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <from><interface-ref name="sendBuffer_task" scoped="" ref="0x40e2ee10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.x/tos/lib/printf/PutcharC.nc">
      <from><interface-ref name="Putchar" scoped="" ref="0x40e4cda8"/></from>
      <to><interface-ref name="Putchar" scoped="" ref="0x40e317b8"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="TestP" loc="34:TestP.nc">
      <module/>
    </component>
    <component qname="MainC" loc="56:/opt/tinyos-2.x/tos/system/MainC.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <configuration/>
    </component>
    <component qname="PlatformP" loc="37:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc" safe="">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="McuInitC" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc" safe="">
      <configuration/>
    </component>
    <component qname="McuInitP" loc="36:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc" safe="">
      <module/>
    </component>
    <component qname="MeasureClockC" loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <documentation loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RFA1RadioOffP" loc="34:/opt/tinyos-2.x/tos/chips/atm128rfa1/radio/RFA1RadioOffP.nc">
      <module/>
    </component>
    <component qname="Stm25pOffC" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <configuration/>
    </component>
    <component qname="Stm25pOffP" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <module/>
    </component>
    <component qname="HplStm25pPinsC" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for a ST M25P chip&#10; connected to a TI MSP430.</short>
        <long>&#10; HPL implementation of general-purpose I/O for a ST M25P chip&#10; connected to a TI MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2010-11-18 23:16:35 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AtmegaGeneralIOC" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <configuration/>
    </component>
    <component qname="AtmegaGeneralIOC.PortA" loc="36(AtmegaGeneralIOC.PortA):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="0">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortB" loc="36(AtmegaGeneralIOC.PortB):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="1">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortC" loc="36(AtmegaGeneralIOC.PortC):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="2">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortD" loc="36(AtmegaGeneralIOC.PortD):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="3">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortE" loc="36(AtmegaGeneralIOC.PortE):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="4">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortF" loc="36(AtmegaGeneralIOC.PortF):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="5">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AtmegaGeneralIOC.PortG" loc="36(AtmegaGeneralIOC.PortG):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <instance number="6">
        <component-ref qname="AtmegaGeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplStm25pPinsC.NoPinC" loc="16(HplStm25pPinsC.NoPinC):/opt/tinyos-2.x/tos/system/NoPinC.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/NoPinC.nc">
        <short>&#10; Dummy pin component.</short>
        <long>&#10; Dummy pin component.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="NoPinC"/>
      </instance>
      <module/>
    </component>
    <component qname="BatteryWarningC" loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <configuration/>
    </component>
    <component qname="BatterySwitchC" loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchC.nc">
      <configuration/>
    </component>
    <component qname="BatterySwitchP" loc="2:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchP.nc">
      <module/>
    </component>
    <component qname="BatterySwitchC.TimerMilliC" loc="44(BatterySwitchC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C" loc="37(TimerMilliP.AlarmMilli32C):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C" loc="37(TimerMilliP.AlarmMilli32C.Alarm62khz32C):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <instance number="0">
        <component-ref qname="Alarm62khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP" loc="35(TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <instance number="0">
        <component-ref qname="AtmegaCompareP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtmRfa1TimerMacC" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <configuration/>
    </component>
    <component qname="HplAtmRfa1TimerMacP" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc" safe="">
      <documentation loc="34:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc">
        <short>&#10; </short>
        <long>&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter62khz32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <configuration/>
    </component>
    <component qname="Counter62khz32C.AtmegaCounterP" loc="35(Counter62khz32C.AtmegaCounterP):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <instance number="0">
        <component-ref qname="AtmegaCounterP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:48">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMilli32C.TransformCounterC" loc="54(CounterMilli32C.TransformCounterC):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.AlarmMilli32C.TransformAlarmC" loc="51(TimerMilliP.AlarmMilli32C.TransformAlarmC):/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.AlarmToTimerC" loc="46(TimerMilliP.AlarmToTimerC):/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TimerMilliP.VirtualizeTimerC" loc="46(TimerMilliP.VirtualizeTimerC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BatteryWarningC.VoltageC" loc="1(BatteryWarningC.VoltageC):/opt/tinyos-2.x/tos/platforms/ucmini/VoltageC.nc">
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="VoltageArbiterP" loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <configuration/>
    </component>
    <component qname="SingleVoltageC" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SingleVoltageC.AdcReadClientC" loc="21(SingleVoltageC.AdcReadClientC):/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="17:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <documentation loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="84:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @author Andras Biro &#60;bbandi86@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="47:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="38:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega1281 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega1281 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.x/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc" safe="">
      <documentation loc="39:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/BusyWaitMicroC.nc">
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="51(BusyWaitMicroC.BusyWaitCounterC):/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BusyWaitMicroC.CounterMicro16C" loc="54(BusyWaitMicroC.CounterMicro16C):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMcu16C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <configuration/>
    </component>
    <component qname="CounterMcu16C.AtmegaCounterP" loc="35(CounterMcu16C.AtmegaCounterP):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <instance number="1">
        <component-ref qname="AtmegaCounterP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtmRfa1Timer1C" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <configuration/>
    </component>
    <component qname="HplAtmRfa1Timer1P" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc" safe="">
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="VoltageP" loc="38:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SingleVoltageC.TimerMilliC" loc="44(SingleVoltageC.TimerMilliC):/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="VoltageArbiterP.FcfsArbiterC" loc="89(VoltageArbiterP.FcfsArbiterC):/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <documentation loc="69:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:UcminiVoltage.read">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="VoltageArbiterP.FcfsArbiterC.Queue" loc="42(VoltageArbiterP.FcfsArbiterC.Queue):/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="VoltageArbiterP.FcfsArbiterC.Arbiter" loc="52(VoltageArbiterP.FcfsArbiterC.Arbiter):/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="VoltageArbiterP.MultiplexedReadC" loc="18(VoltageArbiterP.MultiplexedReadC):/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
        <short>&#10; Multiplex access to a single Read interface for a parameterised&#10; Read interface whose access is controlled by an arbiter.</short>
        <long>&#10; Multiplex access to a single Read interface for a parameterised&#10; Read interface whose access is controlled by an arbiter.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="MultiplexedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BatteryWarningP" loc="8:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Jan Beutel&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedsC" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc" safe="">
      <documentation loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplSerialAutoControlC" loc="34:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
        <short> Copyright (c) 2011, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2011, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Andras Biro&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AtmegaPinChange0C" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <configuration/>
    </component>
    <component qname="HplAtmegaPinChange0C" loc="38:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange0C.nc">
      <module/>
    </component>
    <component qname="AtmegaPinChange0C.AtmegaPinChangeP" loc="50(AtmegaPinChange0C.AtmegaPinChangeP):/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <instance number="0">
        <component-ref qname="AtmegaPinChangeP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialAutoControlP" loc="33:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
        <short> Copyright (c) 2011, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2011, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Andras Biro&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2010-10-26 09:27:59 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart1C" loc="38:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2010-06-16 21:45:58 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart1C.UartP" loc="46(Atm128Uart1C.UartP):/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <documentation loc="38:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="112:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <documentation loc="102:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega1281 serial port HPL.</short>
        <long> &#10; Private component of the Atmega1281 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMicro32C.TransformCounterC" loc="54(CounterMicro32C.TransformCounterC):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMcu32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <configuration/>
    </component>
    <component qname="CounterMcu32C.TransformCounterC" loc="54(CounterMcu32C.TransformCounterC):/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialResetP" loc="34:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
        <short> Copyright (c) 2010, University of Szeged&#10; All rights reserved.</short>
        <long> Copyright (c) 2010, University of Szeged&#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10; notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above&#10; copyright notice, this list of conditions and the following&#10; disclaimer in the documentation and/or other materials provided&#10; with the distribution.&#10; - Neither the name of University of Szeged nor the names of its&#10; contributors may be used to endorse or promote products derived&#10; from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE&#10; COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,&#10; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; Author: Miklos Maroti&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/opt/tinyos-2.x/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/opt/tinyos-2.x/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedC" loc="41:/opt/tinyos-2.x/tos/system/LedC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/system/LedC.nc">
        <short>&#10; Provide access to the Led components available on this platform.</short>
        <long>&#10; Provide access to the Led components available on this platform.&#10; LEDs are made available positionally (e.g., Led0) and by color&#10; (e.g., Green).&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedC" loc="37:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
        <short> Defines the Led and MultiLed interfaces in terms of the underlying&#10; LedsC component.</short>
        <long> Defines the Led and MultiLed interfaces in terms of the underlying&#10; LedsC component.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformLedP" loc="37:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedP.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedP.nc">
        <short> Defines the Led and MultiLed interfaces in terms of the underlying&#10; LedsC component.</short>
        <long> Defines the Led and MultiLed interfaces in terms of the underlying&#10; LedsC component.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PppDaemonC" loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
        <short> A complete PPP daemon: the basic PPP infrastructure with an&#10; instance of Link Control Protocol already linked in.</short>
        <long> A complete PPP daemon: the basic PPP infrastructure with an&#10; instance of Link Control Protocol already linked in.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PppDaemonP" loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <module/>
    </component>
    <component qname="PppC" loc="39:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
        <short> Top-level configuration for a PPP instance, not including LCP support.</short>
        <long> Top-level configuration for a PPP instance, not including LCP support.&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PppP" loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <module/>
    </component>
    <component qname="PppC.TransmitFramePoolC" loc="50(PppC.TransmitFramePoolC):/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
        <short> Allocate a block of memory that can be partioned into individual&#10; fragments.</short>
        <long> Allocate a block of memory that can be partioned into individual&#10; fragments.&#10;&#10; There is no limit on the duration that a fragment may be held, nor&#10; any assumption on the order in which fragments are released.&#10; Requests will fail only if the entire pool is in use.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer.&#10; This must be a multiple of two, to preserve 16-bit alignment.  It's&#10; not checked in the code, so don't be a goober and ignore this&#10; requirement.&#10;&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FragmentPoolC"/>
        <arguments>
          <value cst="I:1282">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PppC.TransmitFramePoolC.FragmentPoolStorageP" loc="41(PppC.TransmitFramePoolC.FragmentPoolStorageP):/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
        <short> The module that reserves storage for the pool.</short>
        <long> The module that reserves storage for the pool.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FragmentPoolStorageP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="FragmentPoolImplC" loc="39:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
        <short> Configuration that links together all the pools with the pool&#10; management implementation.</short>
        <long> Configuration that links together all the pools with the pool&#10; management implementation.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="FragmentPoolImplC.FragmentPoolImplP" loc="39(FragmentPoolImplC.FragmentPoolImplP):/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
        <short> Module to implement management of all fragment pools.</short>
        <long> Module to implement management of all fragment pools.&#10;&#10; @param NUM_POOLS The total number of pools allocated throughout the&#10; system.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FragmentPoolImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PppC.HdlcFramingC" loc="78(PppC.HdlcFramingC):/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
        <short> Implementation of HDLC-like framing as defined in RFC1662 for PPP.</short>
        <long> Implementation of HDLC-like framing as defined in RFC1662 for PPP.&#10;&#10; This implementation is optimized to receive data as efficiently as&#10; possible.  It does this by maintaining a FragmentPool that allows&#10; multiple fragments to be collected in interrupt context while a&#10; previous frame is being processed in task context.  Extra bytes&#10; inserted for transparency during transmission are stripped while&#10; the data is being received, to &#10;&#10; @note When used in PPP, it is highly likely that the first frame&#10; received after a Configure-Ack that completes the LCP negotiation&#10; will fail with a BadCRC.  That Configure-Ack will install a new&#10; ACCM indicating that low-value octets are valid data, rather than&#10; being corrupted control characters.  The sender of the following&#10; frame will assume this ACCM is installed, and will neglect to add&#10; transparency escapes for those characters.  Because this component&#10; will have already begun processing the incoming data for the frame,&#10; but the task that interprets the Configure-Ack and installs the&#10; ACCM may not have completed, it is highly likely that some valid&#10; data characters will be dropped, resulting in a checksum failure&#10; and loss of the frame.  The peer will subsequently retransmit the&#10; frame, which will be correctly interpreted because by that point&#10; the ACCM will have been updated.  In other words, don't get your&#10; knickers all in a twist because the LEDs indicate a BadCRC HDLC&#10; error on startup.&#10;&#10; The implementation uses a local task to process transmission of&#10; messages.  Notification of frame transmission occurs in this&#10; context.&#10;&#10; @note You must release all frames signaled by receivedFrame() when&#10; you stop this component, including any frames signalled after you&#10; began the stop process.&#10;&#10; @param RX_BUFFER_SIZE Size, in octets, to use for the fragment pool&#10; used to hold incoming messages&#10;&#10; @param RX_FRAME_LIMIT Maximum number of fragments (individual&#10; messages) supported by the fragment pool&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HdlcFramingC"/>
        <arguments>
          <value cst="I:1284">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PppC.HdlcFramingC.HdlcFramingP" loc="38(PppC.HdlcFramingC.HdlcFramingP):/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
        <short> Implement HDLC framing.</short>
        <long> Implement HDLC framing.&#10;&#10; @param RX_FRAME_LIMIT The maximum number of frames that can be held&#10; waiting for the receiver to process them. *</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HdlcFramingP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PppC.HdlcFramingC.InputFramePoolC" loc="50(PppC.HdlcFramingC.InputFramePoolC):/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
        <short> Allocate a block of memory that can be partioned into individual&#10; fragments.</short>
        <long> Allocate a block of memory that can be partioned into individual&#10; fragments.&#10;&#10; There is no limit on the duration that a fragment may be held, nor&#10; any assumption on the order in which fragments are released.&#10; Requests will fail only if the entire pool is in use.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer.&#10; This must be a multiple of two, to preserve 16-bit alignment.  It's&#10; not checked in the code, so don't be a goober and ignore this&#10; requirement.&#10;&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FragmentPoolC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PppC.HdlcFramingC.InputFramePoolC.FragmentPoolStorageP" loc="41(PppC.HdlcFramingC.InputFramePoolC.FragmentPoolStorageP):/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
        <short> The module that reserves storage for the pool.</short>
        <long> The module that reserves storage for the pool.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FragmentPoolStorageP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LinkControlProtocolC" loc="40:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
        <short> The component that supports the Link Control Protocol of RFC1661.</short>
        <long> The component that supports the Link Control Protocol of RFC1661.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LinkControlProtocolP" loc="36:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <documentation loc="54:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
        <short> Publish the protocol number to which this component should be&#10; wired in the PppC component *</short>
      </documentation>
      <module/>
    </component>
    <component qname="LinkControlProtocolC.PppConfigureEngineC" loc="45(LinkControlProtocolC.PppConfigureEngineC):/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
        <short> Implement the four messages used by the Link Control Protocol to&#10; negotiate mutually acceptable options for a PPP session.</short>
        <long> Implement the four messages used by the Link Control Protocol to&#10; negotiate mutually acceptable options for a PPP session.&#10;&#10; @param Protocol_ the 16-bit protocol value&#10;&#10; @param InhibitCompression If true, this protocol requires that&#10; optional frame compression be inhibited for its packets.&#10;&#10; @param NumOptions An upper bound on the number of options that will&#10; be linked into this engine.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PppConfigureEngineC"/>
        <arguments>
          <value cst="I:49185">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP" loc="33(LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP):/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <documentation loc="73:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
        <short> RFC 1661 section 5.5.</short>
        <long> RFC 1661 section 5.5.  Data field contains a sequence of options. *</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PppConfigureEngineP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LinkControlProtocolC.CoordinatorC" loc="38(LinkControlProtocolC.CoordinatorC):/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
        <short> Provides common support for a protocol that uses LCP-style code-based handlers.</short>
        <long> Provides common support for a protocol that uses LCP-style code-based handlers.&#10;&#10; @param Protocol the Protocol code for which this component coordinates&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PppProtocolCodeCoordinatorC"/>
        <arguments>
          <value cst="I:49185">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkControlProtocolC.CoordinatorC.PppProtocolCodeCoordinatorP" loc="40(LinkControlProtocolC.CoordinatorC.PppProtocolCodeCoordinatorP):/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
        <short> Provides common support for a protocol that uses LCP-style code-based handlers.</short>
        <long> Provides common support for a protocol that uses LCP-style code-based handlers.&#10;&#10; @param Protocol the Protocol code for which this component coordinates&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PppProtocolCodeCoordinatorP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LinkControlProtocolC.LcpAutomatonC" loc="48(LinkControlProtocolC.LcpAutomatonC):/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
        <short> Configuration to manage the state associated with a PPP Link&#10; Control Protocol automaton as defined in RFC1661.</short>
        <long> Configuration to manage the state associated with a PPP Link&#10; Control Protocol automaton as defined in RFC1661.&#10;&#10; Note that there is generally instance of this automaton for each&#10; control protocol: the LCP instance associated with the PppDaemonC&#10; configuration has one, but so will every other network protocol&#10; that leverages LCP's option negotiation sequence for configuration.&#10; Which is most of the interesting ones.&#10;&#10; @param Protocol The protocol type encoded in PPP packets&#10;&#10; @param InhibitCompression If TRUE, any options like PCOMP and&#10; ACCOMP that might result in non-default encodings are to be&#10; inhibited for this protocol.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LcpAutomatonC"/>
        <arguments>
          <value cst="I:49185">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP" loc="34(LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP):/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <instance number="0">
        <component-ref qname="LcpAutomatonP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="LinkControlProtocolC.LcpAutomatonC.MuxAlarmMilli32C" loc="38(LinkControlProtocolC.LcpAutomatonC.MuxAlarmMilli32C):/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc">
        <short> Provide a client-specific instance of a multiplexed alarm with&#10; precision TMilli and size uint32_t.</short>
        <long> Provide a client-specific instance of a multiplexed alarm with&#10; precision TMilli and size uint32_t.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <instance number="0">
        <component-ref qname="MuxAlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MuxAlarmMilli32C_" loc="46:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
        <short> The base component used for multiplexing client alarms onto a&#10; single hardware alarm with precision TMilli and size uint32_t.</short>
        <long> The base component used for multiplexing client alarms onto a&#10; single hardware alarm with precision TMilli and size uint32_t.&#10;&#10; For debugging purposes, the DEBUG_MULTIPLEX_ALARM preprocessor&#10; simple will export an interface that allows inspection of the&#10; internal details of the multiplex structures.  When it is used, the&#10; underlying Alarm interface that is multiplexed is also published to&#10; allow more controlled testing using a controlled alarm&#10; implementation.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MuxAlarmMilli32C_.VirtualizeAlarmC" loc="46(MuxAlarmMilli32C_.VirtualizeAlarmC):/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
        <short>&#10; VirtualizeAlarmC uses a single Alarm to create up to 255 virtual alarms.</short>
        <long>&#10; VirtualizeAlarmC uses a single Alarm to create up to 255 virtual alarms.&#10; Note that a virtualized Alarm will have significantly more overhead than&#10; an Alarm built on a hardware compare register.&#10;&#10; @param precision_tag A type indicating the precision of the Alarm being &#10;   virtualized.&#10; @param num_alarms Number of virtual alarms to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MuxAlarmMilli32C_.AlarmMilli32C" loc="37(MuxAlarmMilli32C_.AlarmMilli32C):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <instance number="1">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C" loc="37(MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <instance number="1">
        <component-ref qname="Alarm62khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP" loc="35(MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP):/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <instance number="1">
        <component-ref qname="AtmegaCompareP"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MuxAlarmMilli32C_.AlarmMilli32C.TransformAlarmC" loc="51(MuxAlarmMilli32C_.AlarmMilli32C.TransformAlarmC):/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DefaultHdlcUartC" loc="37:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
        <short> Component that uses PlatformSerialC to provide an HdlcUart&#10; interface.</short>
        <long> Component that uses PlatformSerialC to provide an HdlcUart&#10; interface.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DefaultHdlcUartP" loc="32:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <module/>
    </component>
    <component qname="PppPrintfC" loc="65:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
        <short> Support printf(3) within applications that use PPP.</short>
        <long> Support printf(3) within applications that use PPP.&#10;&#10; printf is too useful as a debugging capability to be lost simply&#10; because the serial interface is shuttling packets back and forth.&#10; Wiring this protocol allows console output to be passed to the peer&#10; in a special protocol message, where it can be displayed.&#10;&#10; Applications that do this should use the following wiring:&#10;components PppPrintfC;&#10;PppC.PppProtocol[PppPrintfC.Protocol] -> PppPrintfC;&#10;PppPrintfC.Ppp -> PppC;&#10; where PppC is alternatively PppDaemonC.  Simply using this&#10; component without wiring in its protocol will work, in that the&#10; messages will be sent to the peer, but standard PPP implementations&#10; that do not recognize the TinyOS-specific PPP protocol will send a&#10; Protocol-Reject message, which the TinyOS PPP implementation will be&#10; unable to process.  Wiring in the protocol allows TinyOS PPP to&#10; disable it when the peer is unable to process the messages,&#10; avoiding log clutter.&#10;&#10; A variant PPP implementation that recognizes TinyOS packets can be&#10; obtained by reading the instructions in the patch file in&#10; ${TOSDIR}/lib/ppp/tos-pppd.patch.&#10;&#10; @note For cross-platform compatibility, this module uses the PutcharP&#10; component from ${TOSDIR}/lib/printf.  That directory must be in&#10; your component search path.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PppPrintfP" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
        <short> Implement putchar() in a way that transfers the data in packets&#10; over PPP.</short>
        <long> Implement putchar() in a way that transfers the data in packets&#10; over PPP. *</long>
      </documentation>
      <module/>
    </component>
    <component qname="PutcharC" loc="42:/opt/tinyos-2.x/tos/lib/printf/PutcharC.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/printf/PutcharC.nc">
        <short>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.</short>
        <long>&#10; This component provides a TinyOS-compatible bridge to the&#10; system-specific mechanism of providing single-character output to&#10; the environment's printf(3c) infrastructure.  Components that&#10; provide a libc-based printf facility in TinyOS should implement the&#10; Putchar interface and connect it to this module.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PutcharP" loc="93:/opt/tinyos-2.x/tos/lib/printf/PutcharP.nc">
      <module/>
    </component>
    <component qname="AtmegaGeneralIOP" loc="36:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc" abstract="" safe="">
      <parameters>
        <constant name="port_addr" ref="0x40508458" loc="36:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40508680" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x405088a8" loc="38:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
          <component-ref qname="AtmegaGeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="NoPinC" loc="16:/opt/tinyos-2.x/tos/system/NoPinC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/NoPinC.nc">
        <short>&#10; Dummy pin component.</short>
        <long>&#10; Dummy pin component.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/opt/tinyos-2.x/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm62khz32C" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AtmegaCompareP" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x4057cac0" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4057cac0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4057cef0" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4057cef0"/></type-var>
        </typedef>
        <constant name="mode" ref="0x40587120" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="mindt" ref="0x40587328" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
          <component-ref qname="AtmegaCompareP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AtmegaCounterP" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc" abstract="">
      <parameters>
        <typedef name="precision_tag" ref="0x40624758" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40624758"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40624b88" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40624b88"/></type-var>
        </typedef>
        <constant name="mode" ref="0x40624d78" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
          <component-ref qname="AtmegaCounterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x406306d0" loc="55:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x406306d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x40630b30" loc="56:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x40630b30"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40630d98" loc="57:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40630d98"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x4063f230" loc="58:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x4063f230"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x4063f498" loc="59:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x4063f920" loc="60:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x4063f920"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x40651470" loc="52:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x40651470"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x406518d0" loc="53:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x406518d0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40651b38" loc="54:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40651b38"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x40650010" loc="55:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x40650010"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x40650278" loc="56:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40666358" loc="46:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40666358"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40684ee8" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40684ee8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x406800f0" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="VoltageC" loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageC.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="21:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40706e38" loc="89:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/opt/tinyos-2.x/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x4073c5a0" loc="42:/opt/tinyos-2.x/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.x/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x40759ca8" loc="52:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="51:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x407b02f8" loc="51:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x407b02f8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x407b0728" loc="51:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x407b0728"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x40788c80" loc="23:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x40788c80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="89:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="69:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x4084d4e8" loc="89:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <documentation loc="33:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.7 $&#10; @date $Date: 2010-06-29 22:07:56 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x408646f0" loc="42:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="MultiplexedReadC" loc="18:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
        <short>&#10; Multiplex access to a single Read interface for a parameterised&#10; Read interface whose access is controlled by an arbiter.</short>
        <long>&#10; Multiplex access to a single Read interface for a parameterised&#10; Read interface whose access is controlled by an arbiter.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x408683d8" loc="18:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
          <component-ref qname="MultiplexedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x408683d8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AtmegaPinChangeP" loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:/opt/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FragmentPoolC" loc="50:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
        <short> Allocate a block of memory that can be partioned into individual&#10; fragments.</short>
        <long> Allocate a block of memory that can be partioned into individual&#10; fragments.&#10;&#10; There is no limit on the duration that a fragment may be held, nor&#10; any assumption on the order in which fragments are released.&#10; Requests will fail only if the entire pool is in use.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer.&#10; This must be a multiple of two, to preserve 16-bit alignment.  It's&#10; not checked in the code, so don't be a goober and ignore this&#10; requirement.&#10;&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="POOL_SIZE_B" ref="0x40bb2e98" loc="50:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
          <component-ref qname="FragmentPoolC"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
        <constant name="FRAGMENT_COUNT" ref="0x40bb1118" loc="51:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
          <component-ref qname="FragmentPoolC"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FragmentPoolStorageP" loc="41:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
        <short> The module that reserves storage for the pool.</short>
        <long> The module that reserves storage for the pool.&#10;&#10; @param POOL_SIZE_B the number of bytes in the fragmentable buffer&#10; @param FRAGMENT_COUNT the maximum number of fragments&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="POOL_ID" ref="0x40bb0c48" loc="41:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
          <component-ref qname="FragmentPoolStorageP"/>
          <type-int cname="int" size="I:2" alignment="I:1">
            <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
          </type-int>
        </constant>
        <constant name="POOL_SIZE_B" ref="0x40bb0e60" loc="42:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
          <component-ref qname="FragmentPoolStorageP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
        <constant name="FRAGMENT_COUNT" ref="0x40bad118" loc="43:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
          <component-ref qname="FragmentPoolStorageP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="FragmentPoolImplP" loc="39:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc" abstract="">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
        <short> Module to implement management of all fragment pools.</short>
        <long> Module to implement management of all fragment pools.&#10;&#10; @param NUM_POOLS The total number of pools allocated throughout the&#10; system.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="NUM_POOLS" ref="0x40bc8788" loc="39:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
          <component-ref qname="FragmentPoolImplP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HdlcFramingC" loc="78:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc" abstract="">
      <documentation loc="35:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
        <short> Implementation of HDLC-like framing as defined in RFC1662 for PPP.</short>
        <long> Implementation of HDLC-like framing as defined in RFC1662 for PPP.&#10;&#10; This implementation is optimized to receive data as efficiently as&#10; possible.  It does this by maintaining a FragmentPool that allows&#10; multiple fragments to be collected in interrupt context while a&#10; previous frame is being processed in task context.  Extra bytes&#10; inserted for transparency during transmission are stripped while&#10; the data is being received, to &#10;&#10; @note When used in PPP, it is highly likely that the first frame&#10; received after a Configure-Ack that completes the LCP negotiation&#10; will fail with a BadCRC.  That Configure-Ack will install a new&#10; ACCM indicating that low-value octets are valid data, rather than&#10; being corrupted control characters.  The sender of the following&#10; frame will assume this ACCM is installed, and will neglect to add&#10; transparency escapes for those characters.  Because this component&#10; will have already begun processing the incoming data for the frame,&#10; but the task that interprets the Configure-Ack and installs the&#10; ACCM may not have completed, it is highly likely that some valid&#10; data characters will be dropped, resulting in a checksum failure&#10; and loss of the frame.  The peer will subsequently retransmit the&#10; frame, which will be correctly interpreted because by that point&#10; the ACCM will have been updated.  In other words, don't get your&#10; knickers all in a twist because the LEDs indicate a BadCRC HDLC&#10; error on startup.&#10;&#10; The implementation uses a local task to process transmission of&#10; messages.  Notification of frame transmission occurs in this&#10; context.&#10;&#10; @note You must release all frames signaled by receivedFrame() when&#10; you stop this component, including any frames signalled after you&#10; began the stop process.&#10;&#10; @param RX_BUFFER_SIZE Size, in octets, to use for the fragment pool&#10; used to hold incoming messages&#10;&#10; @param RX_FRAME_LIMIT Maximum number of fragments (individual&#10; messages) supported by the fragment pool&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="RX_BUFFER_SIZE" ref="0x40bcbdf0" loc="78:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
          <component-ref qname="HdlcFramingC"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </constant>
        <constant name="RX_FRAME_LIMIT" ref="0x40be5068" loc="79:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
          <component-ref qname="HdlcFramingC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HdlcFramingP" loc="38:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
        <short> Implement HDLC framing.</short>
        <long> Implement HDLC framing.&#10;&#10; @param RX_FRAME_LIMIT The maximum number of frames that can be held&#10; waiting for the receiver to process them. *</long>
      </documentation>
      <parameters>
        <constant name="RX_FRAME_LIMIT" ref="0x40c07010" loc="38:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
          <component-ref qname="HdlcFramingP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PppConfigureEngineC" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
        <short> Implement the four messages used by the Link Control Protocol to&#10; negotiate mutually acceptable options for a PPP session.</short>
        <long> Implement the four messages used by the Link Control Protocol to&#10; negotiate mutually acceptable options for a PPP session.&#10;&#10; @param Protocol_ the 16-bit protocol value&#10;&#10; @param InhibitCompression If true, this protocol requires that&#10; optional frame compression be inhibited for its packets.&#10;&#10; @param NumOptions An upper bound on the number of options that will&#10; be linked into this engine.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <parameters>
        <constant name="Protocol" ref="0x40cc38f8" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
          <component-ref qname="PppConfigureEngineC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
        <constant name="InhibitCompression" ref="0x40cc3b68" loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
          <component-ref qname="PppConfigureEngineC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
        </constant>
        <constant name="NumOptions" ref="0x40cc3da0" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
          <component-ref qname="PppConfigureEngineC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PppConfigureEngineP" loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc" abstract="">
      <documentation loc="73:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
        <short> RFC 1661 section 5.5.</short>
        <long> RFC 1661 section 5.5.  Data field contains a sequence of options. *</long>
      </documentation>
      <parameters>
        <constant name="Protocol" ref="0x40cb4100" loc="33:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
          <component-ref qname="PppConfigureEngineP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
        <constant name="InhibitCompression" ref="0x40cb4370" loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
          <component-ref qname="PppConfigureEngineP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
        </constant>
        <constant name="NumOptions" ref="0x40cb45a8" loc="35:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
          <component-ref qname="PppConfigureEngineP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="PppProtocolCodeCoordinatorC" loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc" abstract="">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
        <short> Provides common support for a protocol that uses LCP-style code-based handlers.</short>
        <long> Provides common support for a protocol that uses LCP-style code-based handlers.&#10;&#10; @param Protocol the Protocol code for which this component coordinates&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="Protocol" ref="0x40d4cc78" loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
          <component-ref qname="PppProtocolCodeCoordinatorC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PppProtocolCodeCoordinatorP" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
        <short> Provides common support for a protocol that uses LCP-style code-based handlers.</short>
        <long> Provides common support for a protocol that uses LCP-style code-based handlers.&#10;&#10; @param Protocol the Protocol code for which this component coordinates&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="Protocol" ref="0x40d48da8" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
          <component-ref qname="PppProtocolCodeCoordinatorP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LcpAutomatonC" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc" abstract="">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
        <short> Configuration to manage the state associated with a PPP Link&#10; Control Protocol automaton as defined in RFC1661.</short>
        <long> Configuration to manage the state associated with a PPP Link&#10; Control Protocol automaton as defined in RFC1661.&#10;&#10; Note that there is generally instance of this automaton for each&#10; control protocol: the LCP instance associated with the PppDaemonC&#10; configuration has one, but so will every other network protocol&#10; that leverages LCP's option negotiation sequence for configuration.&#10; Which is most of the interesting ones.&#10;&#10; @param Protocol The protocol type encoded in PPP packets&#10;&#10; @param InhibitCompression If TRUE, any options like PCOMP and&#10; ACCOMP that might result in non-default encodings are to be&#10; inhibited for this protocol.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <parameters>
        <constant name="Protocol" ref="0x40d5d960" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
          <component-ref qname="LcpAutomatonC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
        <constant name="InhibitCompression" ref="0x40d5dbd0" loc="49:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
          <component-ref qname="LcpAutomatonC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="LcpAutomatonP" loc="34:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc" abstract="">
      <parameters>
        <constant name="Protocol" ref="0x40d569c0" loc="34:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
          <component-ref qname="LcpAutomatonP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </constant>
        <constant name="InhibitCompression" ref="0x40d56c30" loc="35:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
          <component-ref qname="LcpAutomatonP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="MuxAlarmMilli32C" loc="38:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc">
        <short> Provide a client-specific instance of a multiplexed alarm with&#10; precision TMilli and size uint32_t.</short>
        <long> Provide a client-specific instance of a multiplexed alarm with&#10; precision TMilli and size uint32_t.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeAlarmC" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
        <short>&#10; VirtualizeAlarmC uses a single Alarm to create up to 255 virtual alarms.</short>
        <long>&#10; VirtualizeAlarmC uses a single Alarm to create up to 255 virtual alarms.&#10; Note that a virtualized Alarm will have significantly more overhead than&#10; an Alarm built on a hardware compare register.&#10;&#10; @param precision_tag A type indicating the precision of the Alarm being &#10;   virtualized.&#10; @param num_alarms Number of virtual alarms to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40dc5a80" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
          <component-ref qname="VirtualizeAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40dc5a80"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40dc5eb0" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
          <component-ref qname="VirtualizeAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40dc5eb0"/></type-var>
        </typedef>
        <constant name="num_alarms" ref="0x40df20f0" loc="46:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
          <component-ref qname="VirtualizeAlarmC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x40486d50" loc="36:TestP.nc">
      <component-ref qname="TestP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40486d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40486f28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MultiLed" ref="0x40481850" loc="37:TestP.nc">
      <component-ref qname="TestP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MultiLed" scoped="" ref="0x40481850"/></type-interface>
      <instance>
        <interfacedef-ref qname="MultiLed"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40481a28"/>
        <function-ref name="toggle" scoped="" ref="0x40481b08"/>
        <function-ref name="get" scoped="" ref="0x40481be8"/>
        <function-ref name="on" scoped="" ref="0x40481cc8"/>
        <function-ref name="set" scoped="" ref="0x40481da8"/>
        <function-ref name="off" scoped="" ref="0x40481e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40489198" loc="38:TestP.nc">
      <component-ref qname="TestP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40489198"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40489370"/>
        <function-ref name="stopDone" scoped="" ref="0x40489450"/>
        <function-ref name="start" scoped="" ref="0x40489530"/>
        <function-ref name="stop" scoped="" ref="0x40489610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LcpAutomaton" ref="0x40491bf8" loc="39:TestP.nc">
      <component-ref qname="TestP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40491bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40491dd0"/>
        <function-ref name="down" scoped="" ref="0x40491eb0"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40483010"/>
        <function-ref name="open" scoped="" ref="0x404830f0"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x404831d0"/>
        <function-ref name="signalEvent" scoped="" ref="0x404832b0"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40483390"/>
        <function-ref name="close" scoped="" ref="0x40483470"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40483550"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40483630"/>
        <function-ref name="up" scoped="" ref="0x40483710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4049d480" loc="58:/opt/tinyos-2.x/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4049d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4049d658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40494820" loc="57:/opt/tinyos-2.x/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40494820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404949f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4049dc58" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4049dc58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4049de30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404a4508" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404a4508"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x404a46e0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404a47c0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x404a48a0"/>
        <function-ref name="actualMicro" scoped="" ref="0x404a4980"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x404a4a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x404a4c88" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LedsInit" scoped="" ref="0x404a4c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a4e60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BatteryWarning" ref="0x404a2e60" loc="47:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BatteryWarning" scoped="" ref="0x404a2e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a0050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4049bea8" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4049bea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a20c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Stm25pInit" ref="0x404a2a68" loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pInit" scoped="" ref="0x404a2a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a2c40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x404a2698" loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LedsInit" scoped="" ref="0x404a2698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a2870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuInit" ref="0x404a22d8" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuInit" scoped="" ref="0x404a22d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a24b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404a9328" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404a9328"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a9500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcInit" ref="0x404a9ae0" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AdcInit" scoped="" ref="0x404a9ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a9cb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerInit" ref="0x404a9730" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitC.nc">
      <component-ref qname="McuInitC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerInit" scoped="" ref="0x404a9730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a9908"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioInit" ref="0x404b9da0" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioInit" scoped="" ref="0x404b9da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404bbe00" loc="38:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404bbe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b9010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcInit" ref="0x404b99d8" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AdcInit" scoped="" ref="0x404b99d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b9bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x404b9260" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x404b9260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b9438"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerInit" ref="0x404b9628" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuInitP.nc">
      <component-ref qname="McuInitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerInit" scoped="" ref="0x404b9628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404b9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404c55b0" loc="60:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404c55b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404c5788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404c5960" loc="61:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404c5960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x404c5b38"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404c5c18"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x404c5cf8"/>
        <function-ref name="actualMicro" scoped="" ref="0x404c5dd8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x404c5eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RFA1RadioOff" ref="0x404a6248" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/radio/RFA1RadioOffP.nc">
      <component-ref qname="RFA1RadioOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RFA1RadioOff" scoped="" ref="0x404a6248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a6420"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Stm25pOff" ref="0x404d60c0" loc="36:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffC.nc">
      <component-ref qname="Stm25pOffC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pOff" scoped="" ref="0x404d60c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404d6298"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Toggle" ref="0x404dce20" loc="38:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <component-ref qname="Stm25pOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Toggle" scoped="" ref="0x404dce20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404df010"/>
        <function-ref name="isInput" scoped="" ref="0x404df0f0"/>
        <function-ref name="toggle" scoped="" ref="0x404df1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404df2b0"/>
        <function-ref name="get" scoped="" ref="0x404df390"/>
        <function-ref name="makeOutput" scoped="" ref="0x404df470"/>
        <function-ref name="set" scoped="" ref="0x404df550"/>
        <function-ref name="clr" scoped="" ref="0x404df630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Stm25pOff" ref="0x404d6900" loc="36:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/Stm25pOffP.nc">
      <component-ref qname="Stm25pOffP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Stm25pOff" scoped="" ref="0x404d6900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404d6ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x404e61d0" loc="42:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CSN" scoped="" ref="0x404e61d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e63a8"/>
        <function-ref name="isInput" scoped="" ref="0x404e6488"/>
        <function-ref name="toggle" scoped="" ref="0x404e6568"/>
        <function-ref name="isOutput" scoped="" ref="0x404e6648"/>
        <function-ref name="get" scoped="" ref="0x404e6728"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e6808"/>
        <function-ref name="set" scoped="" ref="0x404e68e8"/>
        <function-ref name="clr" scoped="" ref="0x404e69c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Hold" ref="0x404e6bd8" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Hold" scoped="" ref="0x404e6bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e6db0"/>
        <function-ref name="isInput" scoped="" ref="0x404e6e90"/>
        <function-ref name="toggle" scoped="" ref="0x404e5010"/>
        <function-ref name="isOutput" scoped="" ref="0x404e50f0"/>
        <function-ref name="get" scoped="" ref="0x404e51d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e52b0"/>
        <function-ref name="set" scoped="" ref="0x404e5390"/>
        <function-ref name="clr" scoped="" ref="0x404e5470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Power" ref="0x404e5688" loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/chips/stm25p/HplStm25pPinsC.nc">
      <component-ref qname="HplStm25pPinsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Power" scoped="" ref="0x404e5688"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e5860"/>
        <function-ref name="isInput" scoped="" ref="0x404e5940"/>
        <function-ref name="toggle" scoped="" ref="0x404e5a20"/>
        <function-ref name="isOutput" scoped="" ref="0x404e5b00"/>
        <function-ref name="get" scoped="" ref="0x404e5be0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e5cc0"/>
        <function-ref name="set" scoped="" ref="0x404e5da0"/>
        <function-ref name="clr" scoped="" ref="0x404e5e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x404ff210" loc="93:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x404ff210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ff5e8"/>
        <function-ref name="isInput" scoped="" ref="0x404ff6c8"/>
        <function-ref name="toggle" scoped="" ref="0x404ff7a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404ff888"/>
        <function-ref name="get" scoped="" ref="0x404ff968"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ffa48"/>
        <function-ref name="set" scoped="" ref="0x404ffb28"/>
        <function-ref name="clr" scoped="" ref="0x404ffc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x404f6750" loc="67:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x404f6750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f6928"/>
        <function-ref name="isInput" scoped="" ref="0x404f6a08"/>
        <function-ref name="toggle" scoped="" ref="0x404f6ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f6bc8"/>
        <function-ref name="get" scoped="" ref="0x404f6ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f6d88"/>
        <function-ref name="set" scoped="" ref="0x404f6e68"/>
        <function-ref name="clr" scoped="" ref="0x404f5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x404fcce8" loc="78:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x404fcce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fcec0"/>
        <function-ref name="isInput" scoped="" ref="0x404fa010"/>
        <function-ref name="toggle" scoped="" ref="0x404fa0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404fa1d0"/>
        <function-ref name="get" scoped="" ref="0x404fa2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fa390"/>
        <function-ref name="set" scoped="" ref="0x404fa470"/>
        <function-ref name="clr" scoped="" ref="0x404fa550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x40503ea8" loc="87:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x40503ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405020c0"/>
        <function-ref name="isInput" scoped="" ref="0x405021a0"/>
        <function-ref name="toggle" scoped="" ref="0x40502280"/>
        <function-ref name="isOutput" scoped="" ref="0x40502360"/>
        <function-ref name="get" scoped="" ref="0x40502440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40502520"/>
        <function-ref name="set" scoped="" ref="0x40502600"/>
        <function-ref name="clr" scoped="" ref="0x405026e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG5" ref="0x4050a750" loc="98:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG5" scoped="" ref="0x4050a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050a928"/>
        <function-ref name="isInput" scoped="" ref="0x4050aa08"/>
        <function-ref name="toggle" scoped="" ref="0x4050aae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4050abc8"/>
        <function-ref name="get" scoped="" ref="0x4050aca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050ad88"/>
        <function-ref name="set" scoped="" ref="0x4050ae68"/>
        <function-ref name="clr" scoped="" ref="0x40509010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x404ea2f0" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x404ea2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ea4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404ea5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404ea688"/>
        <function-ref name="isOutput" scoped="" ref="0x404ea768"/>
        <function-ref name="get" scoped="" ref="0x404ea848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ea928"/>
        <function-ref name="set" scoped="" ref="0x404eaa08"/>
        <function-ref name="clr" scoped="" ref="0x404eaae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x40504a98" loc="85:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x40504a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40504c70"/>
        <function-ref name="isInput" scoped="" ref="0x40504d50"/>
        <function-ref name="toggle" scoped="" ref="0x40504e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40504f10"/>
        <function-ref name="get" scoped="" ref="0x40503010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405030f0"/>
        <function-ref name="set" scoped="" ref="0x405031d0"/>
        <function-ref name="clr" scoped="" ref="0x405032b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x404e9750" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x404e9750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e9928"/>
        <function-ref name="isInput" scoped="" ref="0x404e9a08"/>
        <function-ref name="toggle" scoped="" ref="0x404e9ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404e9bc8"/>
        <function-ref name="get" scoped="" ref="0x404e9ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e9d88"/>
        <function-ref name="set" scoped="" ref="0x404e9e68"/>
        <function-ref name="clr" scoped="" ref="0x404e8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x404efea8" loc="59:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x404efea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ee0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404ee1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404ee280"/>
        <function-ref name="isOutput" scoped="" ref="0x404ee360"/>
        <function-ref name="get" scoped="" ref="0x404ee440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ee520"/>
        <function-ref name="set" scoped="" ref="0x404ee600"/>
        <function-ref name="clr" scoped="" ref="0x404ee6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x404f4670" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x404f4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f4848"/>
        <function-ref name="isInput" scoped="" ref="0x404f4928"/>
        <function-ref name="toggle" scoped="" ref="0x404f4a08"/>
        <function-ref name="isOutput" scoped="" ref="0x404f4ae8"/>
        <function-ref name="get" scoped="" ref="0x404f4bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f4ca8"/>
        <function-ref name="set" scoped="" ref="0x404f4d88"/>
        <function-ref name="clr" scoped="" ref="0x404f4e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x404f9c08" loc="81:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x404f9c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f9de0"/>
        <function-ref name="isInput" scoped="" ref="0x404f9ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40505010"/>
        <function-ref name="isOutput" scoped="" ref="0x405050f0"/>
        <function-ref name="get" scoped="" ref="0x405051d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405052b0"/>
        <function-ref name="set" scoped="" ref="0x40505390"/>
        <function-ref name="clr" scoped="" ref="0x40505470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x404e1010" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x404e1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e11e8"/>
        <function-ref name="isInput" scoped="" ref="0x404e12c8"/>
        <function-ref name="toggle" scoped="" ref="0x404e13a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404e1488"/>
        <function-ref name="get" scoped="" ref="0x404e1568"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e1648"/>
        <function-ref name="set" scoped="" ref="0x404e1728"/>
        <function-ref name="clr" scoped="" ref="0x404e1808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x404e7670" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x404e7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e7848"/>
        <function-ref name="isInput" scoped="" ref="0x404e7928"/>
        <function-ref name="toggle" scoped="" ref="0x404e7a08"/>
        <function-ref name="isOutput" scoped="" ref="0x404e7ae8"/>
        <function-ref name="get" scoped="" ref="0x404e7bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e7ca8"/>
        <function-ref name="set" scoped="" ref="0x404e7d88"/>
        <function-ref name="clr" scoped="" ref="0x404e7e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x404edce8" loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x404edce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404edec0"/>
        <function-ref name="isInput" scoped="" ref="0x404f8010"/>
        <function-ref name="toggle" scoped="" ref="0x404f80f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f81d0"/>
        <function-ref name="get" scoped="" ref="0x404f82b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f8390"/>
        <function-ref name="set" scoped="" ref="0x404f8470"/>
        <function-ref name="clr" scoped="" ref="0x404f8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x404fe4b0" loc="73:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x404fe4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fe688"/>
        <function-ref name="isInput" scoped="" ref="0x404fe768"/>
        <function-ref name="toggle" scoped="" ref="0x404fe848"/>
        <function-ref name="isOutput" scoped="" ref="0x404fe928"/>
        <function-ref name="get" scoped="" ref="0x404fea08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404feae8"/>
        <function-ref name="set" scoped="" ref="0x404febc8"/>
        <function-ref name="clr" scoped="" ref="0x404feca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x40501ce8" loc="90:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x40501ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40501ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40500010"/>
        <function-ref name="toggle" scoped="" ref="0x405000f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405001d0"/>
        <function-ref name="get" scoped="" ref="0x405002b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500390"/>
        <function-ref name="set" scoped="" ref="0x40500470"/>
        <function-ref name="clr" scoped="" ref="0x40500550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x4050b2f0" loc="96:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x4050b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050b4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4050b5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4050b688"/>
        <function-ref name="isOutput" scoped="" ref="0x4050b768"/>
        <function-ref name="get" scoped="" ref="0x4050b848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050b928"/>
        <function-ref name="set" scoped="" ref="0x4050ba08"/>
        <function-ref name="clr" scoped="" ref="0x4050bae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x404fd8e0" loc="76:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x404fd8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fdab8"/>
        <function-ref name="isInput" scoped="" ref="0x404fdb98"/>
        <function-ref name="toggle" scoped="" ref="0x404fdc78"/>
        <function-ref name="isOutput" scoped="" ref="0x404fdd58"/>
        <function-ref name="get" scoped="" ref="0x404fde38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fdf18"/>
        <function-ref name="set" scoped="" ref="0x404fc010"/>
        <function-ref name="clr" scoped="" ref="0x404fc0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x404ecea8" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x404ecea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404eb0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404eb1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404eb280"/>
        <function-ref name="isOutput" scoped="" ref="0x404eb360"/>
        <function-ref name="get" scoped="" ref="0x404eb440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404eb520"/>
        <function-ref name="set" scoped="" ref="0x404eb600"/>
        <function-ref name="clr" scoped="" ref="0x404eb6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x404f1590" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x404f1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f1768"/>
        <function-ref name="isInput" scoped="" ref="0x404f1848"/>
        <function-ref name="toggle" scoped="" ref="0x404f1928"/>
        <function-ref name="isOutput" scoped="" ref="0x404f1a08"/>
        <function-ref name="get" scoped="" ref="0x404f1ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f1bc8"/>
        <function-ref name="set" scoped="" ref="0x404f1ca8"/>
        <function-ref name="clr" scoped="" ref="0x404f1d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x404ffe08" loc="94:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x404ffe08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050c010"/>
        <function-ref name="isInput" scoped="" ref="0x4050c0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4050c1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4050c2b0"/>
        <function-ref name="get" scoped="" ref="0x4050c390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050c470"/>
        <function-ref name="set" scoped="" ref="0x4050c550"/>
        <function-ref name="clr" scoped="" ref="0x4050c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x404f0a08" loc="57:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x404f0a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f0be0"/>
        <function-ref name="isInput" scoped="" ref="0x404f0cc0"/>
        <function-ref name="toggle" scoped="" ref="0x404f0da0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f0e80"/>
        <function-ref name="get" scoped="" ref="0x404ef010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ef0f0"/>
        <function-ref name="set" scoped="" ref="0x404ef1d0"/>
        <function-ref name="clr" scoped="" ref="0x404ef2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x404f5210" loc="68:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x404f5210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f53e8"/>
        <function-ref name="isInput" scoped="" ref="0x404f54c8"/>
        <function-ref name="toggle" scoped="" ref="0x404f55a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f5688"/>
        <function-ref name="get" scoped="" ref="0x404f5768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f5848"/>
        <function-ref name="set" scoped="" ref="0x404f5928"/>
        <function-ref name="clr" scoped="" ref="0x404f5a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x404fa750" loc="79:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x404fa750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fa928"/>
        <function-ref name="isInput" scoped="" ref="0x404faa08"/>
        <function-ref name="toggle" scoped="" ref="0x404faae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404fabc8"/>
        <function-ref name="get" scoped="" ref="0x404faca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fad88"/>
        <function-ref name="set" scoped="" ref="0x404fae68"/>
        <function-ref name="clr" scoped="" ref="0x404f9010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x405028e0" loc="88:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x405028e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40502ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40502b98"/>
        <function-ref name="toggle" scoped="" ref="0x40502c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40502d58"/>
        <function-ref name="get" scoped="" ref="0x40502e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40502f18"/>
        <function-ref name="set" scoped="" ref="0x40501010"/>
        <function-ref name="clr" scoped="" ref="0x405010f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x404eace8" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x404eace8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404eaec0"/>
        <function-ref name="isInput" scoped="" ref="0x404e9010"/>
        <function-ref name="toggle" scoped="" ref="0x404e90f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404e91d0"/>
        <function-ref name="get" scoped="" ref="0x404e92b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e9390"/>
        <function-ref name="set" scoped="" ref="0x404e9470"/>
        <function-ref name="clr" scoped="" ref="0x404e9550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x404e8210" loc="49:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x404e8210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e83e8"/>
        <function-ref name="isInput" scoped="" ref="0x404e84c8"/>
        <function-ref name="toggle" scoped="" ref="0x404e85a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404e8688"/>
        <function-ref name="get" scoped="" ref="0x404e8768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e8848"/>
        <function-ref name="set" scoped="" ref="0x404e8928"/>
        <function-ref name="clr" scoped="" ref="0x404e8a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x404ee8e0" loc="60:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x404ee8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404eeab8"/>
        <function-ref name="isInput" scoped="" ref="0x404eeb98"/>
        <function-ref name="toggle" scoped="" ref="0x404eec78"/>
        <function-ref name="isOutput" scoped="" ref="0x404eed58"/>
        <function-ref name="get" scoped="" ref="0x404eee38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404eef18"/>
        <function-ref name="set" scoped="" ref="0x404ed010"/>
        <function-ref name="clr" scoped="" ref="0x404ed0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x404f30a0" loc="71:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x404f30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f3278"/>
        <function-ref name="isInput" scoped="" ref="0x404f3358"/>
        <function-ref name="toggle" scoped="" ref="0x404f3438"/>
        <function-ref name="isOutput" scoped="" ref="0x404f3518"/>
        <function-ref name="get" scoped="" ref="0x404f35f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f36d8"/>
        <function-ref name="set" scoped="" ref="0x404f37b8"/>
        <function-ref name="clr" scoped="" ref="0x404f3898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x40505670" loc="82:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x40505670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40505848"/>
        <function-ref name="isInput" scoped="" ref="0x40505928"/>
        <function-ref name="toggle" scoped="" ref="0x40505a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40505ae8"/>
        <function-ref name="get" scoped="" ref="0x40505bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40505ca8"/>
        <function-ref name="set" scoped="" ref="0x40505d88"/>
        <function-ref name="clr" scoped="" ref="0x40505e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x404e1a08" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x404e1a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e1be0"/>
        <function-ref name="isInput" scoped="" ref="0x404e1cc0"/>
        <function-ref name="toggle" scoped="" ref="0x404e1da0"/>
        <function-ref name="isOutput" scoped="" ref="0x404e1e80"/>
        <function-ref name="get" scoped="" ref="0x404ec010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ec0f0"/>
        <function-ref name="set" scoped="" ref="0x404ec1d0"/>
        <function-ref name="clr" scoped="" ref="0x404ec2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x404f20a0" loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x404f20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f22f8"/>
        <function-ref name="isInput" scoped="" ref="0x404f23d8"/>
        <function-ref name="toggle" scoped="" ref="0x404f24b8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f2598"/>
        <function-ref name="get" scoped="" ref="0x404f2678"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f2758"/>
        <function-ref name="set" scoped="" ref="0x404f2838"/>
        <function-ref name="clr" scoped="" ref="0x404f2918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x404f8750" loc="63:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x404f8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f8928"/>
        <function-ref name="isInput" scoped="" ref="0x404f8a08"/>
        <function-ref name="toggle" scoped="" ref="0x404f8ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f8bc8"/>
        <function-ref name="get" scoped="" ref="0x404f8ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f8d88"/>
        <function-ref name="set" scoped="" ref="0x404f8e68"/>
        <function-ref name="clr" scoped="" ref="0x404f7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x40500750" loc="91:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x40500750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40500928"/>
        <function-ref name="isInput" scoped="" ref="0x40500a08"/>
        <function-ref name="toggle" scoped="" ref="0x40500ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40500bc8"/>
        <function-ref name="get" scoped="" ref="0x40500ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500d88"/>
        <function-ref name="set" scoped="" ref="0x40500e68"/>
        <function-ref name="clr" scoped="" ref="0x404ff010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x404f7c08" loc="66:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x404f7c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f7ee0"/>
        <function-ref name="isInput" scoped="" ref="0x404f6010"/>
        <function-ref name="toggle" scoped="" ref="0x404f60f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f61d0"/>
        <function-ref name="get" scoped="" ref="0x404f62b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f6390"/>
        <function-ref name="set" scoped="" ref="0x404f6470"/>
        <function-ref name="clr" scoped="" ref="0x404f6550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x404fc2f0" loc="77:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x404fc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fc4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404fc5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404fc688"/>
        <function-ref name="isOutput" scoped="" ref="0x404fc768"/>
        <function-ref name="get" scoped="" ref="0x404fc848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fc928"/>
        <function-ref name="set" scoped="" ref="0x404fca08"/>
        <function-ref name="clr" scoped="" ref="0x404fcae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x405034b0" loc="86:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x405034b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40503688"/>
        <function-ref name="isInput" scoped="" ref="0x40503768"/>
        <function-ref name="toggle" scoped="" ref="0x40503848"/>
        <function-ref name="isOutput" scoped="" ref="0x40503928"/>
        <function-ref name="get" scoped="" ref="0x40503a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40503ae8"/>
        <function-ref name="set" scoped="" ref="0x40503bc8"/>
        <function-ref name="clr" scoped="" ref="0x40503ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x4050bce8" loc="97:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x4050bce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050bec0"/>
        <function-ref name="isInput" scoped="" ref="0x4050a010"/>
        <function-ref name="toggle" scoped="" ref="0x4050a0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4050a1d0"/>
        <function-ref name="get" scoped="" ref="0x4050a2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050a390"/>
        <function-ref name="set" scoped="" ref="0x4050a470"/>
        <function-ref name="clr" scoped="" ref="0x4050a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x404eb8e0" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x404eb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ebab8"/>
        <function-ref name="isInput" scoped="" ref="0x404ebb98"/>
        <function-ref name="toggle" scoped="" ref="0x404ebc78"/>
        <function-ref name="isOutput" scoped="" ref="0x404ebd58"/>
        <function-ref name="get" scoped="" ref="0x404ebe38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ebf18"/>
        <function-ref name="set" scoped="" ref="0x404ea010"/>
        <function-ref name="clr" scoped="" ref="0x404ea0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x404f0010" loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x404f0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f01e8"/>
        <function-ref name="isInput" scoped="" ref="0x404f02c8"/>
        <function-ref name="toggle" scoped="" ref="0x404f03a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f0488"/>
        <function-ref name="get" scoped="" ref="0x404f0568"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f0648"/>
        <function-ref name="set" scoped="" ref="0x404f0728"/>
        <function-ref name="clr" scoped="" ref="0x404f0808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x405040a0" loc="84:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x405040a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40504278"/>
        <function-ref name="isInput" scoped="" ref="0x40504358"/>
        <function-ref name="toggle" scoped="" ref="0x40504438"/>
        <function-ref name="isOutput" scoped="" ref="0x40504518"/>
        <function-ref name="get" scoped="" ref="0x405045f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405046d8"/>
        <function-ref name="set" scoped="" ref="0x405047b8"/>
        <function-ref name="clr" scoped="" ref="0x40504898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x404ef4b0" loc="58:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x404ef4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ef688"/>
        <function-ref name="isInput" scoped="" ref="0x404ef768"/>
        <function-ref name="toggle" scoped="" ref="0x404ef848"/>
        <function-ref name="isOutput" scoped="" ref="0x404ef928"/>
        <function-ref name="get" scoped="" ref="0x404efa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404efae8"/>
        <function-ref name="set" scoped="" ref="0x404efbc8"/>
        <function-ref name="clr" scoped="" ref="0x404efca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x404f5c08" loc="69:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x404f5c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f5de0"/>
        <function-ref name="isInput" scoped="" ref="0x404f5ec0"/>
        <function-ref name="toggle" scoped="" ref="0x404f4010"/>
        <function-ref name="isOutput" scoped="" ref="0x404f40f0"/>
        <function-ref name="get" scoped="" ref="0x404f41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f42b0"/>
        <function-ref name="set" scoped="" ref="0x404f4390"/>
        <function-ref name="clr" scoped="" ref="0x404f4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x404f9210" loc="80:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x404f9210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f93e8"/>
        <function-ref name="isInput" scoped="" ref="0x404f94c8"/>
        <function-ref name="toggle" scoped="" ref="0x404f95a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f9688"/>
        <function-ref name="get" scoped="" ref="0x404f9768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f9848"/>
        <function-ref name="set" scoped="" ref="0x404f9928"/>
        <function-ref name="clr" scoped="" ref="0x404f9a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x405012f0" loc="89:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x405012f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405014c8"/>
        <function-ref name="isInput" scoped="" ref="0x405015a8"/>
        <function-ref name="toggle" scoped="" ref="0x40501688"/>
        <function-ref name="isOutput" scoped="" ref="0x40501768"/>
        <function-ref name="get" scoped="" ref="0x40501848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40501928"/>
        <function-ref name="set" scoped="" ref="0x40501a08"/>
        <function-ref name="clr" scoped="" ref="0x40501ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x404e45f0" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x404e45f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e47c8"/>
        <function-ref name="isInput" scoped="" ref="0x404e48a8"/>
        <function-ref name="toggle" scoped="" ref="0x404e4988"/>
        <function-ref name="isOutput" scoped="" ref="0x404e4a68"/>
        <function-ref name="get" scoped="" ref="0x404e4b48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e4c28"/>
        <function-ref name="set" scoped="" ref="0x404e4d08"/>
        <function-ref name="clr" scoped="" ref="0x404e4de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x404e8c08" loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x404e8c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404e8de0"/>
        <function-ref name="isInput" scoped="" ref="0x404e8ec0"/>
        <function-ref name="toggle" scoped="" ref="0x404e7010"/>
        <function-ref name="isOutput" scoped="" ref="0x404e70f0"/>
        <function-ref name="get" scoped="" ref="0x404e71d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404e72b0"/>
        <function-ref name="set" scoped="" ref="0x404e7390"/>
        <function-ref name="clr" scoped="" ref="0x404e7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x404ed2f0" loc="61:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x404ed2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ed4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404ed5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404ed688"/>
        <function-ref name="isOutput" scoped="" ref="0x404ed768"/>
        <function-ref name="get" scoped="" ref="0x404ed848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ed928"/>
        <function-ref name="set" scoped="" ref="0x404eda08"/>
        <function-ref name="clr" scoped="" ref="0x404edae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x404f3a98" loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x404f3a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f3c70"/>
        <function-ref name="isInput" scoped="" ref="0x404f3d50"/>
        <function-ref name="toggle" scoped="" ref="0x404f3e30"/>
        <function-ref name="isOutput" scoped="" ref="0x404f3f10"/>
        <function-ref name="get" scoped="" ref="0x404fe010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fe0f0"/>
        <function-ref name="set" scoped="" ref="0x404fe1d0"/>
        <function-ref name="clr" scoped="" ref="0x404fe2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x4050c830" loc="95:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x4050c830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050ca08"/>
        <function-ref name="isInput" scoped="" ref="0x4050cae8"/>
        <function-ref name="toggle" scoped="" ref="0x4050cbc8"/>
        <function-ref name="isOutput" scoped="" ref="0x4050cca8"/>
        <function-ref name="get" scoped="" ref="0x4050cd88"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050ce68"/>
        <function-ref name="set" scoped="" ref="0x4050b010"/>
        <function-ref name="clr" scoped="" ref="0x4050b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x404feea8" loc="75:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x404feea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fd0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404fd1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404fd280"/>
        <function-ref name="isOutput" scoped="" ref="0x404fd360"/>
        <function-ref name="get" scoped="" ref="0x404fd440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fd520"/>
        <function-ref name="set" scoped="" ref="0x404fd600"/>
        <function-ref name="clr" scoped="" ref="0x404fd6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x404f7210" loc="64:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x404f7210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f73e8"/>
        <function-ref name="isInput" scoped="" ref="0x404f74c8"/>
        <function-ref name="toggle" scoped="" ref="0x404f75a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404f7688"/>
        <function-ref name="get" scoped="" ref="0x404f7768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f7848"/>
        <function-ref name="set" scoped="" ref="0x404f7928"/>
        <function-ref name="clr" scoped="" ref="0x404f7a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x404ec4b0" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x404ec4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ec688"/>
        <function-ref name="isInput" scoped="" ref="0x404ec768"/>
        <function-ref name="toggle" scoped="" ref="0x404ec848"/>
        <function-ref name="isOutput" scoped="" ref="0x404ec928"/>
        <function-ref name="get" scoped="" ref="0x404eca08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ecae8"/>
        <function-ref name="set" scoped="" ref="0x404ecbc8"/>
        <function-ref name="clr" scoped="" ref="0x404ecca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x404f2b18" loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOC.nc">
      <component-ref qname="AtmegaGeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x404f2b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f2cf0"/>
        <function-ref name="isInput" scoped="" ref="0x404f2dd0"/>
        <function-ref name="toggle" scoped="" ref="0x404f2eb0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f1010"/>
        <function-ref name="get" scoped="" ref="0x404f10f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f11d0"/>
        <function-ref name="set" scoped="" ref="0x404f12b0"/>
        <function-ref name="clr" scoped="" ref="0x404f1390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x405070a8" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x405070a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40507290"/>
        <function-ref name="isInput" scoped="" ref="0x40507370"/>
        <function-ref name="toggle" scoped="" ref="0x40507450"/>
        <function-ref name="isOutput" scoped="" ref="0x40507530"/>
        <function-ref name="get" scoped="" ref="0x40507610"/>
        <function-ref name="makeOutput" scoped="" ref="0x405076f0"/>
        <function-ref name="set" scoped="" ref="0x405077d0"/>
        <function-ref name="clr" scoped="" ref="0x405078b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x4051f920" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x4051f920"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051fb08"/>
        <function-ref name="isInput" scoped="" ref="0x4051fbe8"/>
        <function-ref name="toggle" scoped="" ref="0x4051fcc8"/>
        <function-ref name="isOutput" scoped="" ref="0x4051fda8"/>
        <function-ref name="get" scoped="" ref="0x4051fe88"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051e010"/>
        <function-ref name="set" scoped="" ref="0x4051e0f0"/>
        <function-ref name="clr" scoped="" ref="0x4051e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x4051b2b8" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x4051b2b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051b4a0"/>
        <function-ref name="isInput" scoped="" ref="0x4051b580"/>
        <function-ref name="toggle" scoped="" ref="0x4051b660"/>
        <function-ref name="isOutput" scoped="" ref="0x4051b740"/>
        <function-ref name="get" scoped="" ref="0x4051b820"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051b900"/>
        <function-ref name="set" scoped="" ref="0x4051b9e0"/>
        <function-ref name="clr" scoped="" ref="0x4051bac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x40526af8" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x40526af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40526ce0"/>
        <function-ref name="isInput" scoped="" ref="0x40526dc0"/>
        <function-ref name="toggle" scoped="" ref="0x40526ea0"/>
        <function-ref name="isOutput" scoped="" ref="0x40524010"/>
        <function-ref name="get" scoped="" ref="0x405240f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405241d0"/>
        <function-ref name="set" scoped="" ref="0x405242b0"/>
        <function-ref name="clr" scoped="" ref="0x40524390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x4052f440" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x4052f440"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4052f628"/>
        <function-ref name="isInput" scoped="" ref="0x4052f708"/>
        <function-ref name="toggle" scoped="" ref="0x4052f7e8"/>
        <function-ref name="isOutput" scoped="" ref="0x4052f8c8"/>
        <function-ref name="get" scoped="" ref="0x4052f9a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4052fa88"/>
        <function-ref name="set" scoped="" ref="0x4052fb68"/>
        <function-ref name="clr" scoped="" ref="0x4052fc48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x4052cc68" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x4052cc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4052ce50"/>
        <function-ref name="isInput" scoped="" ref="0x4052b010"/>
        <function-ref name="toggle" scoped="" ref="0x4052b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4052b1d0"/>
        <function-ref name="get" scoped="" ref="0x4052b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4052b390"/>
        <function-ref name="set" scoped="" ref="0x4052b470"/>
        <function-ref name="clr" scoped="" ref="0x4052b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin" ref="0x405355c8" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaGeneralIOP.nc">
      <component-ref qname="AtmegaGeneralIOC.PortG"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin" scoped="" ref="0x405355c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405357b0"/>
        <function-ref name="isInput" scoped="" ref="0x40535890"/>
        <function-ref name="toggle" scoped="" ref="0x40535970"/>
        <function-ref name="isOutput" scoped="" ref="0x40535a50"/>
        <function-ref name="get" scoped="" ref="0x40535b30"/>
        <function-ref name="makeOutput" scoped="" ref="0x40535c10"/>
        <function-ref name="set" scoped="" ref="0x40535cf0"/>
        <function-ref name="clr" scoped="" ref="0x40535dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x4054e438" loc="18:/opt/tinyos-2.x/tos/system/NoPinC.nc">
      <component-ref qname="HplStm25pPinsC.NoPinC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x4054e438"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4054e610"/>
        <function-ref name="isInput" scoped="" ref="0x4054e6f0"/>
        <function-ref name="toggle" scoped="" ref="0x4054e7d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4054e8b0"/>
        <function-ref name="get" scoped="" ref="0x4054e990"/>
        <function-ref name="makeOutput" scoped="" ref="0x4054ea70"/>
        <function-ref name="set" scoped="" ref="0x4054eb50"/>
        <function-ref name="clr" scoped="" ref="0x4054ec30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404a3cd0" loc="2:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningC.nc">
      <component-ref qname="BatteryWarningC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404a3cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a3ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4055c8f0" loc="2:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchC.nc">
      <component-ref qname="BatterySwitchC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4055c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4055cf18"/>
        <function-ref name="readDone" scoped="" ref="0x4055e188"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4055a0b0" loc="3:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchP.nc">
      <component-ref qname="BatterySwitchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4055a0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4055a6d8"/>
        <function-ref name="readDone" scoped="" ref="0x4055a930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x4055ac88" loc="4:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchP.nc">
      <component-ref qname="BatterySwitchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x4055ac88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055ae60"/>
        <function-ref name="isInput" scoped="" ref="0x40559010"/>
        <function-ref name="toggle" scoped="" ref="0x405590f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405591d0"/>
        <function-ref name="get" scoped="" ref="0x405592b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40559390"/>
        <function-ref name="set" scoped="" ref="0x40559470"/>
        <function-ref name="clr" scoped="" ref="0x40559550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x4055f210" loc="5:/opt/tinyos-2.x/tos/platforms/ucmini/BatterySwitchP.nc">
      <component-ref qname="BatterySwitchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4055f210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40558d58"/>
        <function-ref name="fired" scoped="" ref="0x40558010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40558718"/>
        <function-ref name="isOneShot" scoped="" ref="0x405584c0"/>
        <function-ref name="getdt" scoped="" ref="0x4056c268"/>
        <function-ref name="gett0" scoped="" ref="0x4056c010"/>
        <function-ref name="isRunning" scoped="" ref="0x40558268"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4055f838"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40558a38"/>
        <function-ref name="startOneShot" scoped="" ref="0x4055fab8"/>
        <function-ref name="stop" scoped="" ref="0x4055fd38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4055b330" loc="45:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <component-ref qname="BatterySwitchC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4055b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40569e38"/>
        <function-ref name="fired" scoped="" ref="0x405690f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x405697f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x405695a0"/>
        <function-ref name="getdt" scoped="" ref="0x406b8310"/>
        <function-ref name="gett0" scoped="" ref="0x406b80b8"/>
        <function-ref name="isRunning" scoped="" ref="0x40569348"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4055b958"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40569b18"/>
        <function-ref name="startOneShot" scoped="" ref="0x4055bbd8"/>
        <function-ref name="stop" scoped="" ref="0x4055be58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40573c38" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40573c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4056f730"/>
        <function-ref name="fired" scoped="" ref="0x405709d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4056f0f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40570e80"/>
        <function-ref name="getdt" scoped="" ref="0x4056fbe0"/>
        <function-ref name="gett0" scoped="" ref="0x4056f988"/>
        <function-ref name="isRunning" scoped="" ref="0x40570c28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40570278"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4056f410"/>
        <function-ref name="startOneShot" scoped="" ref="0x405704f8"/>
        <function-ref name="stop" scoped="" ref="0x40570778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x4057af20" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x4057af20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406693e8"/>
        <function-ref name="fired" scoped="" ref="0x40579ba0"/>
        <function-ref name="startAt" scoped="" ref="0x406690a8"/>
        <function-ref name="isRunning" scoped="" ref="0x40579e18"/>
        <function-ref name="getAlarm" scoped="" ref="0x40669660"/>
        <function-ref name="start" scoped="" ref="0x40579688"/>
        <function-ref name="stop" scoped="" ref="0x40579928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ea42d0" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40ea42d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ea3840"/>
        <function-ref name="fired" scoped="" ref="0x40ea3010"/>
        <function-ref name="startAt" scoped="" ref="0x40ea3500"/>
        <function-ref name="isRunning" scoped="" ref="0x40ea3288"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ea3ab8"/>
        <function-ref name="start" scoped="" ref="0x40ea4a20"/>
        <function-ref name="stop" scoped="" ref="0x40ea4cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCompare" ref="0x40e93010" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCompare" scoped="" ref="0x40e93010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40e92a68"/>
        <function-ref name="test" scoped="" ref="0x40e93de8"/>
        <function-ref name="fired" scoped="" ref="0x40e93b70"/>
        <function-ref name="force" scoped="" ref="0x40e90010"/>
        <function-ref name="get" scoped="" ref="0x40e93658"/>
        <function-ref name="reset" scoped="" ref="0x40e92088"/>
        <function-ref name="getMode" scoped="" ref="0x40e92d08"/>
        <function-ref name="isOn" scoped="" ref="0x40e927f0"/>
        <function-ref name="set" scoped="" ref="0x40e938d0"/>
        <function-ref name="start" scoped="" ref="0x40e92300"/>
        <function-ref name="stop" scoped="" ref="0x40e92578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40e984e0" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40e984e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e979a0"/>
        <function-ref name="fired" scoped="" ref="0x40e97170"/>
        <function-ref name="startAt" scoped="" ref="0x40e97660"/>
        <function-ref name="isRunning" scoped="" ref="0x40e973e8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40e97c18"/>
        <function-ref name="start" scoped="" ref="0x40e98c30"/>
        <function-ref name="stop" scoped="" ref="0x40e98ed0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40e980a8" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40e980a8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40e98280"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x40e97ee8" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x40e97ee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40e949f0"/>
        <function-ref name="test" scoped="" ref="0x40e95d08"/>
        <function-ref name="get" scoped="" ref="0x40e95578"/>
        <function-ref name="reset" scoped="" ref="0x40e94010"/>
        <function-ref name="getMode" scoped="" ref="0x40e94c90"/>
        <function-ref name="overflow" scoped="" ref="0x40e95a90"/>
        <function-ref name="isOn" scoped="" ref="0x40e94778"/>
        <function-ref name="set" scoped="" ref="0x40e957f0"/>
        <function-ref name="start" scoped="" ref="0x40e94288"/>
        <function-ref name="stop" scoped="" ref="0x40e94500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x405a2c00" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x405a2c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405ae690"/>
        <function-ref name="test" scoped="" ref="0x405afa08"/>
        <function-ref name="get" scoped="" ref="0x405af278"/>
        <function-ref name="reset" scoped="" ref="0x405afc80"/>
        <function-ref name="getMode" scoped="" ref="0x405ae930"/>
        <function-ref name="overflow" scoped="" ref="0x405af790"/>
        <function-ref name="isOn" scoped="" ref="0x405ae418"/>
        <function-ref name="set" scoped="" ref="0x405af4f0"/>
        <function-ref name="start" scoped="" ref="0x405afef8"/>
        <function-ref name="stop" scoped="" ref="0x405ae1a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SfdCapture" ref="0x405b4420" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SfdCapture" scoped="" ref="0x405b4420"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405b8ee0"/>
        <function-ref name="test" scoped="" ref="0x405b8288"/>
        <function-ref name="fired" scoped="" ref="0x405b8010"/>
        <function-ref name="get" scoped="" ref="0x405b4a68"/>
        <function-ref name="reset" scoped="" ref="0x405b8500"/>
        <function-ref name="getMode" scoped="" ref="0x405b31c0"/>
        <function-ref name="isOn" scoped="" ref="0x405b8c68"/>
        <function-ref name="set" scoped="" ref="0x405b4ce0"/>
        <function-ref name="start" scoped="" ref="0x405b8778"/>
        <function-ref name="stop" scoped="" ref="0x405b89f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x405ac010" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacC.nc">
      <component-ref qname="HplAtmRfa1TimerMacC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x405ac010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405aba68"/>
        <function-ref name="test" scoped="" ref="0x405acde8"/>
        <function-ref name="fired" scoped="" ref="0x405acb70"/>
        <function-ref name="force" scoped="" ref="0x405aa010"/>
        <function-ref name="get" scoped="" ref="0x405ac658"/>
        <function-ref name="reset" scoped="" ref="0x405ab088"/>
        <function-ref name="getMode" scoped="" ref="0x405abd08"/>
        <function-ref name="isOn" scoped="" ref="0x405ab7f0"/>
        <function-ref name="set" scoped="" ref="0x405ac8d0"/>
        <function-ref name="start" scoped="" ref="0x405ab300"/>
        <function-ref name="stop" scoped="" ref="0x405ab578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x405bfe88" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x405bfe88"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405bc908"/>
        <function-ref name="test" scoped="" ref="0x405bdc88"/>
        <function-ref name="fired" scoped="" ref="0x405bda10"/>
        <function-ref name="force" scoped="" ref="0x405bce20"/>
        <function-ref name="get" scoped="" ref="0x405bd4f8"/>
        <function-ref name="reset" scoped="" ref="0x405bdf00"/>
        <function-ref name="getMode" scoped="" ref="0x405bcba8"/>
        <function-ref name="isOn" scoped="" ref="0x405bc690"/>
        <function-ref name="set" scoped="" ref="0x405bd770"/>
        <function-ref name="start" scoped="" ref="0x405bc1a0"/>
        <function-ref name="stop" scoped="" ref="0x405bc418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x405c3a90" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x405c3a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x405c3c68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x405bb248" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x405bb248"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405c9ca0"/>
        <function-ref name="test" scoped="" ref="0x405c9048"/>
        <function-ref name="fired" scoped="" ref="0x405bbda8"/>
        <function-ref name="force" scoped="" ref="0x405c8288"/>
        <function-ref name="get" scoped="" ref="0x405bb890"/>
        <function-ref name="reset" scoped="" ref="0x405c92c0"/>
        <function-ref name="getMode" scoped="" ref="0x405c8010"/>
        <function-ref name="isOn" scoped="" ref="0x405c9a28"/>
        <function-ref name="set" scoped="" ref="0x405bbb08"/>
        <function-ref name="start" scoped="" ref="0x405c9538"/>
        <function-ref name="stop" scoped="" ref="0x405c97b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x405b3d50" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x405b3d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405bf7f0"/>
        <function-ref name="test" scoped="" ref="0x405c0b70"/>
        <function-ref name="get" scoped="" ref="0x405c03e0"/>
        <function-ref name="reset" scoped="" ref="0x405c0de8"/>
        <function-ref name="getMode" scoped="" ref="0x405bfa90"/>
        <function-ref name="overflow" scoped="" ref="0x405c08f8"/>
        <function-ref name="isOn" scoped="" ref="0x405bf578"/>
        <function-ref name="set" scoped="" ref="0x405c0658"/>
        <function-ref name="start" scoped="" ref="0x405bf088"/>
        <function-ref name="stop" scoped="" ref="0x405bf300"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x405c3e80" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x405c3e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x405c2070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SfdCapture" ref="0x405c5ac0" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SfdCapture" scoped="" ref="0x405c5ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405c3538"/>
        <function-ref name="test" scoped="" ref="0x405c48b0"/>
        <function-ref name="fired" scoped="" ref="0x405c4638"/>
        <function-ref name="get" scoped="" ref="0x405c4120"/>
        <function-ref name="reset" scoped="" ref="0x405c4b28"/>
        <function-ref name="getMode" scoped="" ref="0x405c37d8"/>
        <function-ref name="isOn" scoped="" ref="0x405c32c0"/>
        <function-ref name="set" scoped="" ref="0x405c4398"/>
        <function-ref name="start" scoped="" ref="0x405c4da0"/>
        <function-ref name="stop" scoped="" ref="0x405c3048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x405c8680" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1TimerMacP.nc">
      <component-ref qname="HplAtmRfa1TimerMacP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x405c8680"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x405c51a0"/>
        <function-ref name="test" scoped="" ref="0x405c7528"/>
        <function-ref name="fired" scoped="" ref="0x405c72b0"/>
        <function-ref name="force" scoped="" ref="0x405c56b8"/>
        <function-ref name="get" scoped="" ref="0x405c8cc8"/>
        <function-ref name="reset" scoped="" ref="0x405c77a0"/>
        <function-ref name="getMode" scoped="" ref="0x405c5440"/>
        <function-ref name="isOn" scoped="" ref="0x405c7f08"/>
        <function-ref name="set" scoped="" ref="0x405c7010"/>
        <function-ref name="start" scoped="" ref="0x405c7a18"/>
        <function-ref name="stop" scoped="" ref="0x405c7c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x404336b0" loc="47:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x404336b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x40433888"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40440958" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40440958"/></type-interface>
      <attribute-value>
        <attribute-ref name="atmostonce" ref="0x403503d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atmostonce" ref="0x403503d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40440b30"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40440c10"/>
        <function-ref name="led1On" scoped="" ref="0x40440cf0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40440dd0"/>
        <function-ref name="led3Off" scoped="" ref="0x40440eb0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40436010"/>
        <function-ref name="get" scoped="" ref="0x404360f0"/>
        <function-ref name="led1Off" scoped="" ref="0x404361d0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x404362b0"/>
        <function-ref name="led3On" scoped="" ref="0x40436390"/>
        <function-ref name="led0On" scoped="" ref="0x40436470"/>
        <function-ref name="led2Off" scoped="" ref="0x40436550"/>
        <function-ref name="led2On" scoped="" ref="0x40436630"/>
        <function-ref name="set" scoped="" ref="0x40436790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x4035a458" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x4035a458"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x4035a630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x40434148" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40434148"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40434320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40625d50" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Counter62khz32C.nc">
      <component-ref qname="Counter62khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40625d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406164e8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x406169d8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40616760"/>
        <function-ref name="overflow" scoped="" ref="0x40616c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40622010" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40622010"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406221e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40622448" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40622448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40622b98"/>
        <function-ref name="clearOverflow" scoped="" ref="0x406280a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40622e10"/>
        <function-ref name="overflow" scoped="" ref="0x40628320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x406285f0" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="Counter62khz32C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x406285f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x40626068"/>
        <function-ref name="test" scoped="" ref="0x406273e8"/>
        <function-ref name="get" scoped="" ref="0x40628c38"/>
        <function-ref name="reset" scoped="" ref="0x40627660"/>
        <function-ref name="getMode" scoped="" ref="0x40626308"/>
        <function-ref name="overflow" scoped="" ref="0x40627170"/>
        <function-ref name="isOn" scoped="" ref="0x40627dc8"/>
        <function-ref name="set" scoped="" ref="0x40628eb0"/>
        <function-ref name="start" scoped="" ref="0x406278d8"/>
        <function-ref name="stop" scoped="" ref="0x40627b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40635768" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40635768"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40635eb8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x406323c8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40632150"/>
        <function-ref name="overflow" scoped="" ref="0x40632640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40643380" loc="63:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40643380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40643ad0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40642010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40643d48"/>
        <function-ref name="overflow" scoped="" ref="0x40642288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x406440c0" loc="62:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x406440c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40644810"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40644d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40644a88"/>
        <function-ref name="overflow" scoped="" ref="0x40643010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ea1ce0" loc="61:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40ea1ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e9f1e8"/>
        <function-ref name="fired" scoped="" ref="0x40ea0990"/>
        <function-ref name="startAt" scoped="" ref="0x40ea0e80"/>
        <function-ref name="isRunning" scoped="" ref="0x40ea0c08"/>
        <function-ref name="getAlarm" scoped="" ref="0x40e9f460"/>
        <function-ref name="start" scoped="" ref="0x40ea0478"/>
        <function-ref name="stop" scoped="" ref="0x40ea0718"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x40e9ea00" loc="73:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x40e9ea00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e9b010"/>
        <function-ref name="fired" scoped="" ref="0x40e9d718"/>
        <function-ref name="startAt" scoped="" ref="0x40e9dc08"/>
        <function-ref name="isRunning" scoped="" ref="0x40e9d990"/>
        <function-ref name="getAlarm" scoped="" ref="0x40e9b288"/>
        <function-ref name="start" scoped="" ref="0x40e9d200"/>
        <function-ref name="stop" scoped="" ref="0x40e9d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40e9f7b0" loc="68:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TimerMilliP.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40e9f7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40e9ff00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40e9e418"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40e9e1a0"/>
        <function-ref name="overflow" scoped="" ref="0x40e9e690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x40685658" loc="74:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x40685658"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40685830"/>
        <function-ref name="runTask" scoped="" ref="0x40685910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40687cc8" loc="49:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40687cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40685190"/>
        <function-ref name="fired" scoped="" ref="0x40686950"/>
        <function-ref name="startAt" scoped="" ref="0x40686e40"/>
        <function-ref name="isRunning" scoped="" ref="0x40686bc8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40685408"/>
        <function-ref name="start" scoped="" ref="0x40686438"/>
        <function-ref name="stop" scoped="" ref="0x406866d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40668968" loc="48:/opt/tinyos-2.x/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="TimerMilliP.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40668968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406874c8"/>
        <function-ref name="fired" scoped="" ref="0x40667768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40667e70"/>
        <function-ref name="isOneShot" scoped="" ref="0x40667c18"/>
        <function-ref name="getdt" scoped="" ref="0x40687978"/>
        <function-ref name="gett0" scoped="" ref="0x40687720"/>
        <function-ref name="isRunning" scoped="" ref="0x406679c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40667010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x406871a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40667290"/>
        <function-ref name="stop" scoped="" ref="0x40667510"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x406bb2b8" loc="71:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x406bb2b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406bb490"/>
        <function-ref name="runTask" scoped="" ref="0x406bb570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x406aa0c0" loc="49:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x406aa0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406a8ba8"/>
        <function-ref name="fired" scoped="" ref="0x406aae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x406a8568"/>
        <function-ref name="isOneShot" scoped="" ref="0x406a8310"/>
        <function-ref name="getdt" scoped="" ref="0x406bb068"/>
        <function-ref name="gett0" scoped="" ref="0x406a8e00"/>
        <function-ref name="isRunning" scoped="" ref="0x406a80b8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x406aa6e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x406a8888"/>
        <function-ref name="startOneShot" scoped="" ref="0x406aa968"/>
        <function-ref name="stop" scoped="" ref="0x406aabe8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40682cc8" loc="48:/opt/tinyos-2.x/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="TimerMilliP.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40682cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406ab8d8"/>
        <function-ref name="fired" scoped="" ref="0x40681ad8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x406ab278"/>
        <function-ref name="isOneShot" scoped="" ref="0x406ab010"/>
        <function-ref name="getdt" scoped="" ref="0x406abda8"/>
        <function-ref name="gett0" scoped="" ref="0x406abb40"/>
        <function-ref name="isRunning" scoped="" ref="0x40681d40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40681350"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x406ab5a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x406815e0"/>
        <function-ref name="stop" scoped="" ref="0x40681870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40551448" loc="2:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageC.nc">
      <component-ref qname="BatteryWarningC.VoltageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40551448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40551a70"/>
        <function-ref name="readDone" scoped="" ref="0x40551cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406b5ba0" loc="2:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageArbiterP.nc">
      <component-ref qname="VoltageArbiterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406b5ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406b21e0"/>
        <function-ref name="readDone" scoped="" ref="0x406b2438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406b2de8" loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/SingleVoltageC.nc">
      <component-ref qname="SingleVoltageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406b2de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406c3448"/>
        <function-ref name="readDone" scoped="" ref="0x406c36a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x406c1d20" loc="25:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SingleVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x406c1d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x406c1ef8"/>
        <function-ref name="configure" scoped="" ref="0x40833010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406c2c98" loc="22:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SingleVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406c2c98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406c12e8"/>
        <function-ref name="readDone" scoped="" ref="0x406c1540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x406c1848" loc="24:/opt/tinyos-2.x/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SingleVoltageC.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406c1848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x406c1a20"/>
        <function-ref name="getChannel" scoped="" ref="0x406c1b00"/>
        <function-ref name="getPrescaler" scoped="" ref="0x406c1be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406cc480" loc="19:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406cc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406ccaa8"/>
        <function-ref name="readDone" scoped="" ref="0x406ccd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x406c7958" loc="20:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x406c7958"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406ca010"/>
        <function-ref name="readDone" scoped="" ref="0x406ca288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x406ca940" loc="23:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406ca940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x406cab18"/>
        <function-ref name="getChannel" scoped="" ref="0x406cabf8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x406cacd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x406c91b8" loc="24:/opt/tinyos-2.x/tos/chips/atm1281/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x406c91b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x406c9390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x406c9470"/>
        <function-ref name="request" scoped="" ref="0x406c9550"/>
        <function-ref name="granted" scoped="" ref="0x406c9630"/>
        <function-ref name="isOwner" scoped="" ref="0x406c9710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x406d3618" loc="58:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x406d3618"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x406d37f0"/>
        <function-ref name="configure" scoped="" ref="0x406d38d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x406e2db0" loc="56:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x406e2db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x406d3010"/>
        <function-ref name="dataReady" scoped="" ref="0x406d30f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x406d1bd8" loc="55:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406d1bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x406d1db0"/>
        <function-ref name="cancel" scoped="" ref="0x406d1e90"/>
        <function-ref name="dataReady" scoped="" ref="0x406d4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x406d51b8" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x406d51b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x406d5390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x406d5470"/>
        <function-ref name="request" scoped="" ref="0x406d5550"/>
        <function-ref name="granted" scoped="" ref="0x406d5630"/>
        <function-ref name="isOwner" scoped="" ref="0x406d5710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406df2d8" loc="87:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406df2d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406df4b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x406de110" loc="90:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x406de110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x406de2e8"/>
        <function-ref name="dataReady" scoped="" ref="0x406de3c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x406dcb58" loc="89:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406dcb58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x406dcd30"/>
        <function-ref name="cancel" scoped="" ref="0x406dce10"/>
        <function-ref name="dataReady" scoped="" ref="0x406dcef0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x406e6dd8" loc="93:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x406e6dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x406dd010"/>
        <function-ref name="isAdlarOn" scoped="" ref="0x406dd0f0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x406dd1d0"/>
        <function-ref name="isEnabled" scoped="" ref="0x406dd2b0"/>
        <function-ref name="setChannel" scoped="" ref="0x406dd390"/>
        <function-ref name="enableAdc" scoped="" ref="0x406dd470"/>
        <function-ref name="setAdlar" scoped="" ref="0x406dd550"/>
        <function-ref name="enableInterruption" scoped="" ref="0x406dd630"/>
        <function-ref name="isComplete" scoped="" ref="0x406dd710"/>
        <function-ref name="cancel" scoped="" ref="0x406dd7f0"/>
        <function-ref name="disableAdc" scoped="" ref="0x406dd8d0"/>
        <function-ref name="getRef" scoped="" ref="0x406dd9b0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x406dda90"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x406ddbf0"/>
        <function-ref name="startConversion" scoped="" ref="0x406ddcd0"/>
        <function-ref name="isStarted" scoped="" ref="0x406dddb0"/>
        <function-ref name="getChannel" scoped="" ref="0x406dde90"/>
        <function-ref name="setAdcsra" scoped="" ref="0x406db010"/>
        <function-ref name="setRef" scoped="" ref="0x406db0f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x406db1d0"/>
        <function-ref name="setContinuous" scoped="" ref="0x406db2b0"/>
        <function-ref name="getValue" scoped="" ref="0x406db390"/>
        <function-ref name="dataReady" scoped="" ref="0x406db470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x406dc6c8" loc="88:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x406dc6c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406dc8a0"/>
        <function-ref name="stop" scoped="" ref="0x406dc980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x406db648" loc="94:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x406db648"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x406db820"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x406db900"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x406db9e0"/>
        <function-ref name="actualMicro" scoped="" ref="0x406dbac0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x406dbba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x406d0588" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x406d0588"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x406d0760"/>
        <function-ref name="isAdlarOn" scoped="" ref="0x406d0840"/>
        <function-ref name="setPrescaler" scoped="" ref="0x406d0920"/>
        <function-ref name="isEnabled" scoped="" ref="0x406d0a00"/>
        <function-ref name="setChannel" scoped="" ref="0x406d0ae0"/>
        <function-ref name="enableAdc" scoped="" ref="0x406d0bc0"/>
        <function-ref name="setAdlar" scoped="" ref="0x406d0ca0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x406d0d80"/>
        <function-ref name="isComplete" scoped="" ref="0x406d0e60"/>
        <function-ref name="cancel" scoped="" ref="0x40705010"/>
        <function-ref name="disableAdc" scoped="" ref="0x407050f0"/>
        <function-ref name="getRef" scoped="" ref="0x407051d0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x407052b0"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40705410"/>
        <function-ref name="startConversion" scoped="" ref="0x407054f0"/>
        <function-ref name="isStarted" scoped="" ref="0x407055d0"/>
        <function-ref name="getChannel" scoped="" ref="0x407056b0"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40705790"/>
        <function-ref name="setRef" scoped="" ref="0x40705870"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40705950"/>
        <function-ref name="setContinuous" scoped="" ref="0x40705a30"/>
        <function-ref name="getValue" scoped="" ref="0x40705b10"/>
        <function-ref name="dataReady" scoped="" ref="0x40705bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x40717ed8" loc="49:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x40717ed8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x407160c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x40704658" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40704658"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40704830"/>
        <function-ref name="isAdlarOn" scoped="" ref="0x40704910"/>
        <function-ref name="setPrescaler" scoped="" ref="0x407049f0"/>
        <function-ref name="isEnabled" scoped="" ref="0x40704ad0"/>
        <function-ref name="setChannel" scoped="" ref="0x40704bb0"/>
        <function-ref name="enableAdc" scoped="" ref="0x40704c90"/>
        <function-ref name="setAdlar" scoped="" ref="0x40704d70"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40704e50"/>
        <function-ref name="isComplete" scoped="" ref="0x40717010"/>
        <function-ref name="cancel" scoped="" ref="0x407170f0"/>
        <function-ref name="disableAdc" scoped="" ref="0x407171d0"/>
        <function-ref name="getRef" scoped="" ref="0x407172b0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40717390"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x407174f0"/>
        <function-ref name="startConversion" scoped="" ref="0x407175d0"/>
        <function-ref name="isStarted" scoped="" ref="0x407176b0"/>
        <function-ref name="getChannel" scoped="" ref="0x40717790"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40717870"/>
        <function-ref name="setRef" scoped="" ref="0x40717950"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40717a30"/>
        <function-ref name="setContinuous" scoped="" ref="0x40717b10"/>
        <function-ref name="getValue" scoped="" ref="0x40717bf0"/>
        <function-ref name="dataReady" scoped="" ref="0x40717cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x407162a8" loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x407162a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40716480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40770ae0" loc="92:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40770ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40770cc8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40770da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40785a50" loc="96:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40785a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40785c38"/>
        <function-ref name="configure" scoped="" ref="0x40785d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40770ee8" loc="93:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40770ee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407850e0"/>
        <function-ref name="requested" scoped="" ref="0x407851c0"/>
        <function-ref name="granted" scoped="" ref="0x407852a0"/>
        <function-ref name="isOwner" scoped="" ref="0x40785380"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40785460"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x407703a0" loc="91:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407703a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40770588"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40770668"/>
        <function-ref name="request" scoped="" ref="0x40770748"/>
        <function-ref name="granted" scoped="" ref="0x40770828"/>
        <function-ref name="isOwner" scoped="" ref="0x40770908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x407855a0" loc="94:/opt/tinyos-2.x/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x407855a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40785778"/>
        <function-ref name="userId" scoped="" ref="0x40785858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ee6708" loc="44:/opt/tinyos-2.x/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40ee6708"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ee68e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x40ee6a40" loc="45:/opt/tinyos-2.x/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x40ee6a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40ee6c18"/>
        <function-ref name="isEmpty" scoped="" ref="0x40ee6cf8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40ee6dd8"/>
        <function-ref name="dequeue" scoped="" ref="0x40ee6eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40ee33a8" loc="55:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40ee33a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40ee3590"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40ee3670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40ee2338" loc="60:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40ee2338"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40ee2520"/>
        <function-ref name="configure" scoped="" ref="0x40ee2600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40ee2760" loc="61:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40ee2760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40ee2938"/>
        <function-ref name="isEmpty" scoped="" ref="0x40ee2a18"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40ee2af8"/>
        <function-ref name="dequeue" scoped="" ref="0x40ee2bd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40ee37b0" loc="56:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ee37b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ee3988"/>
        <function-ref name="requested" scoped="" ref="0x40ee3a68"/>
        <function-ref name="granted" scoped="" ref="0x40ee3b48"/>
        <function-ref name="isOwner" scoped="" ref="0x40ee3c28"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40ee3d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ee2d18" loc="62:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40ee2d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ee2ef0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40ee1010"/>
        <function-ref name="led1On" scoped="" ref="0x40ee10f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40ee11d0"/>
        <function-ref name="led3Off" scoped="" ref="0x40ee12b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40ee1390"/>
        <function-ref name="get" scoped="" ref="0x40ee1470"/>
        <function-ref name="led1Off" scoped="" ref="0x40ee1550"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40ee1630"/>
        <function-ref name="led3On" scoped="" ref="0x40ee1710"/>
        <function-ref name="led0On" scoped="" ref="0x40ee17f0"/>
        <function-ref name="led2Off" scoped="" ref="0x40ee18d0"/>
        <function-ref name="led2On" scoped="" ref="0x40ee19b0"/>
        <function-ref name="set" scoped="" ref="0x40ee1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40ee5bc0" loc="54:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40ee5bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ee5da8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40ee5e88"/>
        <function-ref name="request" scoped="" ref="0x40ee3010"/>
        <function-ref name="granted" scoped="" ref="0x40ee30f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40ee31d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40ee3e48" loc="57:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40ee3e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40ee2050"/>
        <function-ref name="userId" scoped="" ref="0x40ee2130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40ee1c90" loc="75:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40ee1c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ee1e68"/>
        <function-ref name="runTask" scoped="" ref="0x40ee0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40783de8" loc="72:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40783de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40782010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40782150" loc="73:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40782150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40782328"/>
        <function-ref name="requested" scoped="" ref="0x40782408"/>
        <function-ref name="granted" scoped="" ref="0x407824e8"/>
        <function-ref name="isOwner" scoped="" ref="0x407825c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x407826a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x407839f0" loc="70:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x407839f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40783bc8"/>
        <function-ref name="stop" scoped="" ref="0x40783ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x407827e8" loc="74:/opt/tinyos-2.x/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x407827e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x407829c0"/>
        <function-ref name="userId" scoped="" ref="0x40782aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40effbf0" loc="62:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40effbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40effdc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40efff08" loc="63:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40efff08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40efe0f0"/>
        <function-ref name="requested" scoped="" ref="0x40efe1d0"/>
        <function-ref name="granted" scoped="" ref="0x40efe2b0"/>
        <function-ref name="isOwner" scoped="" ref="0x40efe390"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40efe470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40eff7f8" loc="60:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40eff7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40eff9d0"/>
        <function-ref name="stop" scoped="" ref="0x40effab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40efe5b0" loc="64:/opt/tinyos-2.x/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40efe5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40efe788"/>
        <function-ref name="userId" scoped="" ref="0x40efe868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x4079b088" loc="54:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x4079b088"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x4079b7d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x407873d8" loc="48:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x407873d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40787a00"/>
        <function-ref name="readDone" scoped="" ref="0x40787c58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40786390" loc="49:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40786390"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407869d8"/>
        <function-ref name="readDone" scoped="" ref="0x40786c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x4079c8b8" loc="53:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x4079c8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x4079ca90"/>
        <function-ref name="getChannel" scoped="" ref="0x4079cb70"/>
        <function-ref name="getPrescaler" scoped="" ref="0x4079cc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x4079c040" loc="52:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4079c040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4079c218"/>
        <function-ref name="cancel" scoped="" ref="0x4079c2f8"/>
        <function-ref name="dataReady" scoped="" ref="0x4079c3d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x407a9c70" loc="104:/opt/tinyos-2.x/tos/chips/atm1281/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x407a9c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x407a9e48"/>
        <function-ref name="runTask" scoped="" ref="0x407a9f28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x40789e30" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x40789e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x407b3590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x407b25d8" loc="53:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x407b25d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x407b2d28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x407b10c0" loc="54:/opt/tinyos-2.x/tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407b10c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407b1810"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b1d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b1a88"/>
        <function-ref name="overflow" scoped="" ref="0x407c0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x407bc268" loc="63:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="BusyWaitMicroC.CounterMicro16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x407bc268"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407bc9b8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407bcea8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407bcc30"/>
        <function-ref name="overflow" scoped="" ref="0x407ba150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407bd010" loc="62:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="BusyWaitMicroC.CounterMicro16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407bd010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407bd760"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407bdc50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407bd9d8"/>
        <function-ref name="overflow" scoped="" ref="0x407bdec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407bad88" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu16C.nc">
      <component-ref qname="CounterMcu16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407bad88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407b74e8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407b79d8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407b7760"/>
        <function-ref name="overflow" scoped="" ref="0x407b7c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x407b6ec0" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x407b6ec0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407cd0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407cd320" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407cd320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407cda70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407cc010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407cdce8"/>
        <function-ref name="overflow" scoped="" ref="0x407cc288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x407cc558" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounterP.nc">
      <component-ref qname="CounterMcu16C.AtmegaCounterP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x407cc558"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407c9010"/>
        <function-ref name="test" scoped="" ref="0x407ca350"/>
        <function-ref name="get" scoped="" ref="0x407ccba0"/>
        <function-ref name="reset" scoped="" ref="0x407ca5c8"/>
        <function-ref name="getMode" scoped="" ref="0x407c92b0"/>
        <function-ref name="overflow" scoped="" ref="0x407ca0d8"/>
        <function-ref name="isOn" scoped="" ref="0x407cad30"/>
        <function-ref name="set" scoped="" ref="0x407cce18"/>
        <function-ref name="start" scoped="" ref="0x407ca840"/>
        <function-ref name="stop" scoped="" ref="0x407caab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407d7010" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x407d7010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407d6a68"/>
        <function-ref name="test" scoped="" ref="0x407d7de8"/>
        <function-ref name="fired" scoped="" ref="0x407d7b70"/>
        <function-ref name="get" scoped="" ref="0x407d7658"/>
        <function-ref name="reset" scoped="" ref="0x407d6088"/>
        <function-ref name="getMode" scoped="" ref="0x407d6d08"/>
        <function-ref name="isOn" scoped="" ref="0x407d67f0"/>
        <function-ref name="set" scoped="" ref="0x407d78d0"/>
        <function-ref name="start" scoped="" ref="0x407d6300"/>
        <function-ref name="stop" scoped="" ref="0x407d6578"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407c8858" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407c8858"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407c32c0"/>
        <function-ref name="test" scoped="" ref="0x407c5648"/>
        <function-ref name="get" scoped="" ref="0x407c8ea0"/>
        <function-ref name="reset" scoped="" ref="0x407c58c0"/>
        <function-ref name="getMode" scoped="" ref="0x407c3560"/>
        <function-ref name="overflow" scoped="" ref="0x407c53d0"/>
        <function-ref name="isOn" scoped="" ref="0x407c3048"/>
        <function-ref name="set" scoped="" ref="0x407c5130"/>
        <function-ref name="start" scoped="" ref="0x407c5b38"/>
        <function-ref name="stop" scoped="" ref="0x407c5db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407c3c28" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1C.nc">
      <component-ref qname="HplAtmRfa1Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x407c3c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407d9698"/>
        <function-ref name="test" scoped="" ref="0x407c2a28"/>
        <function-ref name="fired" scoped="" ref="0x407c27b0"/>
        <function-ref name="force" scoped="" ref="0x407d9bb0"/>
        <function-ref name="get" scoped="" ref="0x407c2298"/>
        <function-ref name="reset" scoped="" ref="0x407c2ca0"/>
        <function-ref name="getMode" scoped="" ref="0x407d9938"/>
        <function-ref name="isOn" scoped="" ref="0x407d9420"/>
        <function-ref name="set" scoped="" ref="0x407c2510"/>
        <function-ref name="start" scoped="" ref="0x407c2f18"/>
        <function-ref name="stop" scoped="" ref="0x407d91a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x407d0978" loc="42:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x407d0978"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407e5418"/>
        <function-ref name="test" scoped="" ref="0x407cf7a0"/>
        <function-ref name="fired" scoped="" ref="0x407cf528"/>
        <function-ref name="force" scoped="" ref="0x407e5930"/>
        <function-ref name="get" scoped="" ref="0x407cf010"/>
        <function-ref name="reset" scoped="" ref="0x407cfa18"/>
        <function-ref name="getMode" scoped="" ref="0x407e56b8"/>
        <function-ref name="isOn" scoped="" ref="0x407e51a0"/>
        <function-ref name="set" scoped="" ref="0x407cf288"/>
        <function-ref name="start" scoped="" ref="0x407cfc90"/>
        <function-ref name="stop" scoped="" ref="0x407cff08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x407df470" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x407df470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCapture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407ddee0"/>
        <function-ref name="test" scoped="" ref="0x407dd288"/>
        <function-ref name="fired" scoped="" ref="0x407dd010"/>
        <function-ref name="get" scoped="" ref="0x407dfab8"/>
        <function-ref name="reset" scoped="" ref="0x407dd500"/>
        <function-ref name="getMode" scoped="" ref="0x407dc1c0"/>
        <function-ref name="isOn" scoped="" ref="0x407ddc68"/>
        <function-ref name="set" scoped="" ref="0x407dfd30"/>
        <function-ref name="start" scoped="" ref="0x407dd778"/>
        <function-ref name="stop" scoped="" ref="0x407dd9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x407dc478" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x407dc478"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x407dc650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x407e5d28" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x407e5d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407e37b0"/>
        <function-ref name="test" scoped="" ref="0x407e4b20"/>
        <function-ref name="fired" scoped="" ref="0x407e48a8"/>
        <function-ref name="force" scoped="" ref="0x407e3cc8"/>
        <function-ref name="get" scoped="" ref="0x407e4390"/>
        <function-ref name="reset" scoped="" ref="0x407e4d98"/>
        <function-ref name="getMode" scoped="" ref="0x407e3a50"/>
        <function-ref name="isOn" scoped="" ref="0x407e3538"/>
        <function-ref name="set" scoped="" ref="0x407e4608"/>
        <function-ref name="start" scoped="" ref="0x407e3048"/>
        <function-ref name="stop" scoped="" ref="0x407e32c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x407dc868" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x407dc868"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x407dca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x407e1100" loc="44:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x407e1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407e0b50"/>
        <function-ref name="test" scoped="" ref="0x407e1ed8"/>
        <function-ref name="fired" scoped="" ref="0x407e1c60"/>
        <function-ref name="force" scoped="" ref="0x407df088"/>
        <function-ref name="get" scoped="" ref="0x407e1748"/>
        <function-ref name="reset" scoped="" ref="0x407e0170"/>
        <function-ref name="getMode" scoped="" ref="0x407e0df0"/>
        <function-ref name="isOn" scoped="" ref="0x407e08d8"/>
        <function-ref name="set" scoped="" ref="0x407e19c0"/>
        <function-ref name="start" scoped="" ref="0x407e03e8"/>
        <function-ref name="stop" scoped="" ref="0x407e0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x407d4878" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/HplAtmRfa1Timer1P.nc">
      <component-ref qname="HplAtmRfa1Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x407d4878"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x407d02e0"/>
        <function-ref name="test" scoped="" ref="0x407d1668"/>
        <function-ref name="get" scoped="" ref="0x407d4ec0"/>
        <function-ref name="reset" scoped="" ref="0x407d18e0"/>
        <function-ref name="getMode" scoped="" ref="0x407d0580"/>
        <function-ref name="overflow" scoped="" ref="0x407d13f0"/>
        <function-ref name="isOn" scoped="" ref="0x407d0068"/>
        <function-ref name="set" scoped="" ref="0x407d1150"/>
        <function-ref name="start" scoped="" ref="0x407d1b58"/>
        <function-ref name="stop" scoped="" ref="0x407d1dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x407b4868" loc="24:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x407b4868"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407b4ea0"/>
        <function-ref name="readDone" scoped="" ref="0x40838130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40838590" loc="26:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40838590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40838bc8"/>
        <function-ref name="readDone" scoped="" ref="0x40838e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x408371c0" loc="27:/opt/tinyos-2.x/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x408371c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x408373a8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40837488"/>
        <function-ref name="request" scoped="" ref="0x40837568"/>
        <function-ref name="granted" scoped="" ref="0x40837648"/>
        <function-ref name="isOwner" scoped="" ref="0x40837728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="calcTask" ref="0x40844328" loc="56:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="calcTask" scoped="" ref="0x40844328"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40844500"/>
        <function-ref name="runTask" scoped="" ref="0x408445e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x40833a88" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40833a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40833c60"/>
        <function-ref name="getChannel" scoped="" ref="0x40833d40"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40833e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AdcRaw" ref="0x4084ae70" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AdcRaw" scoped="" ref="0x4084ae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408494b8"/>
        <function-ref name="readDone" scoped="" ref="0x40849710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureBridge" ref="0x40849b10" loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureBridge" scoped="" ref="0x40849b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40849ce8"/>
        <function-ref name="isInput" scoped="" ref="0x40849dc8"/>
        <function-ref name="toggle" scoped="" ref="0x40849ea8"/>
        <function-ref name="isOutput" scoped="" ref="0x40847010"/>
        <function-ref name="get" scoped="" ref="0x408470f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408471d0"/>
        <function-ref name="set" scoped="" ref="0x408472b0"/>
        <function-ref name="clr" scoped="" ref="0x40847390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VoltageMilliVolts" ref="0x4084a180" loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="VoltageMilliVolts" scoped="" ref="0x4084a180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4084a7a8"/>
        <function-ref name="readDone" scoped="" ref="0x4084aa00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x408475f8" loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x408475f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40845110"/>
        <function-ref name="fired" scoped="" ref="0x408463a8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40846ab0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40846858"/>
        <function-ref name="getdt" scoped="" ref="0x408455c0"/>
        <function-ref name="gett0" scoped="" ref="0x40845368"/>
        <function-ref name="isRunning" scoped="" ref="0x40846600"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40847c20"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40846dd0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40847ea0"/>
        <function-ref name="stop" scoped="" ref="0x40846150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4084bda8" loc="45:/opt/tinyos-2.x/tos/system/TimerMilliC.nc">
      <component-ref qname="SingleVoltageC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4084bda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408528a8"/>
        <function-ref name="fired" scoped="" ref="0x40853b38"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40852268"/>
        <function-ref name="isOneShot" scoped="" ref="0x40852010"/>
        <function-ref name="getdt" scoped="" ref="0x40852d58"/>
        <function-ref name="gett0" scoped="" ref="0x40852b00"/>
        <function-ref name="isRunning" scoped="" ref="0x40853d90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408533e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40852588"/>
        <function-ref name="startOneShot" scoped="" ref="0x40853660"/>
        <function-ref name="stop" scoped="" ref="0x408538e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x4086a1e8" loc="92:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x4086a1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x4086a3d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4086a4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40869208" loc="96:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40869208"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x408693f0"/>
        <function-ref name="configure" scoped="" ref="0x408694d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x4086a5f0" loc="93:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4086a5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4086a7c8"/>
        <function-ref name="requested" scoped="" ref="0x4086a8a8"/>
        <function-ref name="granted" scoped="" ref="0x4086a988"/>
        <function-ref name="isOwner" scoped="" ref="0x4086aa68"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4086ab48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4084ea18" loc="91:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4084ea18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4084ec00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4084ece0"/>
        <function-ref name="request" scoped="" ref="0x4084edc0"/>
        <function-ref name="granted" scoped="" ref="0x4084eea0"/>
        <function-ref name="isOwner" scoped="" ref="0x4086a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x4086ac88" loc="94:/opt/tinyos-2.x/tos/system/FcfsArbiterC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x4086ac88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4086ae60"/>
        <function-ref name="userId" scoped="" ref="0x40869010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40f1ac98" loc="44:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40f1ac98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40f1ae70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x40f17010" loc="45:/opt/tinyos-2.x/tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FcfsQueue" scoped="" ref="0x40f17010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40f171e8"/>
        <function-ref name="isEmpty" scoped="" ref="0x40f172c8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40f173a8"/>
        <function-ref name="dequeue" scoped="" ref="0x40f17488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40f168b0" loc="55:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40f168b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40f16a98"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40f16b78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40f158b0" loc="60:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40f158b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40f15a98"/>
        <function-ref name="configure" scoped="" ref="0x40f15b78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40f15cd8" loc="61:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40f15cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40f15eb0"/>
        <function-ref name="isEmpty" scoped="" ref="0x40f4a010"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40f4a0f0"/>
        <function-ref name="dequeue" scoped="" ref="0x40f4a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40f16cb8" loc="56:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40f16cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40f16e90"/>
        <function-ref name="requested" scoped="" ref="0x40f15010"/>
        <function-ref name="granted" scoped="" ref="0x40f150f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40f151d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40f152b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40f4a310" loc="62:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40f4a310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40f4a4e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40f4a5c8"/>
        <function-ref name="led1On" scoped="" ref="0x40f4a6a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40f4a788"/>
        <function-ref name="led3Off" scoped="" ref="0x40f4a868"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40f4a948"/>
        <function-ref name="get" scoped="" ref="0x40f4aa28"/>
        <function-ref name="led1Off" scoped="" ref="0x40f4ab08"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40f4abe8"/>
        <function-ref name="led3On" scoped="" ref="0x40f4acc8"/>
        <function-ref name="led0On" scoped="" ref="0x40f4ada8"/>
        <function-ref name="led2Off" scoped="" ref="0x40f4ae88"/>
        <function-ref name="led2On" scoped="" ref="0x40f49010"/>
        <function-ref name="set" scoped="" ref="0x40f49170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40f16170" loc="54:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40f16170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40f16358"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40f16438"/>
        <function-ref name="request" scoped="" ref="0x40f16518"/>
        <function-ref name="granted" scoped="" ref="0x40f165f8"/>
        <function-ref name="isOwner" scoped="" ref="0x40f166d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40f153f0" loc="57:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40f153f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40f155c8"/>
        <function-ref name="userId" scoped="" ref="0x40f156a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40f492f0" loc="75:/opt/tinyos-2.x/tos/system/ArbiterP.nc">
      <component-ref qname="VoltageArbiterP.FcfsArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40f492f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40f494c8"/>
        <function-ref name="runTask" scoped="" ref="0x40f495a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x408674d8" loc="19:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
      <component-ref qname="VoltageArbiterP.MultiplexedReadC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x408674d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40867b10"/>
        <function-ref name="readDone" scoped="" ref="0x40867d78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40866170" loc="21:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
      <component-ref qname="VoltageArbiterP.MultiplexedReadC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40866170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40866798"/>
        <function-ref name="readDone" scoped="" ref="0x408669f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40866d60" loc="22:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
      <component-ref qname="VoltageArbiterP.MultiplexedReadC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40866d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40873010"/>
        <function-ref name="immediateRequest" scoped="" ref="0x408730f0"/>
        <function-ref name="request" scoped="" ref="0x408731d0"/>
        <function-ref name="granted" scoped="" ref="0x408732b0"/>
        <function-ref name="isOwner" scoped="" ref="0x40873390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x408734d0" loc="23:/opt/tinyos-2.x/tos/system/MultiplexedReadC.nc">
      <component-ref qname="VoltageArbiterP.MultiplexedReadC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x408734d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x408736a8"/>
        <function-ref name="userId" scoped="" ref="0x40873788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x40888270" loc="12:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x40888270"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x408889c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408876e0" loc="14:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408876e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408878b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Voltage" ref="0x4088b530" loc="10:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Voltage" scoped="" ref="0x4088b530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4088bb58"/>
        <function-ref name="readDone" scoped="" ref="0x4088bdb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Switch" ref="0x406b6818" loc="9:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Switch" scoped="" ref="0x406b6818"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406b6e40"/>
        <function-ref name="readDone" scoped="" ref="0x4088b0b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40889118" loc="11:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40889118"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x408892f0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x408893d0"/>
        <function-ref name="led1On" scoped="" ref="0x408894b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40889590"/>
        <function-ref name="led3Off" scoped="" ref="0x40889670"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40889750"/>
        <function-ref name="get" scoped="" ref="0x40889830"/>
        <function-ref name="led1Off" scoped="" ref="0x40889910"/>
        <function-ref name="led3Toggle" scoped="" ref="0x408899f0"/>
        <function-ref name="led3On" scoped="" ref="0x40889ad0"/>
        <function-ref name="led0On" scoped="" ref="0x40889bb0"/>
        <function-ref name="led2Off" scoped="" ref="0x40889c90"/>
        <function-ref name="led2On" scoped="" ref="0x40889d70"/>
        <function-ref name="set" scoped="" ref="0x40889ed0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x40888c78" loc="13:/opt/tinyos-2.x/tos/platforms/ucmini/BatteryWarningP.nc">
      <component-ref qname="BatteryWarningP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x40888c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40888e50"/>
        <function-ref name="isInput" scoped="" ref="0x40887010"/>
        <function-ref name="toggle" scoped="" ref="0x408870f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408871d0"/>
        <function-ref name="get" scoped="" ref="0x408872b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40887390"/>
        <function-ref name="set" scoped="" ref="0x40887470"/>
        <function-ref name="clr" scoped="" ref="0x40887550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x406b35c0" loc="42:/opt/tinyos-2.x/tos/platforms/ucmini/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x406b35c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406b3798"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406b3878"/>
        <function-ref name="led1On" scoped="" ref="0x406b3958"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406b3a38"/>
        <function-ref name="led3Off" scoped="" ref="0x406b3b18"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406b3bf8"/>
        <function-ref name="get" scoped="" ref="0x406b3cd8"/>
        <function-ref name="led1Off" scoped="" ref="0x406b3db8"/>
        <function-ref name="led3Toggle" scoped="" ref="0x406b3e98"/>
        <function-ref name="led3On" scoped="" ref="0x40896010"/>
        <function-ref name="led0On" scoped="" ref="0x408960f0"/>
        <function-ref name="led2Off" scoped="" ref="0x408961d0"/>
        <function-ref name="led2On" scoped="" ref="0x408962b0"/>
        <function-ref name="set" scoped="" ref="0x40896410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x40896ee0" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x40896ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408930e0"/>
        <function-ref name="isInput" scoped="" ref="0x408931c0"/>
        <function-ref name="toggle" scoped="" ref="0x408932a0"/>
        <function-ref name="isOutput" scoped="" ref="0x40893380"/>
        <function-ref name="get" scoped="" ref="0x40893460"/>
        <function-ref name="makeOutput" scoped="" ref="0x40893540"/>
        <function-ref name="set" scoped="" ref="0x40893620"/>
        <function-ref name="clr" scoped="" ref="0x40893700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led3" ref="0x40892cd0" loc="42:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led3" scoped="" ref="0x40892cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40892ea8"/>
        <function-ref name="isInput" scoped="" ref="0x40891010"/>
        <function-ref name="toggle" scoped="" ref="0x408910f0"/>
        <function-ref name="isOutput" scoped="" ref="0x408911d0"/>
        <function-ref name="get" scoped="" ref="0x408912b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40891390"/>
        <function-ref name="set" scoped="" ref="0x40891470"/>
        <function-ref name="clr" scoped="" ref="0x40891550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x408938f0" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x408938f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40893ac8"/>
        <function-ref name="isInput" scoped="" ref="0x40893ba8"/>
        <function-ref name="toggle" scoped="" ref="0x40893c88"/>
        <function-ref name="isOutput" scoped="" ref="0x40893d68"/>
        <function-ref name="get" scoped="" ref="0x40893e48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40893f28"/>
        <function-ref name="set" scoped="" ref="0x40892018"/>
        <function-ref name="clr" scoped="" ref="0x408920f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x408916f0" loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408916f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408918c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x408922e8" loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x408922e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408924c0"/>
        <function-ref name="isInput" scoped="" ref="0x408925a0"/>
        <function-ref name="toggle" scoped="" ref="0x40892680"/>
        <function-ref name="isOutput" scoped="" ref="0x40892760"/>
        <function-ref name="get" scoped="" ref="0x40892840"/>
        <function-ref name="makeOutput" scoped="" ref="0x40892920"/>
        <function-ref name="set" scoped="" ref="0x40892a00"/>
        <function-ref name="clr" scoped="" ref="0x40892ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x408a9c60" loc="50:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x408a9c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a9e38"/>
        <function-ref name="isInput" scoped="" ref="0x408a9f18"/>
        <function-ref name="toggle" scoped="" ref="0x408a8010"/>
        <function-ref name="isOutput" scoped="" ref="0x408a80f0"/>
        <function-ref name="get" scoped="" ref="0x408a81d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a82b0"/>
        <function-ref name="set" scoped="" ref="0x408a8390"/>
        <function-ref name="clr" scoped="" ref="0x408a8470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led3" ref="0x408a7a48" loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led3" scoped="" ref="0x408a7a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a7c20"/>
        <function-ref name="isInput" scoped="" ref="0x408a7d00"/>
        <function-ref name="toggle" scoped="" ref="0x408a7de0"/>
        <function-ref name="isOutput" scoped="" ref="0x408a7ec0"/>
        <function-ref name="get" scoped="" ref="0x408a6010"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a60f0"/>
        <function-ref name="set" scoped="" ref="0x408a61d0"/>
        <function-ref name="clr" scoped="" ref="0x408a62b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40894850" loc="46:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40894850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40894a28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x408a8660" loc="51:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x408a8660"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a8838"/>
        <function-ref name="isInput" scoped="" ref="0x408a8918"/>
        <function-ref name="toggle" scoped="" ref="0x408a89f8"/>
        <function-ref name="isOutput" scoped="" ref="0x408a8ad8"/>
        <function-ref name="get" scoped="" ref="0x408a8bb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a8c98"/>
        <function-ref name="set" scoped="" ref="0x408a8d78"/>
        <function-ref name="clr" scoped="" ref="0x408a8e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40894b98" loc="47:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40894b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40894d70"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40894e50"/>
        <function-ref name="led1On" scoped="" ref="0x408a9010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x408a90f0"/>
        <function-ref name="led3Off" scoped="" ref="0x408a91d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x408a92b0"/>
        <function-ref name="get" scoped="" ref="0x408a9390"/>
        <function-ref name="led1Off" scoped="" ref="0x408a9470"/>
        <function-ref name="led3Toggle" scoped="" ref="0x408a9550"/>
        <function-ref name="led3On" scoped="" ref="0x408a9630"/>
        <function-ref name="led0On" scoped="" ref="0x408a9710"/>
        <function-ref name="led2Off" scoped="" ref="0x408a97f0"/>
        <function-ref name="led2On" scoped="" ref="0x408a98d0"/>
        <function-ref name="set" scoped="" ref="0x408a9a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x408a7060" loc="52:/opt/tinyos-2.x/tos/platforms/ucmini/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x408a7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408a7238"/>
        <function-ref name="isInput" scoped="" ref="0x408a7318"/>
        <function-ref name="toggle" scoped="" ref="0x408a73f8"/>
        <function-ref name="isOutput" scoped="" ref="0x408a74d8"/>
        <function-ref name="get" scoped="" ref="0x408a75b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x408a7698"/>
        <function-ref name="set" scoped="" ref="0x408a7778"/>
        <function-ref name="clr" scoped="" ref="0x408a7858"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x408aa330" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <component-ref qname="HplSerialAutoControlC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x408aa330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408aa508"/>
        <function-ref name="disable" scoped="" ref="0x408aa5e8"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x408aa6c8"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x408aa7a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x408aa968" loc="36:/opt/tinyos-2.x/tos/platforms/ucmini/HplSerialAutoControlC.nc">
      <component-ref qname="HplSerialAutoControlC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GeneralIO" scoped="" ref="0x408aa968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408aab40"/>
        <function-ref name="isInput" scoped="" ref="0x408aac20"/>
        <function-ref name="toggle" scoped="" ref="0x408aad00"/>
        <function-ref name="isOutput" scoped="" ref="0x408aade0"/>
        <function-ref name="get" scoped="" ref="0x408aaec0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408ad010"/>
        <function-ref name="set" scoped="" ref="0x408ad0f0"/>
        <function-ref name="clr" scoped="" ref="0x408ad1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x408adb98" loc="37:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChange0C.nc">
      <component-ref qname="AtmegaPinChange0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x408adb98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408add70"/>
        <function-ref name="disable" scoped="" ref="0x408ade50"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x408c4010"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x408c40f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtmegaPinChange" ref="0x408bc068" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange0C.nc">
      <component-ref qname="HplAtmegaPinChange0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x408bc068"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtmegaPinChange"/>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x408bc240"/>
        <function-ref name="fired" scoped="" ref="0x408bc320"/>
        <function-ref name="disable" scoped="" ref="0x408bc400"/>
        <function-ref name="isEnabled" scoped="" ref="0x408bc4e0"/>
        <function-ref name="reset" scoped="" ref="0x408bc5c0"/>
        <function-ref name="setMask" scoped="" ref="0x408bc6a0"/>
        <function-ref name="enable" scoped="" ref="0x408bc780"/>
        <function-ref name="getPins" scoped="" ref="0x408bc860"/>
        <function-ref name="getMask" scoped="" ref="0x408bc940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtmegaPinChange" ref="0x408c2ab0" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <component-ref qname="AtmegaPinChange0C.AtmegaPinChangeP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtmegaPinChange" scoped="" ref="0x408c2ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtmegaPinChange"/>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x408c2c88"/>
        <function-ref name="fired" scoped="" ref="0x408c2d68"/>
        <function-ref name="disable" scoped="" ref="0x408c2e48"/>
        <function-ref name="isEnabled" scoped="" ref="0x408c2f28"/>
        <function-ref name="reset" scoped="" ref="0x408ce018"/>
        <function-ref name="setMask" scoped="" ref="0x408ce0f8"/>
        <function-ref name="enable" scoped="" ref="0x408ce1d8"/>
        <function-ref name="getPins" scoped="" ref="0x408ce2b8"/>
        <function-ref name="getMask" scoped="" ref="0x408ce398"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GpioInterrupt" ref="0x408ce590" loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/AtmegaPinChangeP.nc">
      <component-ref qname="AtmegaPinChange0C.AtmegaPinChangeP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="GpioInterrupt" scoped="" ref="0x408ce590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408ce778"/>
        <function-ref name="disable" scoped="" ref="0x408ce858"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x408ce938"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x408cea18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControl" ref="0x408d4b18" loc="34:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x408d4b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x408d4cf0"/>
        <function-ref name="stopDone" scoped="" ref="0x408d4dd0"/>
        <function-ref name="start" scoped="" ref="0x408d4eb0"/>
        <function-ref name="stop" scoped="" ref="0x408ec010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SoftwareInit" ref="0x408eb400" loc="37:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x408eb400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408eb5d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="turnOff" ref="0x408e95e8" loc="57:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="turnOff" scoped="" ref="0x408e95e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x408e97c0"/>
        <function-ref name="runTask" scoped="" ref="0x408e98a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="turnOn" ref="0x408ebef0" loc="46:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="turnOn" scoped="" ref="0x408ebef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x408ea0e0"/>
        <function-ref name="runTask" scoped="" ref="0x408ea1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlInt" ref="0x408ec280" loc="35:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ControlInt" scoped="" ref="0x408ec280"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x408ec458"/>
        <function-ref name="disable" scoped="" ref="0x408ec538"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x408ec618"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x408ec6f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ControlPin" ref="0x408ec940" loc="36:/opt/tinyos-2.x/tos/platforms/ucmini/SerialAutoControlP.nc">
      <component-ref qname="SerialAutoControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ControlPin" scoped="" ref="0x408ec940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408ecb18"/>
        <function-ref name="isInput" scoped="" ref="0x408ecbf8"/>
        <function-ref name="toggle" scoped="" ref="0x408eccd8"/>
        <function-ref name="isOutput" scoped="" ref="0x408ecdb8"/>
        <function-ref name="get" scoped="" ref="0x408ece98"/>
        <function-ref name="makeOutput" scoped="" ref="0x408eb010"/>
        <function-ref name="set" scoped="" ref="0x408eb0f0"/>
        <function-ref name="clr" scoped="" ref="0x408eb1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x408edee8" loc="46:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x408edee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x408fa0e0"/>
        <function-ref name="stopDone" scoped="" ref="0x408fa1c0"/>
        <function-ref name="start" scoped="" ref="0x408fa2a0"/>
        <function-ref name="stop" scoped="" ref="0x408fa380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x4091bbe0" loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x4091bbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4091bdb8"/>
        <function-ref name="getPayload" scoped="" ref="0x4091be98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408f9010"/>
        <function-ref name="cancel" scoped="" ref="0x408f90f0"/>
        <function-ref name="sendDone" scoped="" ref="0x408f91d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40911068" loc="49:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40911068"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40911240"/>
        <function-ref name="payloadLength" scoped="" ref="0x40911320"/>
        <function-ref name="getPayload" scoped="" ref="0x40911400"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409114e0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x409115c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40919100" loc="48:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40919100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x409192d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40916548" loc="53:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40916548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40916720"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40916800"/>
        <function-ref name="led1On" scoped="" ref="0x409168e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x409169c0"/>
        <function-ref name="led3Off" scoped="" ref="0x40916aa0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40916b80"/>
        <function-ref name="get" scoped="" ref="0x40916c60"/>
        <function-ref name="led1Off" scoped="" ref="0x40916d40"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40916e20"/>
        <function-ref name="led3On" scoped="" ref="0x40916f00"/>
        <function-ref name="led0On" scoped="" ref="0x40924010"/>
        <function-ref name="led2Off" scoped="" ref="0x409240f0"/>
        <function-ref name="led2On" scoped="" ref="0x409241d0"/>
        <function-ref name="set" scoped="" ref="0x40924330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40916010" loc="51:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40916010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x409161e8"/>
        <function-ref name="noAck" scoped="" ref="0x409162c8"/>
        <function-ref name="wasAcked" scoped="" ref="0x409163a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40927df8" loc="50:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40927df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40918010"/>
        <function-ref name="source" scoped="" ref="0x409180f0"/>
        <function-ref name="address" scoped="" ref="0x409181d0"/>
        <function-ref name="destination" scoped="" ref="0x409182b0"/>
        <function-ref name="setSource" scoped="" ref="0x40918390"/>
        <function-ref name="setDestination" scoped="" ref="0x40918470"/>
        <function-ref name="type" scoped="" ref="0x40918550"/>
        <function-ref name="setType" scoped="" ref="0x40918630"/>
        <function-ref name="isForMe" scoped="" ref="0x40918710"/>
        <function-ref name="setGroup" scoped="" ref="0x409187f0"/>
        <function-ref name="localGroup" scoped="" ref="0x409188d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40962ed0" loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40962ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x409610c0"/>
        <function-ref name="getPayload" scoped="" ref="0x409611a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40961280"/>
        <function-ref name="cancel" scoped="" ref="0x40961360"/>
        <function-ref name="sendDone" scoped="" ref="0x40961440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x409615a0" loc="55:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x409615a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40961778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40921be8" loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40921be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40921dd0"/>
        <function-ref name="getPayload" scoped="" ref="0x40921eb0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40920010"/>
        <function-ref name="cancel" scoped="" ref="0x409200f0"/>
        <function-ref name="sendDone" scoped="" ref="0x409201d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40962310" loc="50:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40962310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x409624e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x409625c8"/>
        <function-ref name="getPayload" scoped="" ref="0x409626a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40962788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40962868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x409203a8" loc="48:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x409203a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40920590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x409629a8" loc="51:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x409629a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40962b80"/>
        <function-ref name="noAck" scoped="" ref="0x40962c60"/>
        <function-ref name="wasAcked" scoped="" ref="0x40962d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x409206d0" loc="49:/opt/tinyos-2.x/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x409206d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x409208a8"/>
        <function-ref name="source" scoped="" ref="0x40920988"/>
        <function-ref name="address" scoped="" ref="0x40920a68"/>
        <function-ref name="destination" scoped="" ref="0x40920b48"/>
        <function-ref name="setSource" scoped="" ref="0x40920c28"/>
        <function-ref name="setDestination" scoped="" ref="0x40920d08"/>
        <function-ref name="type" scoped="" ref="0x40920de8"/>
        <function-ref name="setType" scoped="" ref="0x40920ec8"/>
        <function-ref name="isForMe" scoped="" ref="0x40962010"/>
        <function-ref name="setGroup" scoped="" ref="0x409620f0"/>
        <function-ref name="localGroup" scoped="" ref="0x409621d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40960d10" loc="50:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40960d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40960ee8"/>
        <function-ref name="stopDone" scoped="" ref="0x4095d010"/>
        <function-ref name="start" scoped="" ref="0x4095d0f0"/>
        <function-ref name="stop" scoped="" ref="0x4095d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x4095dc20" loc="52:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4095dc20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4095ddf8"/>
        <function-ref name="getPayload" scoped="" ref="0x4095ded8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4095c010"/>
        <function-ref name="cancel" scoped="" ref="0x4095c0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x4095c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40960978" loc="49:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40960978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40960b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4095d618" loc="51:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4095d618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4095d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40975840" loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40975840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40975a18"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40975af8"/>
        <function-ref name="led1On" scoped="" ref="0x40975bd8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40975cb8"/>
        <function-ref name="led3Off" scoped="" ref="0x40975d98"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40975e78"/>
        <function-ref name="get" scoped="" ref="0x4095b010"/>
        <function-ref name="led1Off" scoped="" ref="0x4095b0f0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x4095b1d0"/>
        <function-ref name="led3On" scoped="" ref="0x4095b2b0"/>
        <function-ref name="led0On" scoped="" ref="0x4095b390"/>
        <function-ref name="led2Off" scoped="" ref="0x4095b470"/>
        <function-ref name="led2On" scoped="" ref="0x4095b550"/>
        <function-ref name="set" scoped="" ref="0x4095b6b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x40975338" loc="55:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40975338"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40975510"/>
        <function-ref name="offset" scoped="" ref="0x409755f0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x409756d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x409810f8" loc="66:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x409810f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x409812d0"/>
        <function-ref name="stopDone" scoped="" ref="0x409813b0"/>
        <function-ref name="start" scoped="" ref="0x40981490"/>
        <function-ref name="stop" scoped="" ref="0x40981570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x409a57a0" loc="332:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x409a57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409a5978"/>
        <function-ref name="runTask" scoped="" ref="0x409a5a58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40993548" loc="74:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40993548"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40993720"/>
        <function-ref name="stop" scoped="" ref="0x40993800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x409a4a18" loc="191:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x409a4a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409a4bf0"/>
        <function-ref name="runTask" scoped="" ref="0x409a4cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40983d48" loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40983d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40983f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x40992518" loc="75:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x40992518"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x409926f0"/>
        <function-ref name="flush" scoped="" ref="0x409927d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x409a6010" loc="322:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x409a6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409a61e8"/>
        <function-ref name="runTask" scoped="" ref="0x409a62c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x40977c18" loc="72:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40977c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40977df0"/>
        <function-ref name="resetSend" scoped="" ref="0x40977ed0"/>
        <function-ref name="dataReceived" scoped="" ref="0x4097f010"/>
        <function-ref name="resetReceive" scoped="" ref="0x4097f0f0"/>
        <function-ref name="putData" scoped="" ref="0x4097f1d0"/>
        <function-ref name="putDone" scoped="" ref="0x4097f2b0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x4097f390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4097f500" loc="73:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4097f500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4097f6d8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4097f7b8"/>
        <function-ref name="led1On" scoped="" ref="0x4097f898"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4097f978"/>
        <function-ref name="led3Off" scoped="" ref="0x4097fa58"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4097fb38"/>
        <function-ref name="get" scoped="" ref="0x4097fc18"/>
        <function-ref name="led1Off" scoped="" ref="0x4097fcf8"/>
        <function-ref name="led3Toggle" scoped="" ref="0x4097fdd8"/>
        <function-ref name="led3On" scoped="" ref="0x4097feb8"/>
        <function-ref name="led0On" scoped="" ref="0x4097a010"/>
        <function-ref name="led2Off" scoped="" ref="0x4097a0f0"/>
        <function-ref name="led2On" scoped="" ref="0x4097a1d0"/>
        <function-ref name="set" scoped="" ref="0x4097a330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x409c2428" loc="341:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x409c2428"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409c2600"/>
        <function-ref name="runTask" scoped="" ref="0x409c26e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x4097d7f8" loc="67:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x4097d7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x4097d9d0"/>
        <function-ref name="nextByte" scoped="" ref="0x4097dab0"/>
        <function-ref name="startSend" scoped="" ref="0x4097db90"/>
        <function-ref name="sendCompleted" scoped="" ref="0x4097dc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x4097b948" loc="68:/opt/tinyos-2.x/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x4097b948"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x4097bb20"/>
        <function-ref name="byteReceived" scoped="" ref="0x4097bc00"/>
        <function-ref name="endPacket" scoped="" ref="0x4097bce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x40a35db0" loc="275:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x40a35db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a34010"/>
        <function-ref name="runTask" scoped="" ref="0x40a340f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40a37710" loc="51:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40a37710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a378f8"/>
        <function-ref name="getPayload" scoped="" ref="0x40a379d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40a37ab8"/>
        <function-ref name="cancel" scoped="" ref="0x40a37b98"/>
        <function-ref name="sendDone" scoped="" ref="0x40a37c78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x40a34270" loc="158:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x40a34270"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40a34448"/>
        <function-ref name="runTask" scoped="" ref="0x40a34528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40a37350" loc="50:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40a37350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40a37538"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x40a37ea0" loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x40a37ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x408dbde8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40a360c0"/>
        <function-ref name="offset" scoped="" ref="0x40a361a0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40a36280"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40a36e50" loc="57:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40a36e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a35050"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a35130"/>
        <function-ref name="led1On" scoped="" ref="0x40a35210"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a352f0"/>
        <function-ref name="led3Off" scoped="" ref="0x40a353d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a354b0"/>
        <function-ref name="get" scoped="" ref="0x40a35590"/>
        <function-ref name="led1Off" scoped="" ref="0x40a35670"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40a35750"/>
        <function-ref name="led3On" scoped="" ref="0x40a35830"/>
        <function-ref name="led0On" scoped="" ref="0x40a35910"/>
        <function-ref name="led2Off" scoped="" ref="0x40a359f0"/>
        <function-ref name="led2On" scoped="" ref="0x40a35ad0"/>
        <function-ref name="set" scoped="" ref="0x40a35c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x40a36898" loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40a36898"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40a36a70"/>
        <function-ref name="nextByte" scoped="" ref="0x40a36b50"/>
        <function-ref name="startSend" scoped="" ref="0x40a36c30"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40a36d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x40a363c0" loc="55:/opt/tinyos-2.x/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40a363c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40a36598"/>
        <function-ref name="byteReceived" scoped="" ref="0x40a36678"/>
        <function-ref name="endPacket" scoped="" ref="0x40a36758"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x40a299e8" loc="50:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40a299e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a29bc0"/>
        <function-ref name="receivedByte" scoped="" ref="0x40a29ca0"/>
        <function-ref name="receive" scoped="" ref="0x40a29d80"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40a29e60"/>
        <function-ref name="receiveDone" scoped="" ref="0x40a2f010"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40a2f0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40a2f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x40a33718" loc="48:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40a33718"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40a338f0"/>
        <function-ref name="resetSend" scoped="" ref="0x40a339d0"/>
        <function-ref name="dataReceived" scoped="" ref="0x40a33ab0"/>
        <function-ref name="resetReceive" scoped="" ref="0x40a33b90"/>
        <function-ref name="putData" scoped="" ref="0x40a33c70"/>
        <function-ref name="putDone" scoped="" ref="0x40a33d50"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40a33e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40a2f340" loc="51:/opt/tinyos-2.x/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40a2f340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40a2f518"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40a2f5f8"/>
        <function-ref name="led1On" scoped="" ref="0x40a2f6d8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40a2f7b8"/>
        <function-ref name="led3Off" scoped="" ref="0x40a2f898"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40a2f978"/>
        <function-ref name="get" scoped="" ref="0x40a2fa58"/>
        <function-ref name="led1Off" scoped="" ref="0x40a2fb38"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40a2fc18"/>
        <function-ref name="led3On" scoped="" ref="0x40a2fcf8"/>
        <function-ref name="led0On" scoped="" ref="0x40a2fdd8"/>
        <function-ref name="led2Off" scoped="" ref="0x40a2feb8"/>
        <function-ref name="led2On" scoped="" ref="0x40a2e010"/>
        <function-ref name="set" scoped="" ref="0x40a2e170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40a388f0" loc="42:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40a388f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a38ac8"/>
        <function-ref name="receive" scoped="" ref="0x40a38ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40a32a88" loc="41:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40a32a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a32c60"/>
        <function-ref name="receivedByte" scoped="" ref="0x40a32d40"/>
        <function-ref name="receive" scoped="" ref="0x40a32e20"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40a32f00"/>
        <function-ref name="receiveDone" scoped="" ref="0x40a3b010"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40a3b0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40a3b1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40a32608" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40a32608"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a327e0"/>
        <function-ref name="stop" scoped="" ref="0x40a328c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40a3a7a0" loc="41:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40a3a7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a3a978"/>
        <function-ref name="receive" scoped="" ref="0x40a3aa58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40a3ac20" loc="42:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40a3ac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a3adf8"/>
        <function-ref name="receivedByte" scoped="" ref="0x40a3aed8"/>
        <function-ref name="receive" scoped="" ref="0x40a57010"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40a570f0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40a571d0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40a572b0"/>
        <function-ref name="sendDone" scoped="" ref="0x40a57390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40a576f0" loc="43:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40a576f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a57e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a56350"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a560d8"/>
        <function-ref name="overflow" scoped="" ref="0x40a565c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40a3a330" loc="40:/opt/tinyos-2.x/tos/chips/atm128/Atm128Uart1C.nc">
      <component-ref qname="Atm128Uart1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40a3a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a3a508"/>
        <function-ref name="stop" scoped="" ref="0x40a3a5e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40a55e28" loc="50:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40a55e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a53050"/>
        <function-ref name="receive" scoped="" ref="0x40a53130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x40a53b28" loc="53:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x40a53b28"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a53d00"/>
        <function-ref name="stop" scoped="" ref="0x40a53de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a556d8" loc="48:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a556d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a558b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40a53290" loc="51:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40a53290"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40a53468"/>
        <function-ref name="receivedByte" scoped="" ref="0x40a53548"/>
        <function-ref name="receive" scoped="" ref="0x40a53628"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40a53708"/>
        <function-ref name="receiveDone" scoped="" ref="0x40a537e8"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40a538c8"/>
        <function-ref name="sendDone" scoped="" ref="0x40a539a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40a6f0a0" loc="56:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40a6f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a6f7f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a6fce0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a6fa68"/>
        <function-ref name="overflow" scoped="" ref="0x40a6e010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x40a71448" loc="55:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x40a71448"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40a71620"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40a71700"/>
        <function-ref name="rxDone" scoped="" ref="0x40a717e0"/>
        <function-ref name="txDone" scoped="" ref="0x40a718c0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40a719a0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40a71a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40a71b60"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40a71c40"/>
        <function-ref name="tx" scoped="" ref="0x40a71d20"/>
        <function-ref name="rx" scoped="" ref="0x40a71e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40a55a10" loc="49:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40a55a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a55be8"/>
        <function-ref name="stop" scoped="" ref="0x40a55cc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x40a71010" loc="54:/opt/tinyos-2.x/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart1C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x40a71010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a711e8"/>
        <function-ref name="stop" scoped="" ref="0x40a712c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40a7e508" loc="49:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40a7e508"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40a7e6e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40a7e7c0"/>
        <function-ref name="rxDone" scoped="" ref="0x40a7e8a0"/>
        <function-ref name="txDone" scoped="" ref="0x40a7e980"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40a7ea60"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40a7eb40"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40a7ec20"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40a7ed00"/>
        <function-ref name="tx" scoped="" ref="0x40a7ede0"/>
        <function-ref name="rx" scoped="" ref="0x40a7eec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40a7db80" loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40a7db80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40a7dd58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40a7de38"/>
        <function-ref name="rxDone" scoped="" ref="0x40a7df18"/>
        <function-ref name="txDone" scoped="" ref="0x40a7c010"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40a7c0f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40a7c1d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40a7c2b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40a7c390"/>
        <function-ref name="tx" scoped="" ref="0x40a7c470"/>
        <function-ref name="rx" scoped="" ref="0x40a7c550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40a7e010" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40a7e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a7e1e8"/>
        <function-ref name="stop" scoped="" ref="0x40a7e2c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40a7d178" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40a7d178"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a7d350"/>
        <function-ref name="stop" scoped="" ref="0x40a7d430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40a7d688" loc="52:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40a7d688"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a7d860"/>
        <function-ref name="stop" scoped="" ref="0x40a7d940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40a7fa80" loc="47:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40a7fa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a7fc58"/>
        <function-ref name="stop" scoped="" ref="0x40a7fd38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x40a7cd78" loc="114:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x40a7cd78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a9c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40a9ccd0" loc="117:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40a9ccd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40a9cea8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40a9b010"/>
        <function-ref name="rxDone" scoped="" ref="0x40a9b0f0"/>
        <function-ref name="txDone" scoped="" ref="0x40a9b1d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40a9b2b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40a9b390"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40a9b470"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40a9b550"/>
        <function-ref name="tx" scoped="" ref="0x40a9b630"/>
        <function-ref name="rx" scoped="" ref="0x40a9b710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x40a994b8" loc="124:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x40a994b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x40a99690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x40a9b920" loc="119:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x40a9b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a9baf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40a9a880" loc="122:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40a9a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40a9aa58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40a9ab38"/>
        <function-ref name="rxDone" scoped="" ref="0x40a9ac18"/>
        <function-ref name="txDone" scoped="" ref="0x40a9acf8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40a9add8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40a9aeb8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40a99010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40a990f0"/>
        <function-ref name="tx" scoped="" ref="0x40a991d0"/>
        <function-ref name="rx" scoped="" ref="0x40a992b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40a9c7b8" loc="116:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40a9c7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a9c990"/>
        <function-ref name="stop" scoped="" ref="0x40a9ca70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40a9bd70" loc="120:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40a9bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a9a010"/>
        <function-ref name="stop" scoped="" ref="0x40a9a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40a9a368" loc="121:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40a9a368"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a9a540"/>
        <function-ref name="stop" scoped="" ref="0x40a9a620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40a99888" loc="126:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40a99888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40a99a60"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40a99b40"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40a99c20"/>
        <function-ref name="actualMicro" scoped="" ref="0x40a99d00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40a99de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40a98010" loc="127:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40a98010"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40a981e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40a9c288" loc="115:/opt/tinyos-2.x/tos/chips/atm128rfa1/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40a9c288"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a9c460"/>
        <function-ref name="stop" scoped="" ref="0x40a9c540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40acd170" loc="41:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40acd170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40acd8c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40acddb0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40acdb38"/>
        <function-ref name="overflow" scoped="" ref="0x40acb048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40ac9ae8" loc="63:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40ac9ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ac7308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ac77f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ac7580"/>
        <function-ref name="overflow" scoped="" ref="0x40ac7a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40aca7f0" loc="62:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40aca7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404bc288"/>
            <typename><typedef-ref name="TMicro" ref="0x404bc450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ac9010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ac9500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ac9288"/>
        <function-ref name="overflow" scoped="" ref="0x40ac9778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40ac6890" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/CounterMcu32C.nc">
      <component-ref qname="CounterMcu32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40ac6890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ac3010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ac3500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ac3288"/>
        <function-ref name="overflow" scoped="" ref="0x40ac3778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40ae3078" loc="63:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMcu32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40ae3078"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ae37c8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ae3cb8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ae3a40"/>
        <function-ref name="overflow" scoped="" ref="0x40ae2010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40ae6dd8" loc="62:/opt/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMcu32C.TransformCounterC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40ae6dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T2mhz" ref="0x404bb060"/>
            <typename><typedef-ref name="TMcu" ref="0x404bb410"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ae4570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ae4a60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ae47e8"/>
        <function-ref name="overflow" scoped="" ref="0x40ae4cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x40ae1af8" loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x40ae1af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40ae1cd0"/>
        <function-ref name="offset" scoped="" ref="0x40ae1db0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40ae1e90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x40af7010" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40af7010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40af71e8"/>
        <function-ref name="getPayload" scoped="" ref="0x40af72c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40af73a8"/>
        <function-ref name="cancel" scoped="" ref="0x40af7488"/>
        <function-ref name="sendDone" scoped="" ref="0x40af7568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x40af76f0" loc="44:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40af76f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40af78c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40af7a38" loc="45:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40af7a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40af7c10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40af7cf0"/>
        <function-ref name="led1On" scoped="" ref="0x40af7dd0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40af7eb0"/>
        <function-ref name="led3Off" scoped="" ref="0x40af6010"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40af60f0"/>
        <function-ref name="get" scoped="" ref="0x40af61d0"/>
        <function-ref name="led1Off" scoped="" ref="0x40af62b0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40af6390"/>
        <function-ref name="led3On" scoped="" ref="0x40af6470"/>
        <function-ref name="led0On" scoped="" ref="0x40af6550"/>
        <function-ref name="led2Off" scoped="" ref="0x40af6630"/>
        <function-ref name="led2On" scoped="" ref="0x40af6710"/>
        <function-ref name="set" scoped="" ref="0x40af6870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendAck" ref="0x40af5218" loc="54:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendAck" scoped="" ref="0x40af5218"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40af53f0"/>
        <function-ref name="runTask" scoped="" ref="0x40af54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialPacketInfo" ref="0x40ad6a28" loc="38:/opt/tinyos-2.x/tos/platforms/ucmini/SerialResetP.nc">
      <component-ref qname="SerialResetP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40ad6a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40ad6c00"/>
        <function-ref name="offset" scoped="" ref="0x40ad6ce0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40ad6dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x40ae7240" loc="60:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x40ae7240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ae7418"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40ae8408" loc="57:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40ae8408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40ae85e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x40ae8d68" loc="59:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40ae8d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ae7010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x40ae87a0" loc="58:/opt/tinyos-2.x/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x40ae87a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ae8978"/>
        <function-ref name="taskLoop" scoped="" ref="0x40ae8a58"/>
        <function-ref name="runNextTask" scoped="" ref="0x40ae8b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x403b2330" loc="48:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x403b2330"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403b2508"/>
        <function-ref name="runTask" scoped="" ref="0x403b25e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x40357b58" loc="47:/opt/tinyos-2.x/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x40357b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40357d30"/>
        <function-ref name="taskLoop" scoped="" ref="0x40357e10"/>
        <function-ref name="runNextTask" scoped="" ref="0x40357ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40420010" loc="56:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40420010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x404201e8"/>
        <function-ref name="runTask" scoped="" ref="0x404202c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x40420c70" loc="57:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40420c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x40420e48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x40421738" loc="55:/opt/tinyos-2.x/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x40421738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40421910"/>
        <function-ref name="taskLoop" scoped="" ref="0x404219f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x40421ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x40b03060" loc="44:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x40b03060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b03238"/>
        <function-ref name="on" scoped="" ref="0x40b03318"/>
        <function-ref name="off" scoped="" ref="0x40b033f8"/>
        <function-ref name="set" scoped="" ref="0x40b034d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led3" ref="0x40b02380" loc="50:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led3" scoped="" ref="0x40b02380"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b02558"/>
        <function-ref name="on" scoped="" ref="0x40b02638"/>
        <function-ref name="off" scoped="" ref="0x40b02718"/>
        <function-ref name="set" scoped="" ref="0x40b027f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Green" ref="0x40b029b0" loc="68:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Green" scoped="" ref="0x40b029b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b02b88"/>
        <function-ref name="on" scoped="" ref="0x40b02c68"/>
        <function-ref name="off" scoped="" ref="0x40b02d48"/>
        <function-ref name="set" scoped="" ref="0x40b02e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Yellow" ref="0x40b00648" loc="77:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Yellow" scoped="" ref="0x40b00648"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b00820"/>
        <function-ref name="on" scoped="" ref="0x40b00900"/>
        <function-ref name="off" scoped="" ref="0x40b009e0"/>
        <function-ref name="set" scoped="" ref="0x40b00ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiLed" ref="0x40aff368" loc="85:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MultiLed" scoped="" ref="0x40aff368"/></type-interface>
      <instance>
        <interfacedef-ref qname="MultiLed"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40aff540"/>
        <function-ref name="toggle" scoped="" ref="0x40aff620"/>
        <function-ref name="get" scoped="" ref="0x40aff700"/>
        <function-ref name="on" scoped="" ref="0x40aff7e0"/>
        <function-ref name="set" scoped="" ref="0x40aff8c0"/>
        <function-ref name="off" scoped="" ref="0x40aff9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x40b03688" loc="46:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x40b03688"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b03860"/>
        <function-ref name="on" scoped="" ref="0x40b03940"/>
        <function-ref name="off" scoped="" ref="0x40b03a20"/>
        <function-ref name="set" scoped="" ref="0x40b03b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Red" ref="0x40b00010" loc="71:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Red" scoped="" ref="0x40b00010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b001e8"/>
        <function-ref name="on" scoped="" ref="0x40b002c8"/>
        <function-ref name="off" scoped="" ref="0x40b003a8"/>
        <function-ref name="set" scoped="" ref="0x40b00488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x40b03cb0" loc="48:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x40b03cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b03e88"/>
        <function-ref name="on" scoped="" ref="0x40b02010"/>
        <function-ref name="off" scoped="" ref="0x40b020f0"/>
        <function-ref name="set" scoped="" ref="0x40b021d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Orange" ref="0x40b00c80" loc="80:/opt/tinyos-2.x/tos/system/LedC.nc">
      <component-ref qname="LedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Orange" scoped="" ref="0x40b00c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b00e58"/>
        <function-ref name="on" scoped="" ref="0x40aff010"/>
        <function-ref name="off" scoped="" ref="0x40aff0f0"/>
        <function-ref name="set" scoped="" ref="0x40aff1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiLed" ref="0x40afc160" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <component-ref qname="PlatformLedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MultiLed" scoped="" ref="0x40afc160"/></type-interface>
      <instance>
        <interfacedef-ref qname="MultiLed"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40afc338"/>
        <function-ref name="toggle" scoped="" ref="0x40afc418"/>
        <function-ref name="get" scoped="" ref="0x40afc4f8"/>
        <function-ref name="on" scoped="" ref="0x40afc5d8"/>
        <function-ref name="set" scoped="" ref="0x40afc6b8"/>
        <function-ref name="off" scoped="" ref="0x40afc798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led" ref="0x40afcc00" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedC.nc">
      <component-ref qname="PlatformLedC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led" scoped="" ref="0x40afcc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40afcdd8"/>
        <function-ref name="on" scoped="" ref="0x40afceb8"/>
        <function-ref name="off" scoped="" ref="0x40afb010"/>
        <function-ref name="set" scoped="" ref="0x40afb0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MultiLed" ref="0x40afb9a0" loc="39:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedP.nc">
      <component-ref qname="PlatformLedP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MultiLed" scoped="" ref="0x40afb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MultiLed"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40afbb78"/>
        <function-ref name="toggle" scoped="" ref="0x40afbc58"/>
        <function-ref name="get" scoped="" ref="0x40afbd38"/>
        <function-ref name="on" scoped="" ref="0x40afbe18"/>
        <function-ref name="set" scoped="" ref="0x40afbef8"/>
        <function-ref name="off" scoped="" ref="0x40b1c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led" ref="0x40b1c478" loc="40:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedP.nc">
      <component-ref qname="PlatformLedP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led" scoped="" ref="0x40b1c478"/></type-interface>
      <instance>
        <interfacedef-ref qname="Led"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="toggle" scoped="" ref="0x40b1c650"/>
        <function-ref name="on" scoped="" ref="0x40b1c730"/>
        <function-ref name="off" scoped="" ref="0x40b1c810"/>
        <function-ref name="set" scoped="" ref="0x40b1c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b1caa0" loc="43:/opt/tinyos-2.x/tos/platforms/ucmini/PlatformLedP.nc">
      <component-ref qname="PlatformLedP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40b1caa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b1cc78"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b1cd58"/>
        <function-ref name="led1On" scoped="" ref="0x40b1ce38"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b1cf18"/>
        <function-ref name="led3Off" scoped="" ref="0x40b1b010"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b1b0f0"/>
        <function-ref name="get" scoped="" ref="0x40b1b1d0"/>
        <function-ref name="led1Off" scoped="" ref="0x40b1b2b0"/>
        <function-ref name="led3Toggle" scoped="" ref="0x40b1b390"/>
        <function-ref name="led3On" scoped="" ref="0x40b1b470"/>
        <function-ref name="led0On" scoped="" ref="0x40b1b550"/>
        <function-ref name="led2Off" scoped="" ref="0x40b1b630"/>
        <function-ref name="led2On" scoped="" ref="0x40b1b710"/>
        <function-ref name="set" scoped="" ref="0x40b1b870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b2ea50" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b2ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b2ec28"/>
        <function-ref name="stopDone" scoped="" ref="0x40b2ed08"/>
        <function-ref name="start" scoped="" ref="0x40b2ede8"/>
        <function-ref name="stop" scoped="" ref="0x40b2eec8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocol" ref="0x40b2b858" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40b2b858"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
          <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40b2ba30"/>
        <function-ref name="process" scoped="" ref="0x40b2bb10"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40b2bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcUart" ref="0x40b28ea0" loc="41:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40b28ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b2e0c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x40b2e1a0"/>
        <function-ref name="sendDone" scoped="" ref="0x40b2e280"/>
        <function-ref name="uartError" scoped="" ref="0x40b2e360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFramingOptions" ref="0x40b27ec8" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b27ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b1f818"/>
        <function-ref name="set" scoped="" ref="0x40b1f558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ppp" ref="0x40b21760" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40b21760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40b21938"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40b21a18"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40b21af8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40b21bd8"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40b21cb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppOptions" ref="0x40b27110" loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppOptions" scoped="" ref="0x40b27110"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:6" alignment="I:1"><struct-ref name="PppOptions_t" ref="0x40449438"/>
            <typename><typedef-ref name="PppOptions_t" ref="0x40448010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b279f8"/>
        <function-ref name="set" scoped="" ref="0x40b27738"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartControl" ref="0x40b2e598" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartControl" scoped="" ref="0x40b2e598"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b2e770"/>
        <function-ref name="stop" scoped="" ref="0x40b2e850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpAutomaton" ref="0x40b2d0e0" loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonC.nc">
      <component-ref qname="PppDaemonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40b2d0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40b2d2b8"/>
        <function-ref name="down" scoped="" ref="0x40b2d398"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40b2d478"/>
        <function-ref name="open" scoped="" ref="0x40b2d558"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40b2d638"/>
        <function-ref name="signalEvent" scoped="" ref="0x40b2d718"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40b2d7f8"/>
        <function-ref name="close" scoped="" ref="0x40b2d8d8"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40b2d9b8"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40b2da98"/>
        <function-ref name="up" scoped="" ref="0x40b2db78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppControl" ref="0x40b3fcf0" loc="36:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <component-ref qname="PppDaemonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppControl" scoped="" ref="0x40b3fcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b3fec8"/>
        <function-ref name="stopDone" scoped="" ref="0x40b3e010"/>
        <function-ref name="start" scoped="" ref="0x40b3e0f0"/>
        <function-ref name="stop" scoped="" ref="0x40b3e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b3aa18" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <component-ref qname="PppDaemonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b3aa18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b3abf0"/>
        <function-ref name="stopDone" scoped="" ref="0x40b3acd0"/>
        <function-ref name="start" scoped="" ref="0x40b3adb0"/>
        <function-ref name="stop" scoped="" ref="0x40b3ae90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ProtocolReject" ref="0x40b3a480" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <component-ref qname="PppDaemonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ProtocolReject" scoped="" ref="0x40b3a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40b3a658"/>
        <function-ref name="invoke" scoped="" ref="0x40b3a738"/>
        <function-ref name="process" scoped="" ref="0x40b3a818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocolReject" ref="0x40b371d0" loc="41:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <component-ref qname="PppDaemonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolReject" scoped="" ref="0x40b371d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolReject"/>
      </instance>
      <interface-functions>
        <function-ref name="process" scoped="" ref="0x40b373a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LcpAutomaton" ref="0x40b3f010" loc="35:/opt/tinyos-2.x/tos/lib/ppp/PppDaemonP.nc">
      <component-ref qname="PppDaemonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40b3f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40b3f1e8"/>
        <function-ref name="down" scoped="" ref="0x40b3f2c8"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40b3f3a8"/>
        <function-ref name="open" scoped="" ref="0x40b3f488"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40b3f568"/>
        <function-ref name="signalEvent" scoped="" ref="0x40b3f648"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40b3f728"/>
        <function-ref name="close" scoped="" ref="0x40b3f808"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40b3f8e8"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40b3f9c8"/>
        <function-ref name="up" scoped="" ref="0x40b3faa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b509e0" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b509e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b50bb8"/>
        <function-ref name="stopDone" scoped="" ref="0x40b50c98"/>
        <function-ref name="start" scoped="" ref="0x40b50d78"/>
        <function-ref name="stop" scoped="" ref="0x40b50e58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppRejectedProtocol" ref="0x40b4b7b8" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40b4b7b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppRejectedProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="rejected" scoped="" ref="0x40b4b990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocol" ref="0x40b51538" loc="41:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40b51538"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
          <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40b51710"/>
        <function-ref name="process" scoped="" ref="0x40b517f0"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40b518d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcUart" ref="0x40b51e30" loc="43:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40b51e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b50050"/>
        <function-ref name="receivedByte" scoped="" ref="0x40b50130"/>
        <function-ref name="sendDone" scoped="" ref="0x40b50210"/>
        <function-ref name="uartError" scoped="" ref="0x40b502f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocolReject" ref="0x40b51ac0" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolReject" scoped="" ref="0x40b51ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolReject"/>
      </instance>
      <interface-functions>
        <function-ref name="process" scoped="" ref="0x40b51c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ppp" ref="0x40b4f010" loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40b4f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40b4f1e8"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40b4f2c8"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40b4f3a8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40b4f488"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40b4f568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppOptions" ref="0x40b4bcf0" loc="50:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppOptions" scoped="" ref="0x40b4bcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:6" alignment="I:1"><struct-ref name="PppOptions_t" ref="0x40449438"/>
            <typename><typedef-ref name="PppOptions_t" ref="0x40448010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b4d610"/>
        <function-ref name="set" scoped="" ref="0x40b4d350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFramingOptions" ref="0x40b4dae0" loc="51:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40b4dae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b4c4a0"/>
        <function-ref name="set" scoped="" ref="0x40b4c1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartControl" ref="0x40b50528" loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppC.nc">
      <component-ref qname="PppC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartControl" scoped="" ref="0x40b50528"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b50700"/>
        <function-ref name="stop" scoped="" ref="0x40b507e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40b67df8" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40b67df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b62010"/>
        <function-ref name="stopDone" scoped="" ref="0x40b620f0"/>
        <function-ref name="start" scoped="" ref="0x40b621d0"/>
        <function-ref name="stop" scoped="" ref="0x40b622b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MultiLed" ref="0x40b675c0" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MultiLed" scoped="" ref="0x40b675c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="MultiLed"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40b67798"/>
        <function-ref name="toggle" scoped="" ref="0x40b67878"/>
        <function-ref name="get" scoped="" ref="0x40b67958"/>
        <function-ref name="on" scoped="" ref="0x40b67a38"/>
        <function-ref name="set" scoped="" ref="0x40b67b18"/>
        <function-ref name="off" scoped="" ref="0x40b67bf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processError_task" ref="0x40b9f438" loc="410:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processError_task" scoped="" ref="0x40b9f438"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b9f610"/>
        <function-ref name="runTask" scoped="" ref="0x40b9f6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppRejectedProtocol" ref="0x40b608b0" loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40b608b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppRejectedProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="rejected" scoped="" ref="0x40b60a88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TransmitFramePool" ref="0x40b63618" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TransmitFramePool" scoped="" ref="0x40b63618"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b637f0"/>
        <function-ref name="slotCount" scoped="" ref="0x40b638d0"/>
        <function-ref name="available" scoped="" ref="0x40b639b0"/>
        <function-ref name="request" scoped="" ref="0x40b63a90"/>
        <function-ref name="poolSize" scoped="" ref="0x40b63b70"/>
        <function-ref name="freeze" scoped="" ref="0x40b63c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocol" ref="0x40b47158" loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40b47158"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
          <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40b47330"/>
        <function-ref name="process" scoped="" ref="0x40b47410"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40b474f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="processFrame_task" ref="0x40b7e060" loc="354:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="processFrame_task" scoped="" ref="0x40b7e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b7e238"/>
        <function-ref name="runTask" scoped="" ref="0x40b7e318"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ProtocolReject" ref="0x40b477c0" loc="39:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ProtocolReject" scoped="" ref="0x40b477c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40b47998"/>
        <function-ref name="invoke" scoped="" ref="0x40b47a78"/>
        <function-ref name="process" scoped="" ref="0x40b47b58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="controlEngine_task" ref="0x40b59688" loc="93:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="controlEngine_task" scoped="" ref="0x40b59688"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b59860"/>
        <function-ref name="runTask" scoped="" ref="0x40b59940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocolReject" ref="0x40b47d48" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolReject" scoped="" ref="0x40b47d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolReject"/>
      </instance>
      <interface-functions>
        <function-ref name="process" scoped="" ref="0x40b47f20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ppp" ref="0x40b60158" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40b60158"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40b60330"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40b60410"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40b604f0"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40b605d0"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40b606b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcControl" ref="0x40b67170" loc="41:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcControl" scoped="" ref="0x40b67170"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b67348"/>
        <function-ref name="stop" scoped="" ref="0x40b67428"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppOptions" ref="0x40b62610" loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppOptions" scoped="" ref="0x40b62610"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:6" alignment="I:1"><struct-ref name="PppOptions_t" ref="0x40449438"/>
            <typename><typedef-ref name="PppOptions_t" ref="0x40448010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b62ef8"/>
        <function-ref name="set" scoped="" ref="0x40b62c38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="transmitEngine_task" ref="0x40b76e60" loc="174:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="transmitEngine_task" scoped="" ref="0x40b76e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b750e0"/>
        <function-ref name="runTask" scoped="" ref="0x40b751c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcFraming" ref="0x40b687c0" loc="36:/opt/tinyos-2.x/tos/lib/ppp/PppP.nc">
      <component-ref qname="PppP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFraming" scoped="" ref="0x40b687c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcFraming"/>
      </instance>
      <interface-functions>
        <function-ref name="receivedFrame" scoped="" ref="0x40b68998"/>
        <function-ref name="receivedDelimiter" scoped="" ref="0x40b68a78"/>
        <function-ref name="sendFrame" scoped="" ref="0x40b68b58"/>
        <function-ref name="sendDone" scoped="" ref="0x40b68c38"/>
        <function-ref name="releaseReceivedFrame" scoped="" ref="0x40b68d18"/>
        <function-ref name="receptionError" scoped="" ref="0x40b68df8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPool" ref="0x40bb3010" loc="53:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <component-ref qname="PppC.TransmitFramePoolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPool" scoped="" ref="0x40bb3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bb31e8"/>
        <function-ref name="slotCount" scoped="" ref="0x40bb32c8"/>
        <function-ref name="available" scoped="" ref="0x40bb33a8"/>
        <function-ref name="request" scoped="" ref="0x40bb3488"/>
        <function-ref name="poolSize" scoped="" ref="0x40bb3568"/>
        <function-ref name="freeze" scoped="" ref="0x40bb3648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPoolStorage" ref="0x40fd2a58" loc="44:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
      <component-ref qname="PppC.TransmitFramePoolC.FragmentPoolStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40fd2a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPoolStorage"/>
      </instance>
      <interface-functions>
        <function-ref name="slotCount" scoped="" ref="0x40fd2c30"/>
        <function-ref name="slots" scoped="" ref="0x40fd2d10"/>
        <function-ref name="id" scoped="" ref="0x40fd2df0"/>
        <function-ref name="poolSize" scoped="" ref="0x40fd2ed0"/>
        <function-ref name="pool" scoped="" ref="0x40fd1010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FragmentPoolStorage" ref="0x40bca270" loc="47:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <component-ref qname="FragmentPoolImplC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bca270"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPoolStorage"/>
      </instance>
      <interface-parameters>
        <type-int cname="int" size="I:2" alignment="I:1">
          <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="slotCount" scoped="" ref="0x40bca448"/>
        <function-ref name="slots" scoped="" ref="0x40bca528"/>
        <function-ref name="id" scoped="" ref="0x40bca608"/>
        <function-ref name="poolSize" scoped="" ref="0x40bca6e8"/>
        <function-ref name="pool" scoped="" ref="0x40bca7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPool" ref="0x40bae698" loc="41:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplC.nc">
      <component-ref qname="FragmentPoolImplC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPool" scoped="" ref="0x40bae698"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-parameters>
        <type-int cname="int" size="I:2" alignment="I:1">
          <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bae870"/>
        <function-ref name="slotCount" scoped="" ref="0x40bae950"/>
        <function-ref name="available" scoped="" ref="0x40baea30"/>
        <function-ref name="request" scoped="" ref="0x40baeb10"/>
        <function-ref name="poolSize" scoped="" ref="0x40baebf0"/>
        <function-ref name="freeze" scoped="" ref="0x40baecd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FragmentPoolStorage" ref="0x40bc61f8" loc="48:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
      <component-ref qname="FragmentPoolImplC.FragmentPoolImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPoolStorage" scoped="" ref="0x40bc61f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPoolStorage"/>
      </instance>
      <interface-parameters>
        <type-int cname="int" size="I:2" alignment="I:1">
          <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="slotCount" scoped="" ref="0x40bc63e0"/>
        <function-ref name="slots" scoped="" ref="0x40bc64c0"/>
        <function-ref name="id" scoped="" ref="0x40bc65a0"/>
        <function-ref name="poolSize" scoped="" ref="0x40bc6680"/>
        <function-ref name="pool" scoped="" ref="0x40bc6760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40bc75e8" loc="41:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
      <component-ref qname="FragmentPoolImplC.FragmentPoolImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40bc75e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40bc77c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPool" ref="0x40bc7978" loc="42:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolImplP.nc">
      <component-ref qname="FragmentPoolImplC.FragmentPoolImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPool" scoped="" ref="0x40bc7978"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-parameters>
        <type-int cname="int" size="I:2" alignment="I:1">
          <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40bc7b60"/>
        <function-ref name="slotCount" scoped="" ref="0x40bc7c40"/>
        <function-ref name="available" scoped="" ref="0x40bc7d20"/>
        <function-ref name="request" scoped="" ref="0x40bc7e00"/>
        <function-ref name="poolSize" scoped="" ref="0x40bc7ee0"/>
        <function-ref name="freeze" scoped="" ref="0x40bc6010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFraming" ref="0x40c53580" loc="86:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <component-ref qname="PppC.HdlcFramingC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFraming" scoped="" ref="0x40c53580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcFraming"/>
      </instance>
      <interface-functions>
        <function-ref name="receivedFrame" scoped="" ref="0x40c53758"/>
        <function-ref name="receivedDelimiter" scoped="" ref="0x40c53838"/>
        <function-ref name="sendFrame" scoped="" ref="0x40c53918"/>
        <function-ref name="sendDone" scoped="" ref="0x40c539f8"/>
        <function-ref name="releaseReceivedFrame" scoped="" ref="0x40c53ad8"/>
        <function-ref name="receptionError" scoped="" ref="0x40c53bb8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcUart" ref="0x40be6778" loc="81:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <component-ref qname="PppC.HdlcFramingC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40be6778"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40be6950"/>
        <function-ref name="receivedByte" scoped="" ref="0x40be6a30"/>
        <function-ref name="sendDone" scoped="" ref="0x40be6b10"/>
        <function-ref name="uartError" scoped="" ref="0x40be6bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFramingOptions" ref="0x40c53da8" loc="90:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <component-ref qname="PppC.HdlcFramingC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c53da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c526a0"/>
        <function-ref name="set" scoped="" ref="0x40c523e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartControl" ref="0x40be6d50" loc="82:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <component-ref qname="PppC.HdlcFramingC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartControl" scoped="" ref="0x40be6d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40be6f28"/>
        <function-ref name="stop" scoped="" ref="0x40c53018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40c53188" loc="85:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingC.nc">
      <component-ref qname="PppC.HdlcFramingC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40c53188"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40c53360"/>
        <function-ref name="stop" scoped="" ref="0x40c53440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40fdf8f8" loc="46:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40fdf8f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40fdfad0"/>
        <function-ref name="stop" scoped="" ref="0x40fdfbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFraming" ref="0x40fdfcf0" loc="47:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFraming" scoped="" ref="0x40fdfcf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcFraming"/>
      </instance>
      <interface-functions>
        <function-ref name="receivedFrame" scoped="" ref="0x40fdfec8"/>
        <function-ref name="receivedDelimiter" scoped="" ref="0x40fde010"/>
        <function-ref name="sendFrame" scoped="" ref="0x40fde0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40fde1d0"/>
        <function-ref name="releaseReceivedFrame" scoped="" ref="0x40fde2b0"/>
        <function-ref name="receptionError" scoped="" ref="0x40fde390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartStreamSendDone" ref="0x40fdd0e8" loc="514:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="uartStreamSendDone" scoped="" ref="0x40fdd0e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fdd2c0"/>
        <function-ref name="runTask" scoped="" ref="0x40fdd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="inputEngine_task" ref="0x40fdd520" loc="134:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="inputEngine_task" scoped="" ref="0x40fdd520"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fdd6f8"/>
        <function-ref name="runTask" scoped="" ref="0x40fdd7d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcUart" ref="0x40fe03d8" loc="40:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40fe03d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40fe05b0"/>
        <function-ref name="receivedByte" scoped="" ref="0x40fe0690"/>
        <function-ref name="sendDone" scoped="" ref="0x40fe0770"/>
        <function-ref name="uartError" scoped="" ref="0x40fe0850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40fdf5e0" loc="45:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40fdf5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40fdf7b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcFramingOptions" ref="0x40fde580" loc="48:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40fde580"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40fdee68"/>
        <function-ref name="set" scoped="" ref="0x40fdeba8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartControl" ref="0x40fe09b0" loc="41:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartControl" scoped="" ref="0x40fe09b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40fe0b88"/>
        <function-ref name="stop" scoped="" ref="0x40fe0c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InputFramePool" ref="0x40fe0dc8" loc="42:/opt/tinyos-2.x/tos/lib/ppp/HdlcFramingP.nc">
      <component-ref qname="PppC.HdlcFramingC.HdlcFramingP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="InputFramePool" scoped="" ref="0x40fe0dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40fdf010"/>
        <function-ref name="slotCount" scoped="" ref="0x40fdf0f0"/>
        <function-ref name="available" scoped="" ref="0x40fdf1d0"/>
        <function-ref name="request" scoped="" ref="0x40fdf2b0"/>
        <function-ref name="poolSize" scoped="" ref="0x40fdf390"/>
        <function-ref name="freeze" scoped="" ref="0x40fdf470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPool" ref="0x40fda0a0" loc="53:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolC.nc">
      <component-ref qname="PppC.HdlcFramingC.InputFramePoolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPool" scoped="" ref="0x40fda0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPool"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40fda278"/>
        <function-ref name="slotCount" scoped="" ref="0x40fda358"/>
        <function-ref name="available" scoped="" ref="0x40fda438"/>
        <function-ref name="request" scoped="" ref="0x40fda518"/>
        <function-ref name="poolSize" scoped="" ref="0x40fda5f8"/>
        <function-ref name="freeze" scoped="" ref="0x40fda6d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FragmentPoolStorage" ref="0x41048878" loc="44:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorageP.nc">
      <component-ref qname="PppC.HdlcFramingC.InputFramePoolC.FragmentPoolStorageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="FragmentPoolStorage" scoped="" ref="0x41048878"/></type-interface>
      <instance>
        <interfacedef-ref qname="FragmentPoolStorage"/>
      </instance>
      <interface-functions>
        <function-ref name="slotCount" scoped="" ref="0x41048a50"/>
        <function-ref name="slots" scoped="" ref="0x41048b30"/>
        <function-ref name="id" scoped="" ref="0x41048c10"/>
        <function-ref name="poolSize" scoped="" ref="0x41048cf0"/>
        <function-ref name="pool" scoped="" ref="0x41048dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureRequest" ref="0x40c4bdc0" loc="45:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureRequest" scoped="" ref="0x40c4bdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40c4a010"/>
        <function-ref name="invoke" scoped="" ref="0x40c4a0f0"/>
        <function-ref name="process" scoped="" ref="0x40c4a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppRejectedProtocol" ref="0x40c4aac8" loc="49:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40c4aac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppRejectedProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="rejected" scoped="" ref="0x40c4aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocol" ref="0x40c4e3a0" loc="42:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40c4e3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40c4e578"/>
        <function-ref name="process" scoped="" ref="0x40c4e658"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40c4e738"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ProtocolReject" ref="0x40c4b740" loc="44:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ProtocolReject" scoped="" ref="0x40c4b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40c4b918"/>
        <function-ref name="invoke" scoped="" ref="0x40c4b9f8"/>
        <function-ref name="process" scoped="" ref="0x40c4bad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcFramingOptions" ref="0x40c490e8" loc="50:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c490e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c499d0"/>
        <function-ref name="set" scoped="" ref="0x40c49710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40c4a370" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40c4a370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40c4a548"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40c4a628"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40c4a708"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40c4a7e8"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40c4a8c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppOptions" ref="0x40c49e00" loc="51:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppOptions" scoped="" ref="0x40c49e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:6" alignment="I:1"><struct-ref name="PppOptions_t" ref="0x40449438"/>
            <typename><typedef-ref name="PppOptions_t" ref="0x40448010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c48708"/>
        <function-ref name="set" scoped="" ref="0x40c48448"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpAutomaton" ref="0x40c4e8f8" loc="43:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolC.nc">
      <component-ref qname="LinkControlProtocolC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40c4e8f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40c4ead0"/>
        <function-ref name="down" scoped="" ref="0x40c4ebb0"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40c4ec90"/>
        <function-ref name="open" scoped="" ref="0x40c4ed70"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40c4ee50"/>
        <function-ref name="signalEvent" scoped="" ref="0x40c4b010"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40c4b0f0"/>
        <function-ref name="close" scoped="" ref="0x40c4b1d0"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40c4b2b0"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40c4b390"/>
        <function-ref name="up" scoped="" ref="0x40c4b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AddressControlFieldCompressionOption" ref="0x40c64e48" loc="40:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AddressControlFieldCompressionOption" scoped="" ref="0x40c64e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolOption"/>
      </instance>
      <interface-functions>
        <function-ref name="isNegotiable" scoped="" ref="0x40c6c830"/>
        <function-ref name="appendRequest" scoped="" ref="0x40c6c130"/>
        <function-ref name="setNegotiable" scoped="" ref="0x40c6c210"/>
        <function-ref name="processNakValue" scoped="" ref="0x40c6c2f0"/>
        <function-ref name="setRemote" scoped="" ref="0x40c6c3d0"/>
        <function-ref name="reset" scoped="" ref="0x40c6c4b0"/>
        <function-ref name="setLocal" scoped="" ref="0x40c6c590"/>
        <function-ref name="appendNakValue" scoped="" ref="0x40c6c670"/>
        <function-ref name="getType" scoped="" ref="0x40c6c750"/>
        <function-ref name="considerRequest" scoped="" ref="0x40c6c050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncControlCharacterMapOption" ref="0x40c6a890" loc="45:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncControlCharacterMapOption" scoped="" ref="0x40c6a890"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolOption"/>
      </instance>
      <interface-functions>
        <function-ref name="isNegotiable" scoped="" ref="0x40c632b0"/>
        <function-ref name="appendRequest" scoped="" ref="0x40c6ab48"/>
        <function-ref name="setNegotiable" scoped="" ref="0x40c6ac28"/>
        <function-ref name="processNakValue" scoped="" ref="0x40c6ad08"/>
        <function-ref name="setRemote" scoped="" ref="0x40c6ade8"/>
        <function-ref name="reset" scoped="" ref="0x40c6aec8"/>
        <function-ref name="setLocal" scoped="" ref="0x40c63010"/>
        <function-ref name="appendNakValue" scoped="" ref="0x40c630f0"/>
        <function-ref name="getType" scoped="" ref="0x40c631d0"/>
        <function-ref name="considerRequest" scoped="" ref="0x40c6aa68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppRejectedProtocol" ref="0x40c61cf0" loc="52:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppRejectedProtocol" scoped="" ref="0x40c61cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppRejectedProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="rejected" scoped="" ref="0x40c61ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocol" ref="0x40c70420" loc="38:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40c70420"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40c705f8"/>
        <function-ref name="process" scoped="" ref="0x40c706d8"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40c707b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ProtocolReject" ref="0x40c70a88" loc="39:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ProtocolReject" scoped="" ref="0x40c70a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40c70c60"/>
        <function-ref name="invoke" scoped="" ref="0x40c70d40"/>
        <function-ref name="process" scoped="" ref="0x40c70e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HdlcFramingOptions" ref="0x40c62410" loc="50:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcFramingOptions" scoped="" ref="0x40c62410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:10" alignment="I:1"><struct-ref name="HdlcFramingOptions_t" ref="0x4049ec08"/>
            <typename><typedef-ref name="HdlcFramingOptions_t" ref="0x40b0b7c8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c62cf8"/>
        <function-ref name="set" scoped="" ref="0x40c62a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40c63450" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40c63450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40c63628"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40c63708"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40c637e8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40c638c8"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40c639a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppOptions" ref="0x40c61138" loc="51:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppOptions" scoped="" ref="0x40c61138"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:6" alignment="I:1"><struct-ref name="PppOptions_t" ref="0x40449438"/>
            <typename><typedef-ref name="PppOptions_t" ref="0x40448010"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40c61a20"/>
        <function-ref name="set" scoped="" ref="0x40c61760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MaximumReceiveUnitOption" ref="0x40c6cb38" loc="44:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MaximumReceiveUnitOption" scoped="" ref="0x40c6cb38"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolOption"/>
      </instance>
      <interface-functions>
        <function-ref name="isNegotiable" scoped="" ref="0x40c6a550"/>
        <function-ref name="appendRequest" scoped="" ref="0x40c6cdf0"/>
        <function-ref name="setNegotiable" scoped="" ref="0x40c6ced0"/>
        <function-ref name="processNakValue" scoped="" ref="0x40c6a010"/>
        <function-ref name="setRemote" scoped="" ref="0x40c6a0f0"/>
        <function-ref name="reset" scoped="" ref="0x40c6a1d0"/>
        <function-ref name="setLocal" scoped="" ref="0x40c6a2b0"/>
        <function-ref name="appendNakValue" scoped="" ref="0x40c6a390"/>
        <function-ref name="getType" scoped="" ref="0x40c6a470"/>
        <function-ref name="considerRequest" scoped="" ref="0x40c6cd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocolCodeCoordinator" ref="0x40c5fcb8" loc="49:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x40c5fcb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeCoordinator"/>
      </instance>
      <interface-functions>
        <function-ref name="rejectPacket" scoped="" ref="0x40c5fe90"/>
        <function-ref name="dispatch" scoped="" ref="0x40c62010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LcpAutomaton" ref="0x40c5d0e0" loc="53:/opt/tinyos-2.x/tos/lib/ppp/LinkControlProtocolP.nc">
      <component-ref qname="LinkControlProtocolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40c5d0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40c5d2b8"/>
        <function-ref name="down" scoped="" ref="0x40c5d398"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40c5d478"/>
        <function-ref name="open" scoped="" ref="0x40c5d558"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40c5d638"/>
        <function-ref name="signalEvent" scoped="" ref="0x40c5d718"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40c5d7f8"/>
        <function-ref name="close" scoped="" ref="0x40c5d8d8"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40c5d9b8"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40c5da98"/>
        <function-ref name="up" scoped="" ref="0x40c5db78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppConfigure" ref="0x40d24180" loc="54:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppConfigure" scoped="" ref="0x40d24180"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="resetOptions" scoped="" ref="0x40d24358"/>
        <function-ref name="setLocalOptions" scoped="" ref="0x40d24438"/>
        <function-ref name="setRemoteOptions" scoped="" ref="0x40d24518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureRequest" ref="0x40d24678" loc="55:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureRequest" scoped="" ref="0x40d24678"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d24850"/>
        <function-ref name="invoke" scoped="" ref="0x40d24930"/>
        <function-ref name="process" scoped="" ref="0x40d24a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TerminateRequest" ref="0x40d23a80" loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateRequest" scoped="" ref="0x40d23a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d23c58"/>
        <function-ref name="invoke" scoped="" ref="0x40d23d38"/>
        <function-ref name="process" scoped="" ref="0x40d23e18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocolOption" ref="0x40d26940" loc="50:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolOption" scoped="" ref="0x40d26940"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolOption"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="considerRequest" scoped="" ref="0x40d25390"/>
        <function-ref name="appendRequest" scoped="" ref="0x40d26c08"/>
        <function-ref name="setNegotiable" scoped="" ref="0x40d26ce8"/>
        <function-ref name="processNakValue" scoped="" ref="0x40d26dc8"/>
        <function-ref name="setRemote" scoped="" ref="0x40d26ea8"/>
        <function-ref name="reset" scoped="" ref="0x40d25010"/>
        <function-ref name="setLocal" scoped="" ref="0x40d250f0"/>
        <function-ref name="appendNakValue" scoped="" ref="0x40d251d0"/>
        <function-ref name="isNegotiable" scoped="" ref="0x40d26b28"/>
        <function-ref name="getType" scoped="" ref="0x40d252b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureNak" ref="0x40d23090" loc="57:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureNak" scoped="" ref="0x40d23090"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d23268"/>
        <function-ref name="invoke" scoped="" ref="0x40d23348"/>
        <function-ref name="process" scoped="" ref="0x40d23428"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40d26210" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40d26210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40d263e8"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40d264c8"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40d265a8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40d26688"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40d26768"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureAck" ref="0x40d24b70" loc="56:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureAck" scoped="" ref="0x40d24b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d24d48"/>
        <function-ref name="invoke" scoped="" ref="0x40d24e28"/>
        <function-ref name="process" scoped="" ref="0x40d24f08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureReject" ref="0x40d23588" loc="58:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureReject" scoped="" ref="0x40d23588"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d23760"/>
        <function-ref name="invoke" scoped="" ref="0x40d23840"/>
        <function-ref name="process" scoped="" ref="0x40d23920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TerminateAck" ref="0x40d21010" loc="60:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateAck" scoped="" ref="0x40d21010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d211e8"/>
        <function-ref name="invoke" scoped="" ref="0x40d212c8"/>
        <function-ref name="process" scoped="" ref="0x40d213a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LcpAutomaton" ref="0x40d254d0" loc="51:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineC.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40d254d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40d256a8"/>
        <function-ref name="down" scoped="" ref="0x40d25788"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40d25868"/>
        <function-ref name="open" scoped="" ref="0x40d25948"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40d25a28"/>
        <function-ref name="signalEvent" scoped="" ref="0x40d25b08"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40d25be8"/>
        <function-ref name="close" scoped="" ref="0x40d25cc8"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40d25da8"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40d25e88"/>
        <function-ref name="up" scoped="" ref="0x40d24010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppConfigure" ref="0x41035658" loc="43:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppConfigure" scoped="" ref="0x41035658"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="resetOptions" scoped="" ref="0x41035830"/>
        <function-ref name="setLocalOptions" scoped="" ref="0x41035910"/>
        <function-ref name="setRemoteOptions" scoped="" ref="0x410359f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureRequest" ref="0x41035b50" loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureRequest" scoped="" ref="0x41035b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x41035d28"/>
        <function-ref name="invoke" scoped="" ref="0x41035e08"/>
        <function-ref name="process" scoped="" ref="0x41035ee8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppProtocolOption" ref="0x41038ac8" loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolOption" scoped="" ref="0x41038ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolOption"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getType" scoped="" ref="0x41036550"/>
        <function-ref name="appendRequest" scoped="" ref="0x41038d90"/>
        <function-ref name="setNegotiable" scoped="" ref="0x41038e70"/>
        <function-ref name="processNakValue" scoped="" ref="0x41036010"/>
        <function-ref name="setRemote" scoped="" ref="0x410360f0"/>
        <function-ref name="reset" scoped="" ref="0x410361d0"/>
        <function-ref name="setLocal" scoped="" ref="0x410362b0"/>
        <function-ref name="appendNakValue" scoped="" ref="0x41036390"/>
        <function-ref name="isNegotiable" scoped="" ref="0x41036470"/>
        <function-ref name="considerRequest" scoped="" ref="0x41038cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41035340" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x41035340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41035518"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureNak" ref="0x41034558" loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureNak" scoped="" ref="0x41034558"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x41034730"/>
        <function-ref name="invoke" scoped="" ref="0x41034810"/>
        <function-ref name="process" scoped="" ref="0x410348f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TerminateRequest" ref="0x41033010" loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateRequest" scoped="" ref="0x41033010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x410331e8"/>
        <function-ref name="invoke" scoped="" ref="0x410332c8"/>
        <function-ref name="process" scoped="" ref="0x410333a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x41038398" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x41038398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x41038570"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x41038650"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x41038730"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x41038810"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x410388f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureAck" ref="0x41034060" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureAck" scoped="" ref="0x41034060"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x41034238"/>
        <function-ref name="invoke" scoped="" ref="0x41034318"/>
        <function-ref name="process" scoped="" ref="0x410343f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ConfigureReject" ref="0x41034a50" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureReject" scoped="" ref="0x41034a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x41034c28"/>
        <function-ref name="invoke" scoped="" ref="0x41034d08"/>
        <function-ref name="process" scoped="" ref="0x41034de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TerminateAck" ref="0x41033508" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateAck" scoped="" ref="0x41033508"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x410336e0"/>
        <function-ref name="invoke" scoped="" ref="0x410337c0"/>
        <function-ref name="process" scoped="" ref="0x410338a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LcpAutomaton" ref="0x41036690" loc="39:/opt/tinyos-2.x/tos/lib/ppp/PppConfigureEngineP.nc">
      <component-ref qname="LinkControlProtocolC.PppConfigureEngineC.PppConfigureEngineP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x41036690"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x41036868"/>
        <function-ref name="down" scoped="" ref="0x41036948"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x41036a28"/>
        <function-ref name="open" scoped="" ref="0x41036b08"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x41036be8"/>
        <function-ref name="signalEvent" scoped="" ref="0x41036cc8"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x41036da8"/>
        <function-ref name="close" scoped="" ref="0x41036e88"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x41035010"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x410350f0"/>
        <function-ref name="up" scoped="" ref="0x410351d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CodeHandler" ref="0x40d4a9b0" loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CodeHandler" scoped="" ref="0x40d4a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40d4ab98"/>
        <function-ref name="invoke" scoped="" ref="0x40d4ac78"/>
        <function-ref name="process" scoped="" ref="0x40d4ad58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40d4a260" loc="43:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40d4a260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40d4a438"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40d4a518"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40d4a5f8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40d4a6d8"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40d4a7b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocolCodeCoordinator" ref="0x40d4bd60" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorC.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x40d4bd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeCoordinator"/>
      </instance>
      <interface-functions>
        <function-ref name="rejectPacket" scoped="" ref="0x40d4a010"/>
        <function-ref name="dispatch" scoped="" ref="0x40d4a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CodeHandler" ref="0x410a1010" loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC.PppProtocolCodeCoordinatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CodeHandler" scoped="" ref="0x410a1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x410a11f8"/>
        <function-ref name="invoke" scoped="" ref="0x410a12d8"/>
        <function-ref name="process" scoped="" ref="0x410a13b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x410a2810" loc="45:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC.PppProtocolCodeCoordinatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x410a2810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x410a29e8"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x410a2ac8"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x410a2ba8"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x410a2c88"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x410a2d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocolCodeCoordinator" ref="0x410a23e8" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinatorP.nc">
      <component-ref qname="LinkControlProtocolC.CoordinatorC.PppProtocolCodeCoordinatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocolCodeCoordinator" scoped="" ref="0x410a23e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeCoordinator"/>
      </instance>
      <interface-functions>
        <function-ref name="rejectPacket" scoped="" ref="0x410a25c0"/>
        <function-ref name="dispatch" scoped="" ref="0x410a26a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppConfigure" ref="0x40df73f0" loc="56:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppConfigure" scoped="" ref="0x40df73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="resetOptions" scoped="" ref="0x40df75c8"/>
        <function-ref name="setLocalOptions" scoped="" ref="0x40df76a8"/>
        <function-ref name="setRemoteOptions" scoped="" ref="0x40df7788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpOptions" ref="0x40df9200" loc="52:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpOptions" scoped="" ref="0x40df9200"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:11" alignment="I:1"><struct-ref name="LcpAutomatonOptions_t" ref="0x4044c230"/>
            <typename><typedef-ref name="LcpAutomatonOptions_t" ref="0x4044cda8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40df9ae8"/>
        <function-ref name="set" scoped="" ref="0x40df9828"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfigureRequest" ref="0x40df78e8" loc="57:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureRequest" scoped="" ref="0x40df78e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40df7ac0"/>
        <function-ref name="invoke" scoped="" ref="0x40df7ba0"/>
        <function-ref name="process" scoped="" ref="0x40df7c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40df9d28" loc="55:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40df9d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40df9f00"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40df7010"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40df70f0"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40df71d0"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40df72b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TerminateAck" ref="0x40df7de0" loc="58:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateAck" scoped="" ref="0x40df7de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x40df6010"/>
        <function-ref name="invoke" scoped="" ref="0x40df60f0"/>
        <function-ref name="process" scoped="" ref="0x40df61d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpAutomaton" ref="0x40d5b558" loc="51:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonC.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x40d5b558"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x40d5b730"/>
        <function-ref name="down" scoped="" ref="0x40d5b810"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x40d5b8f0"/>
        <function-ref name="open" scoped="" ref="0x40d5b9d0"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x40d5bab0"/>
        <function-ref name="signalEvent" scoped="" ref="0x40d5bb90"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x40d5bc70"/>
        <function-ref name="close" scoped="" ref="0x40d5bd50"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x40d5be30"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x40d5bf10"/>
        <function-ref name="up" scoped="" ref="0x40df9010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="resumeAutomaton_task" ref="0x410c5e58" loc="209:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="resumeAutomaton_task" scoped="" ref="0x410c5e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x410c4050"/>
        <function-ref name="runTask" scoped="" ref="0x410c4130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="restartTimerFired_task" ref="0x410c5a20" loc="230:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="restartTimerFired_task" scoped="" ref="0x410c5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x410c5bf8"/>
        <function-ref name="runTask" scoped="" ref="0x410c5cd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PppConfigure" ref="0x4108c010" loc="43:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppConfigure" scoped="" ref="0x4108c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="resetOptions" scoped="" ref="0x4108c1e8"/>
        <function-ref name="setLocalOptions" scoped="" ref="0x4108c2c8"/>
        <function-ref name="setRemoteOptions" scoped="" ref="0x4108c3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpOptions" ref="0x4108edd8" loc="39:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpOptions" scoped="" ref="0x4108edd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GetSetOptions"/>
        <arguments>
          <type-tag size="I:11" alignment="I:1"><struct-ref name="LcpAutomatonOptions_t" ref="0x4044c230"/>
            <typename><typedef-ref name="LcpAutomatonOptions_t" ref="0x4044cda8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4108d708"/>
        <function-ref name="set" scoped="" ref="0x4108d448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ConfigureRequest" ref="0x410c5010" loc="45:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ConfigureRequest" scoped="" ref="0x410c5010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x410c51e8"/>
        <function-ref name="invoke" scoped="" ref="0x410c52c8"/>
        <function-ref name="process" scoped="" ref="0x410c53a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41092e00" loc="37:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x41092e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4108e010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x4108d948" loc="42:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x4108d948"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x4108db20"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x4108dc00"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x4108dce0"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x4108ddc0"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x4108dea0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RestartTimer" ref="0x4108c628" loc="44:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RestartTimer" scoped="" ref="0x4108c628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x410c7af0"/>
        <function-ref name="fired" scoped="" ref="0x410c72c0"/>
        <function-ref name="startAt" scoped="" ref="0x410c77b0"/>
        <function-ref name="isRunning" scoped="" ref="0x410c7538"/>
        <function-ref name="getAlarm" scoped="" ref="0x410c7d68"/>
        <function-ref name="start" scoped="" ref="0x4108cd78"/>
        <function-ref name="stop" scoped="" ref="0x410c7048"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TerminateAck" ref="0x410c5508" loc="46:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TerminateAck" scoped="" ref="0x410c5508"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
      </instance>
      <interface-functions>
        <function-ref name="getCode" scoped="" ref="0x410c56e0"/>
        <function-ref name="invoke" scoped="" ref="0x410c57c0"/>
        <function-ref name="process" scoped="" ref="0x410c58a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LcpAutomaton" ref="0x4108e150" loc="38:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomatonP.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.LcpAutomatonP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LcpAutomaton" scoped="" ref="0x4108e150"/></type-interface>
      <instance>
        <interfacedef-ref qname="LcpAutomaton"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x4108e328"/>
        <function-ref name="down" scoped="" ref="0x4108e408"/>
        <function-ref name="thisLayerUp" scoped="" ref="0x4108e4e8"/>
        <function-ref name="open" scoped="" ref="0x4108e5c8"/>
        <function-ref name="thisLayerFinished" scoped="" ref="0x4108e6a8"/>
        <function-ref name="signalEvent" scoped="" ref="0x4108e788"/>
        <function-ref name="thisLayerDown" scoped="" ref="0x4108e868"/>
        <function-ref name="close" scoped="" ref="0x4108e948"/>
        <function-ref name="thisLayerStarted" scoped="" ref="0x4108ea28"/>
        <function-ref name="transitionCompleted" scoped="" ref="0x4108eb08"/>
        <function-ref name="up" scoped="" ref="0x4108ebe8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x410c3db0" loc="40:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C.nc">
      <component-ref qname="LinkControlProtocolC.LcpAutomatonC.MuxAlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x410c3db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x410c1278"/>
        <function-ref name="fired" scoped="" ref="0x410c2a30"/>
        <function-ref name="startAt" scoped="" ref="0x410c2f20"/>
        <function-ref name="isRunning" scoped="" ref="0x410c2ca8"/>
        <function-ref name="getAlarm" scoped="" ref="0x410c14f0"/>
        <function-ref name="start" scoped="" ref="0x410c2518"/>
        <function-ref name="stop" scoped="" ref="0x410c27b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ClientAlarm" ref="0x40dc83f8" loc="47:/opt/tinyos-2.x/tos/lib/timer/MuxAlarmMilli32C_.nc">
      <component-ref qname="MuxAlarmMilli32C_"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ClientAlarm" scoped="" ref="0x40dc83f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40dc68b8"/>
        <function-ref name="fired" scoped="" ref="0x40dc6088"/>
        <function-ref name="startAt" scoped="" ref="0x40dc6578"/>
        <function-ref name="isRunning" scoped="" ref="0x40dc6300"/>
        <function-ref name="getAlarm" scoped="" ref="0x40dc6b30"/>
        <function-ref name="start" scoped="" ref="0x40dc8b48"/>
        <function-ref name="stop" scoped="" ref="0x40dc8de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40df3700" loc="49:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.VirtualizeAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40df3700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40e02c18"/>
        <function-ref name="fired" scoped="" ref="0x40e023b8"/>
        <function-ref name="startAt" scoped="" ref="0x40e028c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40e02640"/>
        <function-ref name="getAlarm" scoped="" ref="0x40e02ea0"/>
        <function-ref name="start" scoped="" ref="0x40df3e60"/>
        <function-ref name="stop" scoped="" ref="0x40e02130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40df31f0" loc="48:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.VirtualizeAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40df31f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40df33c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x40e00248" loc="50:/opt/tinyos-2.x/tos/lib/timer/VirtualizeAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.VirtualizeAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x40e00248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40dff708"/>
        <function-ref name="fired" scoped="" ref="0x40e00eb0"/>
        <function-ref name="startAt" scoped="" ref="0x40dff3c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40dff150"/>
        <function-ref name="getAlarm" scoped="" ref="0x40dff980"/>
        <function-ref name="start" scoped="" ref="0x40e00998"/>
        <function-ref name="stop" scoped="" ref="0x40e00c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40dfd010" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AlarmMilli32C.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40dfd010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40dfb4e0"/>
        <function-ref name="fired" scoped="" ref="0x40dfdc78"/>
        <function-ref name="startAt" scoped="" ref="0x40dfb1a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40dfdef0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40dfb758"/>
        <function-ref name="start" scoped="" ref="0x40dfd760"/>
        <function-ref name="stop" scoped="" ref="0x40dfda00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x410e8708" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/Alarm62khz32C.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x410e8708"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x410e7bd8"/>
        <function-ref name="fired" scoped="" ref="0x410e73a8"/>
        <function-ref name="startAt" scoped="" ref="0x410e7898"/>
        <function-ref name="isRunning" scoped="" ref="0x410e7620"/>
        <function-ref name="getAlarm" scoped="" ref="0x410e7e50"/>
        <function-ref name="start" scoped="" ref="0x410e8e58"/>
        <function-ref name="stop" scoped="" ref="0x410e7130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCompare" ref="0x411140c0" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCompare" scoped="" ref="0x411140c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCompare"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x41113b10"/>
        <function-ref name="test" scoped="" ref="0x41114e98"/>
        <function-ref name="fired" scoped="" ref="0x41114c20"/>
        <function-ref name="force" scoped="" ref="0x41112048"/>
        <function-ref name="get" scoped="" ref="0x41114708"/>
        <function-ref name="reset" scoped="" ref="0x41113130"/>
        <function-ref name="getMode" scoped="" ref="0x41113db0"/>
        <function-ref name="isOn" scoped="" ref="0x41113898"/>
        <function-ref name="set" scoped="" ref="0x41114980"/>
        <function-ref name="start" scoped="" ref="0x411133a8"/>
        <function-ref name="stop" scoped="" ref="0x41113620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x411196f8" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x411196f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x41118ba0"/>
        <function-ref name="fired" scoped="" ref="0x41118370"/>
        <function-ref name="startAt" scoped="" ref="0x41118860"/>
        <function-ref name="isRunning" scoped="" ref="0x411185e8"/>
        <function-ref name="getAlarm" scoped="" ref="0x41118e18"/>
        <function-ref name="start" scoped="" ref="0x41119e48"/>
        <function-ref name="stop" scoped="" ref="0x411180f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x411192c0" loc="39:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x411192c0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403507d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403507d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41119498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AtmegaCounter" ref="0x41117100" loc="45:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompareP.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.Alarm62khz32C.AtmegaCompareP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AtmegaCounter" scoped="" ref="0x41117100"/></type-interface>
      <instance>
        <interfacedef-ref qname="AtmegaCounter"/>
        <arguments>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setMode" scoped="" ref="0x41116b50"/>
        <function-ref name="test" scoped="" ref="0x41117ed8"/>
        <function-ref name="get" scoped="" ref="0x41117748"/>
        <function-ref name="reset" scoped="" ref="0x41116170"/>
        <function-ref name="getMode" scoped="" ref="0x41116df0"/>
        <function-ref name="overflow" scoped="" ref="0x41117c60"/>
        <function-ref name="isOn" scoped="" ref="0x411168d8"/>
        <function-ref name="set" scoped="" ref="0x411179c0"/>
        <function-ref name="start" scoped="" ref="0x411163e8"/>
        <function-ref name="stop" scoped="" ref="0x41116660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x411220a0" loc="61:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x411220a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x411215c8"/>
        <function-ref name="fired" scoped="" ref="0x41122d08"/>
        <function-ref name="startAt" scoped="" ref="0x41121288"/>
        <function-ref name="isRunning" scoped="" ref="0x41121010"/>
        <function-ref name="getAlarm" scoped="" ref="0x41121840"/>
        <function-ref name="start" scoped="" ref="0x411227f0"/>
        <function-ref name="stop" scoped="" ref="0x41122a90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x4111fde0" loc="73:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmFrom" scoped="" ref="0x4111fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:0" alignment="I:1"><struct-ref name="T62khz" ref="0x404bb818"/>
            <typename><typedef-ref name="T62khz" ref="0x404bb9c0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4111d350"/>
        <function-ref name="fired" scoped="" ref="0x4111ea88"/>
        <function-ref name="startAt" scoped="" ref="0x4111d010"/>
        <function-ref name="isRunning" scoped="" ref="0x4111ed00"/>
        <function-ref name="getAlarm" scoped="" ref="0x4111d5c8"/>
        <function-ref name="start" scoped="" ref="0x4111e570"/>
        <function-ref name="stop" scoped="" ref="0x4111e810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x41121b90" loc="68:/opt/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="MuxAlarmMilli32C_.AlarmMilli32C.TransformAlarmC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x41121b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x404b1928"/>
            <typename><typedef-ref name="TMilli" ref="0x404b1af0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4111f308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4111f7f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4111f580"/>
        <function-ref name="overflow" scoped="" ref="0x4111fa70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcUart" ref="0x40e1b0b8" loc="40:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <component-ref qname="DefaultHdlcUartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40e1b0b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e1b290"/>
        <function-ref name="receivedByte" scoped="" ref="0x40e1b370"/>
        <function-ref name="sendDone" scoped="" ref="0x40e1b450"/>
        <function-ref name="uartError" scoped="" ref="0x40e1b530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40e1ec08" loc="39:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartC.nc">
      <component-ref qname="DefaultHdlcUartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40e1ec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40e1ede0"/>
        <function-ref name="stop" scoped="" ref="0x40e1eec0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="streamFeeder_task" ref="0x40e10530" loc="118:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <component-ref qname="DefaultHdlcUartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="streamFeeder_task" scoped="" ref="0x40e10530"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e10708"/>
        <function-ref name="runTask" scoped="" ref="0x40e107e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40e18990" loc="41:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <component-ref qname="DefaultHdlcUartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40e18990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40e18b68"/>
        <function-ref name="stop" scoped="" ref="0x40e18c48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HdlcUart" ref="0x40e18288" loc="35:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <component-ref qname="DefaultHdlcUartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HdlcUart" scoped="" ref="0x40e18288"/></type-interface>
      <instance>
        <interfacedef-ref qname="HdlcUart"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e18460"/>
        <function-ref name="receivedByte" scoped="" ref="0x40e18540"/>
        <function-ref name="sendDone" scoped="" ref="0x40e18620"/>
        <function-ref name="uartError" scoped="" ref="0x40e18700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x40e18df0" loc="42:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <component-ref qname="DefaultHdlcUartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40e18df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e17010"/>
        <function-ref name="receivedByte" scoped="" ref="0x40e170f0"/>
        <function-ref name="receive" scoped="" ref="0x40e171d0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40e172b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40e17390"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40e17470"/>
        <function-ref name="sendDone" scoped="" ref="0x40e17550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40e1bda8" loc="34:/opt/tinyos-2.x/tos/lib/ppp/DefaultHdlcUartP.nc">
      <component-ref qname="DefaultHdlcUartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40e1bda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40e18010"/>
        <function-ref name="stop" scoped="" ref="0x40e180f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocol" ref="0x40e34848" loc="67:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <component-ref qname="PppPrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40e34848"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40e34a20"/>
        <function-ref name="process" scoped="" ref="0x40e34b00"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40e34be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40e34d80" loc="70:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfC.nc">
      <component-ref qname="PppPrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40e34d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40e33010"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40e330f0"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40e331d0"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40e332b0"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40e33390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendBuffer_task" ref="0x40e2ee10" loc="62:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <component-ref qname="PppPrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendBuffer_task" scoped="" ref="0x40e2ee10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e2d010"/>
        <function-ref name="runTask" scoped="" ref="0x40e2d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PppProtocol" ref="0x40e33e10" loc="39:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <component-ref qname="PppPrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PppProtocol" scoped="" ref="0x40e33e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PppProtocol"/>
      </instance>
      <interface-functions>
        <function-ref name="getProtocol" scoped="" ref="0x40e30010"/>
        <function-ref name="process" scoped="" ref="0x40e300f0"/>
        <function-ref name="rejectedByPeer" scoped="" ref="0x40e301d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Ppp" ref="0x40e2f1b0" loc="43:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <component-ref qname="PppPrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Ppp" scoped="" ref="0x40e2f1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Ppp"/>
      </instance>
      <interface-functions>
        <function-ref name="fixOutputFrameLength" scoped="" ref="0x40e2f388"/>
        <function-ref name="outputFrameTransmitted" scoped="" ref="0x40e2f468"/>
        <function-ref name="sendOutputFrame" scoped="" ref="0x40e2f548"/>
        <function-ref name="releaseOutputFrame" scoped="" ref="0x40e2f628"/>
        <function-ref name="getOutputFrame" scoped="" ref="0x40e2f708"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Putchar" ref="0x40e30da0" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppPrintfP.nc">
      <component-ref qname="PppPrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x40e30da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40e2f010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x40e317b8" loc="43:/opt/tinyos-2.x/tos/lib/printf/PutcharC.nc">
      <component-ref qname="PutcharC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x40e317b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40e31990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40e4ca28" loc="94:/opt/tinyos-2.x/tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40e4ca28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40e4cc00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Putchar" ref="0x40e4cda8" loc="95:/opt/tinyos-2.x/tos/lib/printf/PutcharP.nc">
      <component-ref qname="PutcharP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Putchar" scoped="" ref="0x40e4cda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Putchar"/>
      </instance>
      <interface-functions>
        <function-ref name="putchar" scoped="" ref="0x40e4b010"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="50:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x40486ac0" loc="60:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
        <documentation loc="51:/opt/tinyos-2.x/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="MultiLed" loc="41:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <short> An interface to control a series of LEDs.</short>
        <long> An interface to control a series of LEDs.&#10;&#10; Allows use of a series of LEDs as a visual binary register.  Bit i&#10; of the value is a 1 iff LED i is on.&#10;&#10; This interface is generically implemented by the LedC component.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x40481010" loc="60:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Invoke the Led.set() function for the specified LED.</short>
          <long> Invoke the Led.set() function for the specified LED.&#10; @param led_id Position of LED to turn on, starting with LED 0&#10; @param turn_on if TRUE, turn LED on; otherwise turn it off *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="led_id" ref="0x40482c98" loc="60:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="turn_on" ref="0x40482e88" loc="60:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x40481628" loc="64:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Invoke the Led.toggle() function for the specified LED.</short>
          <long> Invoke the Led.toggle() function for the specified LED.&#10; @param led_id Position of LED to turn on, starting with LED 0 *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="led_id" ref="0x404814d0" loc="64:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40485750" loc="44:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="43:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Read the value represented by the on status of the LEDs.</short>
          <long> Read the value represented by the on status of the LEDs. *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="on" ref="0x40482240" loc="51:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Invoke the Led.on() function for the specified LED.</short>
          <long> Invoke the Led.on() function for the specified LED.&#10; @param led_id Position of LED to turn on, starting with LED 0 *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="led_id" ref="0x404820e8" loc="51:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40485cb8" loc="47:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Set the LEDs to represent the given value.</short>
          <long> Set the LEDs to represent the given value. *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40485b60" loc="47:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x404827f8" loc="55:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
          <short> Invoke the Led.off() function for the specified LED.</short>
          <long> Invoke the Led.off() function for the specified LED.&#10; @param led_id Position of LED to turn on, starting with LED 0 *</long>
        </documentation>
        <interfacedef-ref qname="MultiLed"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="led_id" ref="0x404826a0" loc="55:/opt/tinyos-2.x/tos/interfaces/MultiLed.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x4048b168" loc="113:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4048b010" loc="113:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x4048beb0" loc="138:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4048bd58" loc="138:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40484858" loc="104:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4048b678" loc="130:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/opt/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LcpAutomaton" loc="40:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <short> Manage the Link Control Protocol automaton.</short>
        <long> Manage the Link Control Protocol automaton.&#10;&#10; This interface is subject to change, as it is unclear which actions&#10; should be publicly available.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x404885e0" loc="51:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Obtain the current state of the automaton *</short>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><enum-ref name="LcpAutomatonState_e" ref="0x40448758"/>
            <typename><typedef-ref name="LcpAutomatonState_e" ref="0x4044fe20"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="down" ref="0x40488ea0" loc="65:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Externally indicate that the layer is ready.</short>
          <long> Externally indicate that the layer is ready.&#10;&#10; This command is normally invoked only by the Ppp daemon when&#10; closing down the link, and by an LCP automaton when all upper&#10; layers have closed. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="thisLayerUp" ref="0x40492988" loc="110:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="104:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Raised by the automaton to indicate to upper layers that the&#10; automaton has entered the Opened state.</short>
          <long> Raised by the automaton to indicate to upper layers that the&#10; automaton has entered the Opened state.&#10;&#10; Normally, upper layers should respond by invoking the up()&#10; command on themselves.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="open" ref="0x404873d0" loc="75:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Administratively enable the automaton.</short>
          <long> Administratively enable the automaton.&#10;&#10; This is normally invoked during application initialization, to&#10; indicate that the corresponding protocol should be enabled as&#10; soon as enough of PPP is up to allow messages to get to it.&#10;&#10; @return SUCCESS if automaton transition succeeded.  ERETRY if the&#10; automaton is busy, and the attempt should repeated. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="thisLayerFinished" ref="0x40491920" loc="128:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="125:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Raised by the automaton to indicate to lower layers that the&#10; automaton is entering the Initial, Closed, or Stopped states, and&#10; the lower layer is no longer needed for the link.</short>
          <long> Raised by the automaton to indicate to lower layers that the&#10; automaton is entering the Initial, Closed, or Stopped states, and&#10; the lower layer is no longer needed for the link. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="signalEvent" ref="0x40492248" loc="101:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Notify the automaton of an event to be executed.</short>
          <long> Notify the automaton of an event to be executed.&#10;&#10; @param evt The event that is inducing a state transition.&#10;&#10; @param params Pointer to an event-specific structure required to&#10; complete the actions associated with the transition.  Note that&#10; the parameters may include resources, the responsibility for&#10; which is normally transferred to the automaton.&#10;&#10; @note If this command returns ERETRY, any resource included in&#10; the params was not accepted by the automaton, and the caller must&#10; dispose of it.  For SUCCESS and for all non-ERETRY error returns,&#10; the automaton accepts resource parameters and is responsible for&#10; releasing them.&#10;&#10; @return The result of the signal operation.  If ERETRY, the&#10; automaton is busy, but the event may be re-signaled later.  For&#10; all other returns, the event should not be re-signalled. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><enum-ref name="LcpAutomatonEvent_e" ref="0x4044e150"/>
              <typename><typedef-ref name="LcpAutomatonEvent_e" ref="0x4044df00"/></typename>
            </type-tag>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="evt" ref="0x40487eb8" loc="101:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
            <type-tag size="I:2" alignment="I:1"><enum-ref name="LcpAutomatonEvent_e" ref="0x4044e150"/>
              <typename><typedef-ref name="LcpAutomatonEvent_e" ref="0x4044df00"/></typename>
            </type-tag>
          </variable>
          <variable name="params" ref="0x404920e8" loc="102:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="thisLayerDown" ref="0x40492e98" loc="118:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="112:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Raised by the automaton to indicate to upper layers that the&#10; automaton is leaving the Opened state.</short>
          <long> Raised by the automaton to indicate to upper layers that the&#10; automaton is leaving the Opened state.&#10;&#10; Normally, upper layers should respond by invoking the down()&#10; command on themselves.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="close" ref="0x40487938" loc="81:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="77:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Administratively disable the automaton.</short>
          <long> Administratively disable the automaton.&#10;&#10; @return SUCCESS if automaton transition succeeded.  ERETRY if the&#10; automaton is busy, and the attempt should repeated. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="thisLayerStarted" ref="0x404913f8" loc="123:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="120:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Raised by the automaton to indicate to lower layers that the&#10; automaton is entering the Starting state and the lower layer is&#10; needed.</short>
          <long> Raised by the automaton to indicate to lower layers that the&#10; automaton is entering the Starting state and the lower layer is&#10; needed. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="transitionCompleted" ref="0x40488058" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Raised upon completion of the transition actions associated with&#10; an automaton event.</short>
          <long> Raised upon completion of the transition actions associated with&#10; an automaton event.&#10;&#10; @param state The resulting state of the automaton.  May be the&#10; same as the previous state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><enum-ref name="LcpAutomatonState_e" ref="0x40448758"/>
              <typename><typedef-ref name="LcpAutomatonState_e" ref="0x4044fe20"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="state" ref="0x40489ec8" loc="48:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
            <type-tag size="I:2" alignment="I:1"><enum-ref name="LcpAutomatonState_e" ref="0x40448758"/>
              <typename><typedef-ref name="LcpAutomatonState_e" ref="0x4044fe20"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="up" ref="0x404889d0" loc="58:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/lib/ppp/LcpAutomaton.nc">
          <short> Externally indicate that the layer is ready.</short>
          <long> Externally indicate that the layer is ready.&#10;&#10; This command is normally invoked only by the Ppp daemon when&#10; bringing up LCP, and by an LCP automaton when a lower layer is&#10; ready to carry packets. *</long>
        </documentation>
        <interfacedef-ref qname="LcpAutomaton"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:/opt/tinyos-2.x/tos/interfaces/Init.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4049d138" loc="62:/opt/tinyos-2.x/tos/interfaces/Init.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x404a42b0" loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x404a4158" loc="60:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x4049c8c0" loc="31:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x4049cef8" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x4049cda0" loc="39:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x404995f8" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x404994a0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x40499b50" loc="53:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x404dc090" loc="44:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x404dc478" loc="45:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x404dd8e8" loc="42:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x404dcc48" loc="47:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404ddca8" loc="43:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x404dc850" loc="46:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x404dd1a8" loc="40:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x404dd538" loc="41:/opt/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.x/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40553980" loc="49:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40553980"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x40553e30" loc="55:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x4055c5f0" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40553980"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x4055c2c0" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x4055c490" loc="63:/opt/tinyos-2.x/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40553980"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40559c40" loc="53:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40559c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40560520" loc="136:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="132:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40562210" loc="83:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x40561378" loc="114:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="100:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40561030" loc="114:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40561218" loc="114:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x40562b60" loc="98:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="94:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x40560e98" loc="151:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="146:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x40560968" loc="144:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="138:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x405626a0" loc="92:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="86:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x405642b0" loc="64:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40564158" loc="64:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x40561d60" loc="129:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="116:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40561a18" loc="129:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40561c00" loc="129:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x40564948" loc="73:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="66:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x405647f0" loc="73:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40212848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40564e18" loc="78:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4056da68" loc="56:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4056da68"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4056dbd0" loc="56:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40575eb0" loc="109:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40576b58" loc="78:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40575868" loc="103:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40575518" loc="103:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          </variable>
          <variable name="dt" ref="0x40575708" loc="103:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40575010" loc="88:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40581368" loc="116:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40576218" loc="66:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x405760c0" loc="66:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4056dbd0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405766f8" loc="73:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCompare" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
      <parameters>
        <typedef name="size_type" ref="0x40582ab0" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
          <interfacedef-ref qname="AtmegaCompare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40582ab0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x40598188" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x40598030" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x4058bcf8" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x4058b918" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="force" ref="0x40598960" loc="78:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4058b010" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40582ab0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x405990c8" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x40598598" loc="73:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40599c20" loc="65:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4058b550" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40582ab0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x4058b3f8" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40582ab0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40599490" loc="59:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40599840" loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCompare.nc">
        <interfacedef-ref qname="AtmegaCompare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCounter" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
      <parameters>
        <typedef name="size_type" ref="0x40585a80" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
          <interfacedef-ref qname="AtmegaCounter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40585a80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x4058f1c0" loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x4058f068" loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40591d18" loc="53:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40591010" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40585a80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x405900f8" loc="56:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x4058f5d0" loc="75:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40591938" loc="49:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40590c50" loc="67:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40591550" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40585a80"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x405913f8" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40585a80"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x405904c0" loc="61:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40590870" loc="64:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCounter.nc">
        <interfacedef-ref qname="AtmegaCounter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AtmegaCapture" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
      <parameters>
        <typedef name="size_type" ref="0x405aa560" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
          <interfacedef-ref qname="AtmegaCapture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405aa560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setMode" ref="0x405b5cf8" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x405b5ba0" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x405b67b8" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x405b63d8" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x405aaa58" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405aa560"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x405b6b70" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x405b4138" loc="73:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x405b57a0" loc="65:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x405b6010" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405aa560"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x405aae40" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x405aa560"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x405b5010" loc="59:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405b53c0" loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/timer/AtmegaCapture.nc">
        <interfacedef-ref qname="AtmegaCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/platforms/ucmini/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x40433350" loc="62:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x4040f470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x4035ae88" loc="52:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="53:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x4043bbc0" loc="63:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x4043a038" loc="69:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="65:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x4043a4b8" loc="74:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x4043ad28" loc="85:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3Off" ref="0x404412f8" loc="113:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="110:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 3.</short>
          <long>&#10; Turn off LED 3. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x40439a38" loc="102:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="98:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40441be8" loc="134:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="122:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LED_LED0, LED_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x4043a8e0" loc="79:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="76:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3Toggle" ref="0x40441740" loc="119:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="115:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Toggle LED 3; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 3; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led3On" ref="0x40439eb8" loc="108:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 3.</short>
          <long>&#10; Turn on LED 3. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x4043b798" loc="58:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x404395f0" loc="96:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="93:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x404391c8" loc="91:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="88:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40440380" loc="149:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
        <documentation loc="137:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40440228" loc="149:/opt/tinyos-2.x/tos/platforms/ucmini/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x40420a98" loc="76:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x406144e0" loc="57:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x406144e0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40614648" loc="57:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40614648"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40614b30" loc="64:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40614648"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x40625570" loc="76:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x40625070" loc="71:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="66:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40625970" loc="82:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="78:/opt/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x4035b888" loc="67:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x4035bda0" loc="75:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x406ce4d0" loc="65:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x406ce010" loc="59:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x406bca48" loc="32:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x406bc550" loc="25:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x406cf010" loc="39:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x406cb5c8" loc="52:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x406cb5c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x406cba98" loc="58:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x406c7340" loc="66:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x406cb5c8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x406c7010" loc="66:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x406c71e0" loc="66:/opt/tinyos-2.x/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x406cb5c8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
      <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x406d8538" loc="120:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="104:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x406d9c00" loc="97:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="90:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x406d9600" loc="88:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="78:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x406d80c8" loc="102:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="99:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x406d8c30" loc="128:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
        <documentation loc="122:/opt/tinyos-2.x/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x406e35c8" loc="100:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x406d4d90" loc="100:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x406e3010" loc="100:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x406e3238" loc="101:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x406e3458" loc="101:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x406e2930" loc="119:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x406e3ee8" loc="119:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x406e20f0" loc="119:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x406e22f8" loc="119:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x406e2550" loc="120:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x406e27b8" loc="120:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x406d27f0" loc="70:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x406d2010" loc="70:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x406d2238" loc="70:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x406d2460" loc="71:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x406d2680" loc="71:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406d18e8" loc="91:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x406d1360" loc="81:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x406d1010" loc="81:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x406d1200" loc="81:/opt/tinyos-2.x/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x406e9b70" loc="140:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="137:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAdlarOn" ref="0x406dad98" loc="72:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Returns ADLAR (ADC left adjust result) status&#10; </short>
          <long>&#10; Returns ADLAR (ADC left adjust result) status&#10; @returns TRUE if ADLAR is on.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x406e6010" loc="166:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="161:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x406e7e78" loc="166:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x406e7010" loc="148:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="144:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x406dee90" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Sets the ADC channel&#10; </short>
          <long>&#10; Sets the ADC channel&#10; @param mux New channel&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mux" ref="0x406ded38" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x406ebc40" loc="108:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdlar" ref="0x406da8f0" loc="66:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Turns ADLAR (ADC left adjust result) on/off&#10; </short>
          <long>&#10; Turns ADLAR (ADC left adjust result) on/off&#10; @param adlarOn TRUE turns on ADLAR, FALSE turns it off&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adlarOn" ref="0x406da798" loc="66:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x406ea4c0" loc="117:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x406e7928" loc="159:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="154:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406e64b8" loc="176:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="168:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x406ea070" loc="112:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRef" ref="0x406ed7e8" loc="84:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Returns the current reference voltage&#10; </short>
          <long>&#10; Returns the current reference voltage&#10; @returns the current reference voltage&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x406ea918" loc="121:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="118:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x406eadc8" loc="125:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="122:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x406e92a8" loc="132:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="127:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x406e7480" loc="153:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="149:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x406da330" loc="60:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Returns the current ADC channel&#10; </short>
          <long>&#10; Returns the current ADC channel&#10; @return Current channel&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x406eb330" loc="95:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40423658"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x40423a00"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x406eb1d8" loc="95:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40423658"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x40423a00"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRef" ref="0x406ed380" loc="78:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Sets the reference voltage&#10; </short>
          <long>&#10; Sets the reference voltage&#10; @param ref New reference voltage&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ref" ref="0x406ed228" loc="78:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x406edce0" loc="90:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="86:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40423658"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x40423a00"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x406e9770" loc="136:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x406eb7e0" loc="101:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x406e6c08" loc="182:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
        <documentation loc="178:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x406e6ab0" loc="182:/opt/tinyos-2.x/tos/chips/atm128rfa1/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x406dfe88" loc="95:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x406dc3e0" loc="105:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40743458" loc="53:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40743a30" loc="61:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x407411a8" loc="56:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x40741b90" loc="73:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x4072fc40" loc="46:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x407416b8" loc="65:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x407401a8" loc="81:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.x/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x4073f4e8" loc="90:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x4073f9e8" loc="98:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/opt/tinyos-2.x/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x4074e840" loc="79:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4073c1f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x4074e6e8" loc="79:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4073c1f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x407394c8" loc="53:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x40739b88" loc="62:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4073c1f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40739a30" loc="62:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4073c1f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x4074e158" loc="70:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x4073c1f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x4077e4d8" loc="62:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
      <documentation loc="36:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x407994c0" loc="59:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x407994c0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40799628" loc="59:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40799628"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x40799c40" loc="66:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40799628"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40799ae8" loc="66:/opt/tinyos-2.x/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40799628"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x408aa138" loc="68:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x408abc98" loc="61:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x408ab888" loc="54:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x408ab320" loc="53:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtmegaPinChange" loc="35:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
      <function command="" provided="0" name="test" ref="0x408bf1a8" loc="43:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x408c4da0" loc="40:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x408bfcf8" loc="54:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x408bd138" loc="57:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x408bf560" loc="46:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMask" ref="0x408bdaa8" loc="65:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x408bd950" loc="65:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x408bf930" loc="51:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPins" ref="0x408bdec8" loc="70:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMask" ref="0x408bd558" loc="62:/opt/tinyos-2.x/tos/chips/atm128rfa1/pins/HplAtmegaPinChange.nc">
        <interfacedef-ref qname="HplAtmegaPinChange"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x40901378" loc="80:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="60:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x40902de8" loc="80:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x40901030" loc="80:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40901210" loc="80:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x4091b010" loc="135:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="126:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4091abd0" loc="135:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4091adb0" loc="135:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x4091a670" loc="123:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="113:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x408ff058" loc="96:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="82:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40901ec0" loc="96:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x408ffd48" loc="110:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="98:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408ff9f0" loc="110:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x408ffbe8" loc="110:/opt/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x40919ba0" loc="65:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40919a48" loc="65:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x409145a0" loc="78:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40914448" loc="78:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40912558" loc="126:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="109:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409121f8" loc="126:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409123d8" loc="126:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40913bc0" loc="106:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="96:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x40913228" loc="94:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40914ec0" loc="94:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x409130c8" loc="94:/opt/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x408f9eb0" loc="78:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
              <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408f9968" loc="78:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x408f9b48" loc="78:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x408f9d28" loc="78:/opt/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x409233b8" loc="59:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40923260" loc="59:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x40923eb0" loc="71:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40923d58" loc="71:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x40922950" loc="85:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409227f8" loc="85:/opt/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x40926648" loc="177:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x408db068"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x409264f0" loc="177:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x4090e010" loc="88:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40910e70" loc="88:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x40911ee0" loc="68:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x409105c8" loc="78:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40910470" loc="78:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x4092a8f8" loc="121:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4092a590" loc="121:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4092a798" loc="121:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x4090ebf8" loc="103:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4090e890" loc="103:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4090ea98" loc="103:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x408db2c8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x40928010" loc="147:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4090dea0" loc="147:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40928b48" loc="162:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40928818" loc="162:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x409289e8" loc="162:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40554df8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x4090d4c0" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4090d368" loc="136:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x40927370" loc="187:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x408db068"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40927010" loc="187:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x40927210" loc="187:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x408db068"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x40927be8" loc="195:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/opt/tinyos-2.x/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x408db068"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/opt/tinyos-2.x/tos/interfaces/Send.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x4091ce88" loc="75:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4091cb48" loc="75:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4091cd28" loc="75:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40936a18" loc="125:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="115:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409366b8" loc="125:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40936898" loc="125:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40936158" loc="112:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="102:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40937b38" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="77:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409379e0" loc="89:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40935820" loc="100:/opt/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x409354c8" loc="100:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x409356c0" loc="100:/opt/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x40958d28" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40958998" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x40958bc8" loc="31:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x4095ca80" loc="15:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x40958388" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40958010" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:47" alignment="I:1"><nx_struct-ref name="message_t" ref="0x40903bb0"/>
                <typename><typedef-ref name="message_t" ref="0x40902950"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x40958228" loc="23:/opt/tinyos-2.x/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
      <documentation loc="72:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x4097ac98" loc="95:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="88:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x409931a8" loc="105:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x40992368" loc="54:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40993f18" loc="49:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x409806b8" loc="56:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x40979408" loc="72:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x40977520" loc="94:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x409773c8" loc="94:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x40979930" loc="79:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x40980de8" loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40980c90" loc="65:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x40977a28" loc="100:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x40979e90" loc="85:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x4097e798" loc="71:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x4097ed60" loc="81:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x4097e188" loc="62:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x4097e030" loc="62:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x4097d4c0" loc="91:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x4097d368" loc="91:/opt/tinyos-2.x/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x4097c640" loc="62:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x4097ce28" loc="69:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4097ccd0" loc="69:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x4097b570" loc="80:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x4097b418" loc="80:/opt/tinyos-2.x/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40a30940" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40a305f0" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40a307e0" loc="48:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x40a2bcf0" loc="79:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="74:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40a2bb98" loc="79:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40a2a530" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="81:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40a2a1e0" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40a2a3d0" loc="90:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x40a2b158" loc="65:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x40a293c8" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="92:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40a2ae58" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40a29068" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40a29260" loc="99:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x40a2b6e0" loc="72:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40a2d7f0" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40a2d2a0" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40a2d490" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40a2d688" loc="57:/opt/tinyos-2.x/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40a3ba70" loc="46:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <documentation loc="39:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40a3b918" loc="46:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40a38378" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40a38010" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x40a38218" loc="56:/opt/tinyos-2.x/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x40a4d9e8" loc="44:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x40a4d1a8" loc="42:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x40a4a010" loc="49:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a4be80" loc="49:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x40a4b6d8" loc="47:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x40a508e0" loc="40:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x40a50d20" loc="41:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x40a4d5e8" loc="43:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x40a4dde8" loc="45:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x40a4b328" loc="46:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a4b1d0" loc="46:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x40a4baa8" loc="48:/opt/tinyos-2.x/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40357010" loc="57:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x40357918" loc="72:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x40357450" loc="65:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Led" loc="41:/opt/tinyos-2.x/tos/interfaces/Led.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/interfaces/Led.nc">
        <short> An interface to control a single LED.</short>
        <long> An interface to control a single LED.&#10;&#10; Provides the ability to turn on, turn off, and toggle an LED.&#10;&#10; Implementations of this interface are provided by the LedC&#10; component, both as positional names (Led0) and by color (Green).&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="toggle" ref="0x40b01e50" loc="53:/opt/tinyos-2.x/tos/interfaces/Led.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/interfaces/Led.nc">
          <short> Toggle the LED.</short>
          <long> Toggle the LED. *</long>
        </documentation>
        <interfacedef-ref qname="Led"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="on" ref="0x40b010c8" loc="43:/opt/tinyos-2.x/tos/interfaces/Led.nc">
        <documentation loc="42:/opt/tinyos-2.x/tos/interfaces/Led.nc">
          <short> Turn the LED on.</short>
          <long> Turn the LED on. *</long>
        </documentation>
        <interfacedef-ref qname="Led"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x40b01498" loc="46:/opt/tinyos-2.x/tos/interfaces/Led.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/interfaces/Led.nc">
          <short> Turn the LED off.</short>
          <long> Turn the LED off. *</long>
        </documentation>
        <interfacedef-ref qname="Led"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40b019e8" loc="50:/opt/tinyos-2.x/tos/interfaces/Led.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/interfaces/Led.nc">
          <short> Turn the LED on or off, depending on parameter.</short>
          <long> Turn the LED on or off, depending on parameter.&#10; @param turn_on if TRUE, turn LED on; otherwise turn LED off *</long>
        </documentation>
        <interfacedef-ref qname="Led"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="turn_on" ref="0x40b01890" loc="50:/opt/tinyos-2.x/tos/interfaces/Led.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppProtocol" loc="43:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
        <short> Basic interface used by the PPP infrastructure to connect to an&#10; arbitrary protocol.</short>
        <long> Basic interface used by the PPP infrastructure to connect to an&#10; arbitrary protocol.&#10;&#10; Components that provide this interface should generally define an&#10; enumeration value named Protocol in their specification, so that&#10; applications can wire the interface into the PppC Protocols&#10; subsystem using the correct protocol value.  See&#10; LinkControlProtocolC for a canonical example.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getProtocol" ref="0x40b2fa38" loc="54:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
          <short> Return the protocol code for this protocol.</short>
          <long> Return the protocol code for this protocol.&#10;&#10; This is primarily used to detect unrecognized protocols: a&#10; default implementation is defined that returns protocol 0, which&#10; is an illegal protocol value.  Upon detection of this situation,&#10; the PppC component delegates handling to a module that implements&#10; PppProtocolReject.&#10;&#10; @return A non-zero value for a registered protocol; zero if the&#10; protocol is unknown to the system. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocol"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="process" ref="0x40b2c4d8" loc="77:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
          <short> Process an incoming packet with the given information payload.</short>
          <long> Process an incoming packet with the given information payload.&#10;&#10; The packet memory is owned by the PppC component to which this&#10; protocol has been wired.  Normally, that memory is released for&#10; re-use upon return of this command.  There are cases where the&#10; protocol requires continued access to the data after this command&#10; completes (for example, to await completion of a PPP&#10; transmission).  The called component must invoke the&#10; Ppp.holdInputFrame() command during this command if it requires&#10; continued access to the input buffer.&#10;&#10; @param information A pointer to the start of the information&#10; field for the message.&#10;&#10; @param information_length The number of octets in the information&#10; field.  This may incorporate padding; the protocol must determine&#10; this.&#10;&#10; @return SUCCESS if packet was processed.  ERETRY if the system is&#10; busy but the packet might be processable again later.  Other errors&#10; indicate the packet should not be re-processed. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocol"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="information" ref="0x40b2c118" loc="77:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="information_length" ref="0x40b2c378" loc="78:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rejectedByPeer" ref="0x40b2b170" loc="94:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
        <documentation loc="80:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
          <short> Invoked to inform protocol that the peer rejected it.</short>
          <long> Invoked to inform protocol that the peer rejected it.&#10;&#10; Poor, sad, lonely protocol.&#10;&#10; @param data If not null, this begins the start of the information&#10; field from the message that caused the peer to reject the&#10; protocol.  If null, this is being invoked by the engine after the&#10; link has been reset, indicating that the protocol may re-enable&#10; itself.&#10;&#10; @param data_end Points past the end of whatever portion of the&#10; rejected message was returned by the peer.  Null if data is null.&#10;&#10; @return SUCCESS, please. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocol"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b2cd78" loc="94:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="data_end" ref="0x40b2b010" loc="95:/opt/tinyos-2.x/tos/lib/ppp/PppProtocol.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HdlcUart" loc="50:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
        <short> Provide basic UART-related functions required for the HdlcFramingC&#10; infrastructure.</short>
        <long> Provide basic UART-related functions required for the HdlcFramingC&#10; infrastructure.&#10;&#10; The HDLC framing infrastructure needs the ability to send blocks of&#10; characters, and to receive characters one-by-one as soon as they&#10; arrive.  The processing done on each received character is fairly&#10; complex.&#10;&#10; The UartStream interface's send command and receiveByte interface&#10; technically meet these needs.  However, both are async operations.&#10; At high serial data rates and when serving as a bridge for a&#10; high-data-rate radio interface, interrupt-driven reception causes&#10; dropped packets.  DMA-based reception can work around this, but the&#10; lack of an a-priori length for received messages makes the&#10; translation to a per-byte reception event complex.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40b299a0" loc="55:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
        <documentation loc="52:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
          <short> Send len bytes from the given address over the UART.</short>
          <long> Send len bytes from the given address over the UART.&#10;&#10; This command is essentially forwarded to UartStream.send. *</long>
        </documentation>
        <interfacedef-ref qname="HdlcUart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40b29640" loc="55:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b29840" loc="56:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x40b28ce0" loc="73:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
        <documentation loc="71:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
          <short> Notification of a newly received byte.</short>
          <long> Notification of a newly received byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HdlcUart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40b28b88" loc="73:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40b28010" loc="60:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
        <documentation loc="58:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
          <short> Notification of the result of the most recent send that returned&#10; SUCCESS.</short>
          <long> Notification of the result of the most recent send that returned&#10; SUCCESS. *</long>
        </documentation>
        <interfacedef-ref qname="HdlcUart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40b29e58" loc="60:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="uartError" ref="0x40b28618" loc="69:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
        <documentation loc="62:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
          <short> Notification of an error detected in serial processing.</short>
          <long> Notification of an error detected in serial processing.&#10;&#10; The event is raised once for each detected character drop, with&#10; an error value of ENOMEM.  It is raised with the error value&#10; SUCCESS when the infrastructure recovers from dropped characters&#10; and subsequent data is known to be good.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HdlcUart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40b284c0" loc="69:/opt/tinyos-2.x/tos/lib/ppp/HdlcUart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GetSetOptions" loc="37:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
        <short> Interface to help with configuring the options associated with a&#10; component.</short>
        <long> Interface to help with configuring the options associated with a&#10; component.  Rather like the GetSet interface, but slightly&#10; different to handle options expressed as a structure.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <parameters>
        <typedef name="type_t" ref="0x40b20268" loc="37:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
          <interfacedef-ref qname="GetSetOptions"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="type_t" scoped="" ref="0x40b20268"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40b20d30" loc="47:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
          <short> Get the current option configuration.</short>
          <long> Get the current option configuration.&#10;&#10; @return A copy of the currently configured options. *</long>
        </documentation>
        <interfacedef-ref qname="GetSetOptions"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="type_t" scoped="" ref="0x40b20268"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40b208d8" loc="42:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
        <documentation loc="38:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
          <short> Configure a subsystem.</short>
          <long> Configure a subsystem.&#10;&#10; @param options The proposed options&#10; @return SUCCESS if options are acceptable; EINVAL otherwise. *</long>
        </documentation>
        <interfacedef-ref qname="GetSetOptions"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                <type-var size="U:" alignment="U:"><typedef-ref name="type_t" scoped="" ref="0x40b20268"/></type-var>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="options" ref="0x40b20780" loc="42:/opt/tinyos-2.x/tos/lib/ppp/GetSetOptions.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                <type-var size="U:" alignment="U:"><typedef-ref name="type_t" scoped="" ref="0x40b20268"/></type-var>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Ppp" loc="40:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <short> Core functions provided by the PPP infrastructure: specifically,&#10; management of the internal buffers used for outgoing and incoming&#10; messages.</short>
        <long> Core functions provided by the PPP infrastructure: specifically,&#10; management of the internal buffers used for outgoing and incoming&#10; messages.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="fixOutputFrameLength" ref="0x40b23c78" loc="81:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <documentation loc="76:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
          <short> Mark the maximum length of the frame.</short>
          <long> Mark the maximum length of the frame.&#10;&#10; frame_end must lie within the frame identified by the given key.&#10;&#10; This may release memory for use in other output frames. *</long>
        </documentation>
        <interfacedef-ref qname="Ppp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable ref="0x40b238b8" loc="81:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </variable>
          <variable name="frame_end" ref="0x40b23b18" loc="81:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="outputFrameTransmitted" ref="0x40b214a8" loc="112:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <documentation loc="106:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
          <short> Indication that transmission of an output message has been&#10; resolved.</short>
          <long> Indication that transmission of an output message has been&#10; resolved.  The caller may read the message contents until the&#10; event returns.&#10;&#10; @param key The key that identifies the frame that was transmitted&#10; @param result The disposition of the transmission *</long>
        </documentation>
        <interfacedef-ref qname="Ppp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x40b21138" loc="112:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </variable>
          <variable name="result" ref="0x40b21348" loc="113:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendOutputFrame" ref="0x40b22340" loc="97:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
          <short> Transmit an output frame.</short>
          <long> Transmit an output frame.&#10;&#10; @TODO@ Auto-fix length of buffer&#10;&#10; The frame will be submitted for transmission.  If this command&#10; returns SUCCESS, transmission will continue in the background and&#10; its completion will be indicated by the outputFrameTransmitted&#10; event.  With any other return value the transmission failed.&#10;&#10; The caller is not permitted to modify the memory of this frame&#10; after invoking this command.  If this command returns SUCCESS,&#10; the caller may hold on to the frame_end value until the&#10; subsequent outputFrameTransmitted event is signalled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ppp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x40b221e8" loc="97:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="releaseOutputFrame" ref="0x40b22b90" loc="104:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <documentation loc="99:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
          <short> Cancel transmission of an output frame.</short>
          <long> Cancel transmission of an output frame.&#10;&#10; The caller is not permitted to access the memory of this frame&#10; after invoking this command.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ppp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="key" ref="0x40b22a38" loc="104:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
              <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOutputFrame" ref="0x40b25c58" loc="71:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
          <short> Obtain storage for an outbound message.</short>
          <long> Obtain storage for an outbound message.&#10;&#10; The frame is initialized to hold a message associated with the&#10; given protocol.  It is the callers responsibility to fill in the&#10; remainder of the message, then to invoke either sendOutputFrame&#10; if the message is to be transmitted or releaseOutputFrame if the&#10; message is to be dropped.&#10;&#10; It is implementation-defined whether multiple output frames are&#10; available for use.  If no output frames are available, this&#10; command will return a null pointer.&#10;&#10; @return A pointer to the information field of the output message,&#10; or a null pointer if no output buffers are available.&#10; &#10; @param protocol The protocol to which the message will belong.&#10;&#10; @param frame_endp Secondary output value specyfing the address at&#10; which the frame ends.  Attempts to store at or beyond this&#10; address result in undefined behavior.&#10;&#10; @param inhibit_compression Indicate that, for this protocol, all&#10; non-default compression should be inhibited: in particular this&#10; means the protocol will always require two octets, and the&#10; address and control fields will be present.  Required for LCP.&#10;&#10; @param keyp Where to store the key that must be used to identify&#10; this output frame to the other output-related commands.  Assigned&#10; only if this command returns a non-null pointer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Ppp"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
              </type-pointer>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="protocol" ref="0x40b25370" loc="71:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="frame_endp" ref="0x40b25608" loc="72:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="inhibit_compression" ref="0x40b25880" loc="73:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
          <variable name="keyp" ref="0x40b25ac8" loc="74:/opt/tinyos-2.x/tos/lib/ppp/Ppp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppProtocolCodeSupport" loc="48:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
        <short> Most PPP control protocols are modeled on RFC1661's Link Control&#10; Protocol, and use a packet format comprising:&#10; - A one-octet Code field&#10; - A one-octet Identifier field&#10; - A two-octet Length field&#10; - A data field of varying length.</short>
        <long> Most PPP control protocols are modeled on RFC1661's Link Control&#10; Protocol, and use a packet format comprising:&#10; - A one-octet Code field&#10; - A one-octet Identifier field&#10; - A two-octet Length field&#10; - A data field of varying length.&#10;&#10; The code determines the specific format of the data field and how&#10; it should be interpreted.  This interface allows an application to&#10; determine which codes will be supported by only wiring in the ones&#10; that are necessary.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getCode" ref="0x40b3ec70" loc="55:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
          <short> Return the code for this handler.</short>
          <long> Return the code for this handler.&#10;&#10; This is primarily used to detect unrecognized codes: a default&#10; implementation is defined that returns code 0, which is an&#10; illegal code value.  Upon detection of this situation, the&#10; control protocol will generate a Code-Reject message. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="invoke" ref="0x40b3a090" loc="74:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
        <documentation loc="63:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
          <short> Invoke some code-specific operation.</short>
          <long> Invoke some code-specific operation.&#10;&#10; Generally it involves building and transmitting a message.  If&#10; so, the key for detection completion of that message should be&#10; returned.&#10;&#10; @param param A code-specific structure, if needed to pass external information&#10;&#10; @param keyp A destination into which the output frame key should&#10; be provided if invocation of this handler results in the&#10; transmission of a message. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x40b3bcc0" loc="74:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="keyp" ref="0x40b3bf08" loc="75:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="process" ref="0x40b3b838" loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
        <documentation loc="57:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
          <short> Process an incoming packet with the given identifer and data&#10; region.</short>
          <long> Process an incoming packet with the given identifer and data&#10; region. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolCodeSupport"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="identifier" ref="0x40b3b228" loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x40b3b468" loc="60:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="data_end" ref="0x40b3b6d0" loc="61:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeSupport.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppProtocolReject" loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
        <short> Allow custom reaction to unrecognized protocols.</short>
        <long> Allow custom reaction to unrecognized protocols.&#10;&#10; If a Link Control Protocol component is available, its&#10; Protocol-Reject message can be used to inform the remote that a&#10; protocol is unrecognized.  Other PPP components may chose to just&#10; drop the message.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <function command="" provided="0" name="process" ref="0x40b3ddc8" loc="51:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
        <documentation loc="41:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
          <short> Do something when a message with an unrecognized protocol has been received.</short>
          <long> Do something when a message with an unrecognized protocol has been received.&#10;&#10; @param protocol The protocol value from the PPP message&#10;&#10; @param information The start of the information field from the&#10; message&#10;&#10; @param length The number of octets in the information field,&#10; including any subsequent padding&#10;</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolReject"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="protocol" ref="0x40b3d7f8" loc="51:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="information" ref="0x40b3da78" loc="52:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x40b3dc60" loc="53:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolReject.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppRejectedProtocol" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
        <short> Support to inform the PPP primary engine that one of the&#10; registered protocols was rejected by the peer.</short>
        <long> Support to inform the PPP primary engine that one of the&#10; registered protocols was rejected by the peer.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="rejected" ref="0x40b4b478" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
        <documentation loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
          <short> Inform main engine that a ProtocolReject message was received.</short>
          <long> Inform main engine that a ProtocolReject message was received.&#10;&#10; @param protocol The protocol value from the rejected message&#10;&#10; @param data The information field of the rejected message&#10;&#10; @param data_end First byte past the end of whatever portion of&#10; the original message could be returned.&#10;&#10; @return The result of informing the protocol that it has been&#10; rejected (see PppProtocol.rejectedByPeer). *</long>
        </documentation>
        <interfacedef-ref qname="PppRejectedProtocol"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="protocol" ref="0x40b4fe48" loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x402121e8"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x40b4b0a8" loc="50:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="data_end" ref="0x40b4b310" loc="51:/opt/tinyos-2.x/tos/lib/ppp/PppRejectedProtocol.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FragmentPool" loc="44:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <short> Support for a memory pool that fragments a large block into&#10; arbitrarily sized smaller blocks based on need.</short>
        <long> Support for a memory pool that fragments a large block into&#10; arbitrarily sized smaller blocks based on need.&#10;&#10; The use case is buffer management for arbitrarily-sized messages,&#10; such as HDLC frames received.  A client requests a block of memory,&#10; fills part of it, then returns the remainder to the pool.  It may&#10; then request a new block, while the newly received message is&#10; processed.  Ultimately, the fragment is released back to the pool.&#10; The largest available fragment is returned for each request.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40b64bd8" loc="110:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="102:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Release the fragment at the given address.</short>
          <long> Release the fragment at the given address.&#10;&#10; @param start The address returned as start from a previous&#10; request that has not been released.&#10;&#10; @return SUCCESS if the fragment was freed.  EINVAL if the start&#10; address does not correspond to a fragment.  EALREADY if the&#10; fragment had already been released. *</long>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="start" ref="0x40b64a80" loc="110:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="slotCount" ref="0x40b48bb8" loc="51:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="48:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Number of slots for the pool&#10;&#10; This imposes an upper limit on the number of fragments allowed.</short>
          <long> Number of slots for the pool&#10;&#10; This imposes an upper limit on the number of fragments allowed. *</long>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="available" ref="0x40b632a0" loc="120:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="112:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Notification that a new fragment is available.</short>
          <long> Notification that a new fragment is available.&#10;&#10; Clients that require a minimum buffer length in order to function&#10; may link to this event to be notified when a candidate is&#10; created.&#10;&#10; @param length The number of bytes in the newly released&#10; fragment. *</long>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="length" ref="0x40b63148" loc="120:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x40b666e0" loc="75:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Get the longest available fragment in the pool.</short>
          <long> Get the longest available fragment in the pool.&#10;&#10; @note No error checking is done on the pointers passed to this&#10; method.  You must provide addresses for both the start and the&#10; end fragment pointer.&#10;&#10; @param start Pointer to where the start of the fragment should be&#10; written.  The address will be 16-bit aligned.  The stored value&#10; is valid only when this function returns SUCCESS.&#10;&#10; @param end Pointer to where the end of the fragment should be&#10; written.  This is the offset at which writing is no longer&#10; permitted.  The stored value is valid only when this function&#10; returns SUCCESS.&#10;&#10; @param minimum_size Minimum size, in bytes, that is useful to&#10; the caller.  If the largest available fragment is not at least&#10; this size, returns ENOMEM.&#10;&#10; @return SUCCESS if a fragment is available.  ENOMEM if no&#10; fragments are available.  start and end are updated only if this&#10; returns SUCCESS. *</long>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                </type-int>
              </type-pointer>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                </type-int>
              </type-pointer>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="start" ref="0x40b66120" loc="75:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                </type-int>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="end" ref="0x40b66350" loc="76:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                </type-int>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="minimum_size" ref="0x40b66578" loc="77:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="poolSize" ref="0x40b48798" loc="46:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="45:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Size of the pool, in bytes *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="freeze" ref="0x40b642c0" loc="99:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
        <documentation loc="79:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
          <short> Release part of a previously allocated fragment.</short>
          <long> Release part of a previously allocated fragment.&#10;&#10; Note that a lack of available slots may prevent the fragment from&#10; being split, so there is no guarantee that the remainder of the&#10; fragment is available for re-use.  If it is, available() will be&#10; signaled.  If it is not, the entire fragment remains allocated&#10; until it is released.&#10;&#10; @param start Pointer to the fragment start.  Must be a value&#10; previously returned by request but which has not been released or&#10; frozen.&#10;&#10; @param end Pointer to the first byte of the released portion of&#10; the fragment.&#10;&#10; @return SUCCESS in absence of an error, whether or not the&#10; remainder of the fragment could be made available.  EINVAL if the&#10; provided start does not correspond to a fragment, or if the end&#10; is outside the fragment.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FragmentPool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="start" ref="0x40b66f10" loc="99:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="end" ref="0x40b64160" loc="100:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HdlcFraming" loc="39:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <short> Interface to support RFC1662-conformant HDLC-like framing of&#10; packets for the Point-to-Point Protocol.</short>
        <long> Interface to support RFC1662-conformant HDLC-like framing of&#10; packets for the Point-to-Point Protocol.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="receivedFrame" ref="0x40b44e98" loc="94:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="85:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Indicate that a frame has been successfully received.</short>
          <long> Indicate that a frame has been successfully received.&#10;&#10; This event is signalled by a task, not within the UART interrupt&#10; handler.  The signal is asynchronous to any receivedDelimiter()&#10; and receptionError() events.  Regardless of the number of frames&#10; received, a subsequent receivedFrame() event shall not occur&#10; until after the releaseReceivedFrame() command releases the&#10; buffer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b44b70" loc="94:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b44d38" loc="95:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedDelimiter" ref="0x40b69d68" loc="120:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="113:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Notification that a flag sequence byte has been received.</short>
          <long> Notification that a flag sequence byte has been received.&#10;&#10; @warning This event is signalled while processing the UART&#10; interrupt.  Act quickly and return.&#10;&#10; It is guaranteed that this event will be signaled prior to the&#10; receivedFrame event. *</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sendFrame" ref="0x40b46788" loc="65:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Initiate transmission of a frame of data.</short>
          <long> Initiate transmission of a frame of data.&#10;&#10; This command starts the state machine and begins to transmit the&#10; provided data.  RFC1662-required delimeters, HDLC address and&#10; control fields, the payload with transparency conversions, and&#10; the 16-bit CRC are all added as the frame is transmitted.&#10;&#10; If this command returns SUCCESS, the sendDone event will be&#10; signaled to indicate the ultimate success/failure of the&#10; transmission.  The pointer passed to this command will be&#10; provided in the event, so components may more easily detect&#10; completion of transmissions they initiated.&#10;&#10; @param data Pointer to a block of data that is to be transmitted.&#10;&#10; @param len Number of octets in the data block.&#10;&#10; @param inhibit_accomp If TRUE, send the address and control&#10; fields even if the implementing component is configured to&#10; suppress them.&#10;&#10; @return SUCCESS if the frame transmission has begun.  EBUSY if&#10; the system is already transmitting a frame.  Other errors if the&#10; underlying UART is unable to transmit data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b46210" loc="65:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b463d8" loc="66:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="inhibit_accomp" ref="0x40b46620" loc="67:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40b44530" loc="81:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="69:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Notification that the attempt to transmit a frame of data has&#10; completed.</short>
          <long> Notification that the attempt to transmit a frame of data has&#10; completed.&#10;&#10; @note This event is raised by the HdlcFramingC task.&#10;&#10; @param data The original data pointer provided to sendFrame.&#10;&#10; @param len The original frame length provided to sendFrame.&#10;&#10; @param err The disposition of the transmission: SUCCESS if&#10; succeeded, other values indicating failure in the state machine&#10; or underlying serial transport. *</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40b44010" loc="81:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40b441d8" loc="82:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="err" ref="0x40b443c8" loc="83:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="releaseReceivedFrame" ref="0x40b69700" loc="111:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="97:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Inform the framer that it can reclaim space used by the given&#10; frame.</short>
          <long> Inform the framer that it can reclaim space used by the given&#10; frame.&#10;&#10; Each received frame must be released before the next frame will&#10; be signalled.&#10;&#10; It is guaranteed that the next receivedFrame() signal will not&#10; occur during this call.  This allows the caller to release state&#10; after this command without having to worry that the state was&#10; overwritten by the next frame.&#10;&#10; @param data Pointer to the start of a received frame, as provided&#10; through the most recent receiveFrame() event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buffer" ref="0x40b695a8" loc="111:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receptionError" ref="0x40b68468" loc="133:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
        <documentation loc="122:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
          <short> Notification that an error occurred during frame reception.</short>
          <long> Notification that an error occurred during frame reception.&#10;&#10; Note that a reception error does not release the received buffer.&#10; The system will resynchronize on the next frame delimiter.&#10;&#10; @warning This event is signalled while processing the UART&#10; interrupt.  Act quickly and return.&#10;&#10; It is guaranteed that this event will signaled prior to the&#10; receivedDelimiter event if an unexpected delimiter is the cause&#10; of the error. *</long>
        </documentation>
        <interfacedef-ref qname="HdlcFraming"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><enum-ref name="HdlcError_e" ref="0x40b0bae8"/>
              <typename><typedef-ref name="HdlcError_e" ref="0x40b30f20"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="code" ref="0x40b68310" loc="133:/opt/tinyos-2.x/tos/lib/ppp/HdlcFraming.nc">
            <type-tag size="I:2" alignment="I:1"><enum-ref name="HdlcError_e" ref="0x40b0bae8"/>
              <typename><typedef-ref name="HdlcError_e" ref="0x40b30f20"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FragmentPoolStorage" loc="43:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
      <documentation loc="34:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <short> Provide the core configuration information for a specific pool.</short>
        <long> Provide the core configuration information for a specific pool.&#10;&#10; This interface allows each pool to have a different buffer size and&#10; number of available slots.  On software initialization, the overall&#10; pool manager collects the basic information for each pool and&#10; initializes the data structures.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="slotCount" ref="0x40baad10" loc="57:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <documentation loc="56:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
          <short> Number of slots for the pool *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPoolStorage"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="slots" ref="0x40baa8e0" loc="54:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <documentation loc="53:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
          <short> Pointer to the array of slots for the pool *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPoolStorage"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref name="FragmentPoolSlot_t" ref="0x40bb2328"/>
              <typename><typedef-ref name="FragmentPoolSlot_t" ref="0x40bb2858"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="id" ref="0x40badb88" loc="45:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
          <short> The identifier for the pool; debug use only *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPoolStorage"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1">
            <typename><typedef-ref name="fragment_pool_id_t" ref="0x40bb2010"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="poolSize" ref="0x40baa430" loc="51:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <documentation loc="50:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
          <short> Size of the pool, in bytess *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPoolStorage"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="pool" ref="0x40baa010" loc="48:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
        <documentation loc="47:/opt/tinyos-2.x/tos/lib/fragpool/FragmentPoolStorage.nc">
          <short> Address of the start of the pool *</short>
        </documentation>
        <interfacedef-ref qname="FragmentPoolStorage"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppProtocolOption" loc="39:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <short> Operations that should be supported for each option that can be&#10; configured through an LCP-style automaton negotiation.</short>
        <long> Operations that should be supported for each option that can be&#10; configured through an LCP-style automaton negotiation.&#10;&#10; @note We currently do not support options that can appear multiple&#10; times in a single request.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com> *</long>
      </documentation>
      <function command="" provided="0" name="considerRequest" ref="0x40c69e20" loc="74:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="68:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Determine whether the proposed remote value is acceptable to the&#10; protocol.</short>
          <long> Determine whether the proposed remote value is acceptable to the&#10; protocol.&#10; @return PppControlProtocolCode_Configure{Ack,Nak,Reject},&#10; depending on whether the option value specified at dp is&#10; acceptable to this end of the link. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40c69a90" loc="74:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c69cc0" loc="75:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="appendRequest" ref="0x40c68830" loc="80:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="77:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Add a proposed local value to a message.</short>
          <long> Add a proposed local value to a message.  The option type and&#10; length fields are already incorporated; only the data portion is&#10; to be stored. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40c68480" loc="80:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c686b0" loc="81:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNegotiable" ref="0x40c69458" loc="66:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Set whether the local value of the option should be negotiated,&#10; based on protocol activity.</short>
          <long> Set whether the local value of the option should be negotiated,&#10; based on protocol activity.&#10;&#10; Option negotiation is set to FALSE upon receipt of a&#10; Configure-Reject message identifying the option, and upon a&#10; Reject return from considerRequest.  It is set to TRUE upon&#10; receipt of a non-Reject return from considerRequest. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="is_negotiable" ref="0x40c69300" loc="66:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="processNakValue" ref="0x40c64010" loc="138:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="128:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Process a proposed alternative local value.</short>
          <long> Process a proposed alternative local value.&#10;&#10; This operation is invoked when the remote sends a Configure-Nak&#10; in response to local's Configure-Request.  Generally, the&#10; response should be to replace the original local value with the&#10; value proposed by the peer, or to mark the option non-negotiable.&#10;&#10; @param dp Start of the option value.&#10;&#10; @param dpe First octet past option value. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40c65ba8" loc="138:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c65dd8" loc="139:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRemote" ref="0x40c64968" loc="152:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="141:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Set (reset) the option's remote value.</short>
          <long> Set (reset) the option's remote value.&#10;&#10; The set operation is invoked on each option present in a&#10; transmitted Configure-Ack message (i.e., the remote node&#10; requested the value).  This is done after transmission.  The&#10; reset operation is invoked upon receipt of a Configure-Request.&#10;&#10; @param dp Start of the option value.  If passed as a null&#10; pointer, option is reset to its default.&#10;&#10; @param dpe First octet past option value. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40c645d8" loc="152:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c64808" loc="153:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40c67c68" loc="112:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="106:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Completely reset the option prior to a new negotiation sequence.</short>
          <long> Completely reset the option prior to a new negotiation sequence.&#10;&#10; This brings things back to their power-up default, and is&#10; executed when the link goes down.  It re-enables options for&#10; negotiation, and restores default proposed local and remote&#10; values. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocal" ref="0x40c65588" loc="125:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="114:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Set (reset) the option's local value.</short>
          <long> Set (reset) the option's local value.&#10;&#10; The set operation is invoked on each option present in a received&#10; Configure-Ack message (i.e., this node requested the value).  The&#10; reset operation is invoked prior to transmission of a&#10; Configure-Request (need permission for value).&#10;&#10; @param dp Start of the option value.  If passed as a null&#10; pointer, option is reset to its default.&#10;&#10; @param dpe First octet past option value. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40c651f8" loc="125:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c65428" loc="126:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="appendNakValue" ref="0x40c675d8" loc="101:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="83:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Add an alternative suggestion to a Nak message.</short>
          <long> Add an alternative suggestion to a Nak message.  The option type&#10; and length fields are already reserved; only the data portion is&#10; to be stored.&#10;&#10; If the option cannot express an acceptable alternative within the&#10; buffer indicated by dp to dpe, the command should return a null&#10; pointer.  Otherwise, the command should return a pointer just&#10; past the last octet of its proposed alternative.&#10;&#10; @param sp The value in the Configure-Request message, in case&#10; that's useful when proposing an alternative&#10;&#10; @param spe Indidates the end of the requested option value&#10;&#10; @param dp Where the proposed alternative should be stored&#10;&#10; @param dpe The limit up to which the proposed alternative may be&#10; written. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sp" ref="0x40c68d80" loc="101:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="spe" ref="0x40c67010" loc="102:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dp" ref="0x40c67218" loc="103:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40c67448" loc="104:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0x40c6d720" loc="47:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="40:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Return the option type code for this option within its protocol.</short>
          <long> Return the option type code for this option within its protocol.&#10;&#10; This is primarily used to detect unrecognized options: a default&#10; implementation is defined that returns option 0, which is an&#10; illegal option value.  Upon detection of this situation, the&#10; configuration processing implementation will generate a&#10; Configure-Reject message. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNegotiable" ref="0x40c6dcd0" loc="57:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
        <documentation loc="49:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolOption.nc">
          <short> Return TRUE iff the option should be added to outgoing&#10; Configure-Request messages.</short>
          <long> Return TRUE iff the option should be added to outgoing&#10; Configure-Request messages.&#10;&#10; If the option is negotiable, appendRequest will invoked to append&#10; the proposed local value to the outgoing request message.&#10;&#10; @note Negotiability of remote values for options is indicated by&#10; the return value of considerRequest. *</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolOption"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4034c6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppProtocolCodeCoordinator" loc="42:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
        <short> Common support for all protocols that use code-based handlers.</short>
        <long> Common support for all protocols that use code-based handlers.&#10;&#10; The set of codes recognized by each protocol is different, but the&#10; process of identifying the code and dispatching to the appropriate&#10; handler is the same.  Similarly, most such protocols produce an&#10; error response via a Code-Reject packet when an unrecognized code&#10; is encountered.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="rejectPacket" ref="0x40c5f840" loc="79:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
        <documentation loc="61:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
          <short> Generate the appropriate reject packet for an unrecognized input.</short>
          <long> Generate the appropriate reject packet for an unrecognized input.&#10;&#10; @param rejected_protocol Normally zero, indicating a Code-Reject&#10; packet should be produced.  If non-zero, represents an&#10; unrecognized protocol, and generates a Protocol-Reject packet.&#10; This should only be non-zero when invoked from&#10; LinkControlProtocol.&#10;&#10; @param ip pointer to the start of the rejected packet information field&#10;&#10; @param ipe pointer to the first octet following the rejected&#10; packet's information field&#10;&#10; @param keyp where to store the HDLC transmission frame key for&#10; the transmitted packet.  Passing a null pointer indicates the&#10; frame key is not saved (meaning nobody needs to know when the&#10; transmission completes).&#10;</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolCodeCoordinator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="rejected_protocol" ref="0x40c5f030" loc="79:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
          <variable name="ip" ref="0x40c5f258" loc="80:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="ipe" ref="0x40c5f488" loc="81:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="keyp" ref="0x40c5f6d0" loc="82:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-pointer size="I:2" alignment="I:1">
                <type-qualified const="">
                    <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                  <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
                </type-qualified>
                <typename><typedef-ref name="frame_key_t" ref="0x40437a98"/></typename>
              </type-pointer>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dispatch" ref="0x40c60908" loc="58:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
        <documentation loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
          <short> Extract the code information from an information field and&#10; dispatch it to the appropriate handler.</short>
          <long> Extract the code information from an information field and&#10; dispatch it to the appropriate handler.&#10;&#10; If the code is not recognized, this produces a Code-Reject packet&#10; in the given protocol.&#10;&#10; @param information the information section of a PPP packet&#10;&#10; @param information_length the number of octets in the information section&#10;&#10; @return The result of invoking the&#10; PppProtocolCodeSupport.process() command for the appropriate&#10; handler (or of submitting the Code-Reject packet)&#10;</long>
        </documentation>
        <interfacedef-ref qname="PppProtocolCodeCoordinator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x4035c340"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="information" ref="0x40c60548" loc="58:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="information_length" ref="0x40c607a8" loc="59:/opt/tinyos-2.x/tos/lib/ppp/PppProtocolCodeCoordinator.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PppConfigure" loc="37:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
        <short> Provide facility to set a complete set of options for a given&#10; protocol.</short>
        <long> Provide facility to set a complete set of options for a given&#10; protocol.&#10;&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="resetOptions" ref="0x40cbd8c8" loc="44:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
        <documentation loc="38:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
          <short> Completely reset all options prior to a new negotiation sequence.</short>
          <long> Completely reset all options prior to a new negotiation sequence.&#10;&#10; This brings things back to their power-up default, and is&#10; executed when the link goes down.  This includes default proposed&#10; local and remote values, as well as resetting whether the option&#10; is negotiable. *</long>
        </documentation>
        <interfacedef-ref qname="PppConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalOptions" ref="0x40cba420" loc="61:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
          <short> Set (reset) the local value for a protocol's options.</short>
          <long> Set (reset) the local value for a protocol's options.&#10;&#10; This is invoked to set options by passing an encoded option set&#10; extracted from a received Configure-Ack; to convey proposed&#10; alternatives from a Configure-Nak; and to disable negotiation&#10; from a Configure-Reject.  If the code is for Configure-Ack, the&#10; content of this set must match the previously transmitted&#10; Configure-Request.&#10;&#10; This is invoked with null pointers to reset the local values&#10; prior to transmission of a Configure-Request.&#10;&#10; @param code The message type from which the options were received.&#10; @param dp Start of the encoded option sequence; null for reset&#10; @param dpe End of the encoded option sequence; null for reset *</long>
        </documentation>
        <interfacedef-ref qname="PppConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="code" ref="0x40cbde48" loc="61:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="dp" ref="0x40cba088" loc="62:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40cba2b8" loc="63:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRemoteOptions" ref="0x40cbaf00" loc="76:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
        <documentation loc="65:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
          <short> Set (reset) the remote value for a protocol's options.</short>
          <long> Set (reset) the remote value for a protocol's options.&#10;&#10; This is invoked to set options by passing an encoded option set&#10; extracted from a transmitted Configure-Ack (equivalently, an&#10; accepted received Configure-Request).&#10;&#10; This is invoked with null pointers to reset the remote values&#10; upon receipt of a Configure-Request.&#10;&#10; @param dp Start of the encoded option sequence&#10; @param dpe End of the encoded option sequence *</long>
        </documentation>
        <interfacedef-ref qname="PppConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dp" ref="0x40cbab70" loc="76:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="dpe" ref="0x40cbada0" loc="77:/opt/tinyos-2.x/tos/lib/ppp/PppConfigure.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Putchar" loc="44:/opt/tinyos-2.x/tos/lib/printf/Putchar.nc">
      <documentation loc="32:/opt/tinyos-2.x/tos/lib/printf/Putchar.nc">
        <short> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.</short>
        <long> Interface to be implemented by any low-level component that&#10; provides character output for libc-based printf in TinyOS.  The&#10; component providing this interface should be wired to PutcharC from&#10; $(TOSDIR)/lib/printf.&#10;&#10; @note On some platforms inclusion of &#60;stdio.h> may define putchar&#10; as a macro.  Any need for this should be eliminated by the&#10; implementation in PutcharP.nc, so &#34;#undef putchar&#34; prior to your&#10; use of this identifier when implementing this interface.&#10;&#10; @author Peter A. Bigot &#60;pabigot@users.sourceforge.net>&#10;</long>
      </documentation>
      <function command="" provided="0" name="putchar" ref="0x40e30b98" loc="49:/opt/tinyos-2.x/tos/lib/printf/Putchar.nc">
        <documentation loc="46:/opt/tinyos-2.x/tos/lib/printf/Putchar.nc">
          <short> Send the unsigned char represented by c to the output.</short>
          <long> Send the unsigned char represented by c to the output.  Return&#10; -1 on error, and c if successful. *</long>
        </documentation>
        <interfacedef-ref qname="Putchar"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="c" ref="0x40e30a40" loc="49:/opt/tinyos-2.x/tos/lib/printf/Putchar.nc">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
